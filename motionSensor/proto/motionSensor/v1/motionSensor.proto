/*
Copyright Â© 2022 Ci4Rail GmbH <engineering@ci4rail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
syntax = "proto3";

package motionSensor;
option go_package = "motionSensor/v1";

// ============= Configuration =================

// ConfigurationSet to pass to Functionblock.Configuration.functionSpecificConfigurationSet hook
message ConfigurationSet {
    // Desired data rate in 1/1000 Hz
    fixed32 sample_rate_milliHz = 1;
    // Full scale acceleration in g
    int32 full_scale_g = 2;
    // Whether to enable high-pass filter (i.e. don't use low pass)
    bool high_pass_filter_enable = 3;
    // band width of low/hig-hpass as ratio of sample_rate
    // .e.g. select 2 when the filterbandwith shall be sample_rate/2
    // For LIS2D, i
    int32 band_width_ratio = 4;
}

// ConfigurationSetResponse to pass to Functionblock.Configuration.functionSpecificConfigurationSetResponse hook
message ConfigurationSetResponse {
    // no parameters
}

// ConfigurationGet to pass to Functionblock.Configuration.functionSpecificConfigurationGet hook
message ConfigurationGet {
    // no parameters
}

// ConfigurationGetResponse to pass to Functionblock.ConfigurationGetResponse.functionSpecificConfigurationGetResponse hook
// Returns the current hardware configuration
message ConfigurationGetResponse {
    // Actual sample rate in 1/100 Hz
    fixed32 sample_rate_millihz = 1;
    // Actual full scale acceleration in g
    int32 full_scale_g = 2;
    // Whether high-pass filter is enabled
    bool high_pass_filter_enable = 3;
    // Actual band width of low/high-pass as ratio of sample_rate
    int32 band_width_ratio = 4;
}

// ConfigurationDescribe to pass to Functionblock.Configuration.functionSpecificConfigurationDescribe hook
message ConfigurationDescribe {
    // no parameters
}

message ConfigurationDescribeResponse {
    // TODO: Possible sample rates, full scale, high pass filter support, temperature support
}

// ============= FunctionControl =================

// FunctionControlGet to pass to Functionblock.FunctionControl.functionSpecificFunctionControlGet hook
message FunctionControlGet {
    // no parameters
}

// FunctionControlSet to pass to Functionblock.FunctionControl.functionSpecificFunctionControlSet hook
message FunctionControlSet {
    // Not implemented
}


// FunctionControlGetResponse to pass to Functionblock.FunctionControlResponse.functionSpecificControlGet hook
message FunctionControlGetResponse {
    // Not implemented
}


// FunctionControlSetResponse to pass to Functionblock.FunctionControlResponse.functionSpecificControlSet hook
message FunctionControlSetResponse {
    // Not implemented
}


// ============= StreamControl ==================
// StreamControlStart to pass to Functionblock.StreamControlStart.functionSpecificStreamControlStart hook
message StreamControlStart {
    // no parameters
}

message Sample {
    // Timestamp for that specific sample. This is the time the sample was taken.
    // This timestamp is in microseconds since the start of the device and does not get synchronized with the clients time.
    fixed64 timestamp = 1;
    // x Acceleration in g
    float x = 2;
    // y Acceleration in g
    float y = 3;
    // z Acceleration in g
    float z = 4;
}

// StreamData to pass to Functionblock.StreamData.functionSpecificStreamData hook
message StreamData {
    repeated Sample samples = 1;
}
