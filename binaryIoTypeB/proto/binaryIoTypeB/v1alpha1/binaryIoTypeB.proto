/*
Copyright Â© 2022 Ci4Rail GmbH <engineering@ci4rail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
syntax = "proto3";

package binaryIoTypeB;
option go_package = "binaryIoTypeB/v1alpha1";

// ============= Configuration =================

// ConfigurationSet to pass to Functionblock.Configuration.functionSpecificConfigurationSet hook
message ConfigurationSet {
    // not implemented
}

// ConfigurationSetResponse to pass to Functionblock.Configuration.functionSpecificConfigurationSetResponse hook
message ConfigurationSetResponse {
    // not implemented
}

// ConfigurationGet to pass to Functionblock.Configuration.functionSpecificConfigurationGet hook
message ConfigurationGet {
    // not implemented
}

// ConfigurationGetResponse to pass to Functionblock.ConfigurationGetResponse.functionSpecificConfigurationGetResponse hook
// Returns the current hardware configuration
message ConfigurationGetResponse {
    // not implemented
}

// ConfigurationDescribe to pass to Functionblock.Configuration.functionSpecificConfigurationDescribe hook
message ConfigurationDescribe {
    // no parameters
}

enum ChannelDirection {
    // input channel
    BINARYIOTYPEB_INPUT = 0;
    // output channel
    BINARYIOTYPEB_OUTPUT = 1;
    // input/output channel
    BINARYIOTYPEB_INPUT_OUTPUT = 2;
}

message ChannelConfig {
    // channel number
    fixed32 channel = 1;
    // channel direction
    ChannelDirection direction = 2;
}

message ConfigurationDescribeResponse {
    repeated ChannelConfig channelConfig = 1;
}

// ConfigurationResponse to pass to Functionblock.ConfigurationResponse.functionSpecificConfigurationResponse hook
message ConfigurationResponse {
    oneof type {
        ConfigurationGetResponse get = 1;
        ConfigurationSetResponse set = 2;
        ConfigurationDescribeResponse describe = 3;
    }
}


// ============= FunctionControl =================
// Gets the current value of a single binary channel
message GetSingle {
    // Specifies the binary input channel (0 - (number of channels - 1))
    fixed32 channel = 1;
}

// Gets the values of all binary channels
message GetAll {
    // mask to define which channels are affected by the get all command. 0 means not set, 1 means set, LSB is Output0
    fixed32 mask = 1;
}

// FunctionControlGet to pass to Functionblock.FunctionControl.functionSpecificFunctionControlGet hook
message FunctionControlGet {
    oneof type {
        GetSingle single = 1;
        GetAll all = 2;
    }
}

// Sets the value of a single binary channel
message SetSingle {
    // Number of the binary output channel (0 - (number of channels - 1))
    fixed32 channel = 1;
    // State of the binary output channel. false means inactive, true means active.
    bool state = 2;
}

// Sets all binary channels
message SetAll {
    // binary coded map of input values. 0 means inactive, 1 means active, LSB is Output0
    fixed32 values = 1;
    // mask to define which channels are affected by the set all command. 0 means not set, 1 means set, LSB is Output0
    fixed32 mask = 2;
}

// FunctionControlSet to pass to Functionblock.FunctionControl.functionSpecificFunctionControlSet hook
message FunctionControlSet {
    oneof type {
        SetSingle single = 1;
        SetAll all = 2;
    }
}

message GetSingleResponse {
    // Number of the binary input channel
    fixed32 channel = 1;
    // State for the bianry input channel
    bool state = 2;
}

message GetAllResponse {
    // binary coded map of input values. 0 means inactive, 1 means active, LSB is Input0
    fixed32 inputs = 1;
}

// FunctionControlGetResponse to pass to Functionblock.FunctionControlResponse.functionSpecificControlGet hook
message FunctionControlGetResponse {
    oneof type {
        GetSingleResponse single = 1;
        GetAllResponse all = 2;
    }
}

message SetSingleResponse {
    // no parameters
}

message SetAllResponse {
    // no parameters
}

// FunctionControlSetResponse to pass to Functionblock.FunctionControlResponse.functionSpecificControlSet hook
message FunctionControlSetResponse {
    oneof type {
        SetSingleResponse single = 1;
        SetAllResponse all = 2;
    }
}

// ============= StreamControl ==================
// StreamControlStart to pass to Functionblock.StreamControlStart.functionSpecificStreamControlStart hook
message StreamControlStart {
    // no parameters
}

message Sample {
    fixed64 timestamp = 1;
    fixed32 inputs = 2;
}

// StreamData to pass to Functionblock.StreamData.functionSpecificStreamData hook
message StreamData {
    repeated Sample samples = 1;
}
