/*
Copyright Â© 2022 Ci4Rail GmbH <engineering@ci4rail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
syntax = "proto3";

package binaryIoTypeB;
option go_package = "binaryIoTypeB/v1alpha1";

// ============= Configuration =================

// ConfigurationSet to pass to Functionblock.Configuration.functionSpecificConfigurationSet hook
message ConfigurationSet {
    // not implemented
}

// ConfigurationSetResponse to pass to Functionblock.Configuration.functionSpecificConfigurationSetResponse hook
message ConfigurationSetResponse {
    // not implemented
}

// ConfigurationGet to pass to Functionblock.Configuration.functionSpecificConfigurationGet hook
message ConfigurationGet {
    // not implemented
}

// ConfigurationGetResponse to pass to Functionblock.ConfigurationGetResponse.functionSpecificConfigurationGetResponse hook
// Returns the current hardware configuration
message ConfigurationGetResponse {
    // not implemented
}

// ConfigurationDescribe to pass to Functionblock.Configuration.functionSpecificConfigurationDescribe hook
message ConfigurationDescribe {
    // no parameters
}

message ConfigurationDescribeResponse {
    fixed32 numberOfChannels = 1;
}

// ConfigurationResponse to pass to Functionblock.ConfigurationResponse.functionSpecificConfigurationResponse hook
message ConfigurationResponse {
    oneof type {
        ConfigurationGetResponse get = 1;
        ConfigurationSetResponse set = 2;
        ConfigurationDescribeResponse describe = 3;
    }
}


// ============= FunctionControl =================
// Gets the current value of a single binary channel
message GetSingle {
    // Specifies the binary input channel (0 - (number of channels - 1))
    fixed32 channel = 1;
}

// Gets the values of all binary channels
message GetAll {
    // mask to define which channels are affected by the get all command. 0 means not set, 1 means set, LSB is Output0
    fixed32 mask = 1;
}

// FunctionControlGet to pass to Functionblock.FunctionControl.functionSpecificFunctionControlGet hook
message FunctionControlGet {
    oneof type {
        GetSingle single = 1;
        GetAll all = 2;
    }
}

// Sets the value of a single binary channel
message SetSingle {
    // Number of the binary output channel (0 - (number of channels - 1))
    fixed32 channel = 1;
    // State of the binary output channel. false means low, true means high.
    bool state = 2;
}

// Sets all binary channels
message SetAll {
    // binary coded map of input values. 0 means low, 1 means high, LSB is Output0
    fixed32 values = 1;
    // mask to define which channels are affected by the set all command. 0 means not set, 1 means set, LSB is Output0
    fixed32 mask = 2;
}

// FunctionControlSet to pass to Functionblock.FunctionControl.functionSpecificFunctionControlSet hook
message FunctionControlSet {
    oneof type {
        SetSingle single = 1;
        SetAll all = 2;
    }
}

enum Error {
    // At least one channel to process is configured for the wrong direction and no input was read resp. no output was written
    BINARYIOTYPEB_WRONG_DIRECTION = 0;
    // Channel to read/write does not exist
    BINARYIOTYPEB_INVALID_CHANNEL = 1;
}

message GetSingleResponse {
    // Number of the binary input channel
    fixed32 channel = 1;
    // State for the bianry input channel
    bool state = 2;
}

message GetAllResponse {
    // binary coded map of input values. 0 means low, 1 means high, LSB is Input0
    fixed32 inputs = 1;
}

message GetError {
    Error error = 1;
}

// FunctionControlGetResponse to pass to Functionblock.FunctionControlResponse.functionSpecificControlGet hook
message FunctionControlGetResponse {
    oneof type {
        GetSingleResponse single = 1;
        GetAllResponse all = 2;
        GetError error = 3;
    }
}

message SetSingleResponse {
    // no parameters
}

message SetAllResponse {
    // no parameters
}

message SetError {
    Error error = 1;
}

// FunctionControlSetResponse to pass to Functionblock.FunctionControlResponse.functionSpecificControlSet hook
message FunctionControlSetResponse {
    oneof type {
        SetSingleResponse single = 1;
        SetAllResponse all = 2;
        SetError error = 3;
    }
}

// ============= StreamControl ==================
// StreamControlStart to pass to Functionblock.StreamControlStart.functionSpecificStreamControlStart hook
message StreamControlStart {
    // not implemented
}

message Sample {
    // not implemented
}

// StreamData to pass to Functionblock.StreamData.functionSpecificStreamData hook
message StreamData {
    // not implemented
}
