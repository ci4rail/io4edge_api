/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: templateModule.proto */

#ifndef PROTOBUF_C_templateModule_2eproto__INCLUDED
#define PROTOBUF_C_templateModule_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _TemplateModule__ConfigurationControlSet TemplateModule__ConfigurationControlSet;
typedef struct _TemplateModule__ConfigurationControlSetResponse TemplateModule__ConfigurationControlSetResponse;
typedef struct _TemplateModule__ConfigurationControlGet TemplateModule__ConfigurationControlGet;
typedef struct _TemplateModule__ConfigurationControlGetResponse TemplateModule__ConfigurationControlGetResponse;
typedef struct _TemplateModule__ConfigurationControlDescribe TemplateModule__ConfigurationControlDescribe;
typedef struct _TemplateModule__ConfigurationControlDescribeResponse TemplateModule__ConfigurationControlDescribeResponse;
typedef struct _TemplateModule__ConfigurationControlResponse TemplateModule__ConfigurationControlResponse;
typedef struct _TemplateModule__FunctionControlGet TemplateModule__FunctionControlGet;
typedef struct _TemplateModule__FunctionControlSet TemplateModule__FunctionControlSet;
typedef struct _TemplateModule__SetResponse TemplateModule__SetResponse;
typedef struct _TemplateModule__GetResponse TemplateModule__GetResponse;
typedef struct _TemplateModule__FunctionControlResponse TemplateModule__FunctionControlResponse;
typedef struct _TemplateModule__StreamControlStart TemplateModule__StreamControlStart;
typedef struct _TemplateModule__Sample TemplateModule__Sample;
typedef struct _TemplateModule__StreamData TemplateModule__StreamData;


/* --- enums --- */


/* --- messages --- */

/*
 * ConfigurationControlSet to pass to Functionblock.ConfigurationControl.functionSpecificConfigurationControlSet hook
 */
struct  _TemplateModule__ConfigurationControlSet
{
  ProtobufCMessage base;
};
#define TEMPLATE_MODULE__CONFIGURATION_CONTROL_SET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&template_module__configuration_control_set__descriptor) \
     }


/*
 * ConfigurationControlSetResponse to pass to Functionblock.ConfigurationControl.functionSpecificConfigurationControlSetResponse hook
 */
struct  _TemplateModule__ConfigurationControlSetResponse
{
  ProtobufCMessage base;
};
#define TEMPLATE_MODULE__CONFIGURATION_CONTROL_SET_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&template_module__configuration_control_set_response__descriptor) \
     }


/*
 * ConfigurationControlGet to pass to Functionblock.ConfigurationControl.functionSpecificConfigurationControlGet hook
 */
struct  _TemplateModule__ConfigurationControlGet
{
  ProtobufCMessage base;
};
#define TEMPLATE_MODULE__CONFIGURATION_CONTROL_GET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&template_module__configuration_control_get__descriptor) \
     }


/*
 * ConfigurationControlGetResponse to pass to Functionblock.ConfigurationGetResponse.functionSpecificConfigurationControlGetResponse hook
 * Returns the current hardware configuration
 */
struct  _TemplateModule__ConfigurationControlGetResponse
{
  ProtobufCMessage base;
};
#define TEMPLATE_MODULE__CONFIGURATION_CONTROL_GET_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&template_module__configuration_control_get_response__descriptor) \
     }


/*
 * ConfigurationControlDescribe to pass to Functionblock.ConfigurationControl.functionSpecificConfigurationControlDescribe hook 
 */
struct  _TemplateModule__ConfigurationControlDescribe
{
  ProtobufCMessage base;
};
#define TEMPLATE_MODULE__CONFIGURATION_CONTROL_DESCRIBE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&template_module__configuration_control_describe__descriptor) \
     }


struct  _TemplateModule__ConfigurationControlDescribeResponse
{
  ProtobufCMessage base;
};
#define TEMPLATE_MODULE__CONFIGURATION_CONTROL_DESCRIBE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&template_module__configuration_control_describe_response__descriptor) \
     }


typedef enum {
  TEMPLATE_MODULE__CONFIGURATION_CONTROL_RESPONSE__TYPE__NOT_SET = 0,
  TEMPLATE_MODULE__CONFIGURATION_CONTROL_RESPONSE__TYPE_GET = 1,
  TEMPLATE_MODULE__CONFIGURATION_CONTROL_RESPONSE__TYPE_SET = 2,
  TEMPLATE_MODULE__CONFIGURATION_CONTROL_RESPONSE__TYPE_DESCRIBE = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TEMPLATE_MODULE__CONFIGURATION_CONTROL_RESPONSE__TYPE)
} TemplateModule__ConfigurationControlResponse__TypeCase;

/*
 * ConfigurationControlResponse to pass to Functionblock.ConfigurationControlResponse.functionSpecificConfigurationControlResponse hook
 */
struct  _TemplateModule__ConfigurationControlResponse
{
  ProtobufCMessage base;
  TemplateModule__ConfigurationControlResponse__TypeCase type_case;
  union {
    TemplateModule__ConfigurationControlGetResponse *get;
    TemplateModule__ConfigurationControlSetResponse *set;
    TemplateModule__ConfigurationControlDescribeResponse *describe;
  };
};
#define TEMPLATE_MODULE__CONFIGURATION_CONTROL_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&template_module__configuration_control_response__descriptor) \
    , TEMPLATE_MODULE__CONFIGURATION_CONTROL_RESPONSE__TYPE__NOT_SET, {0} }


/*
 * FunctionControlGet to pass to Functionblock.FunctionControl.functionSpecificFunctionControlGet hook
 */
struct  _TemplateModule__FunctionControlGet
{
  ProtobufCMessage base;
};
#define TEMPLATE_MODULE__FUNCTION_CONTROL_GET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&template_module__function_control_get__descriptor) \
     }


/*
 * FunctionControlSet to pass to Functionblock.FunctionControl.functionSpecificFunctionControlSet hook
 */
struct  _TemplateModule__FunctionControlSet
{
  ProtobufCMessage base;
  /*
   * Put here your function specific values
   * Example: 
   */
  uint32_t value;
};
#define TEMPLATE_MODULE__FUNCTION_CONTROL_SET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&template_module__function_control_set__descriptor) \
    , 0 }


struct  _TemplateModule__SetResponse
{
  ProtobufCMessage base;
};
#define TEMPLATE_MODULE__SET_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&template_module__set_response__descriptor) \
     }


struct  _TemplateModule__GetResponse
{
  ProtobufCMessage base;
  /*
   * Put here your function specific values
   * Example: 
   */
  uint32_t value;
};
#define TEMPLATE_MODULE__GET_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&template_module__get_response__descriptor) \
    , 0 }


typedef enum {
  TEMPLATE_MODULE__FUNCTION_CONTROL_RESPONSE__TYPE__NOT_SET = 0,
  TEMPLATE_MODULE__FUNCTION_CONTROL_RESPONSE__TYPE_GET = 1,
  TEMPLATE_MODULE__FUNCTION_CONTROL_RESPONSE__TYPE_SET = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TEMPLATE_MODULE__FUNCTION_CONTROL_RESPONSE__TYPE)
} TemplateModule__FunctionControlResponse__TypeCase;

/*
 * FunctionControlResponse to pass to Functionblock.FunctionControlResponse.functionSpecificFunctionControlResponse hook
 */
struct  _TemplateModule__FunctionControlResponse
{
  ProtobufCMessage base;
  TemplateModule__FunctionControlResponse__TypeCase type_case;
  union {
    TemplateModule__GetResponse *get;
    TemplateModule__SetResponse *set;
  };
};
#define TEMPLATE_MODULE__FUNCTION_CONTROL_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&template_module__function_control_response__descriptor) \
    , TEMPLATE_MODULE__FUNCTION_CONTROL_RESPONSE__TYPE__NOT_SET, {0} }


/*
 * ============= StreamControl ==================
 * StreamControlStart to pass to Functionblock.StreamControlStart.functionSpecificStreamControlStart hook
 */
struct  _TemplateModule__StreamControlStart
{
  ProtobufCMessage base;
  /*
   * maximum interval in seconds between two stream messages. If there are no or very few stream messages for a 
   * certain time, the client is informed that the stream is still active and the existing data is transmitted.
   * Defaults to 10 seconds
   */
  uint32_t keepaliveinterval;
  /*
   * internal ring buffer size. 
   * Defaults to 50
   * Maximum is 1000
   */
  uint32_t buffersize;
};
#define TEMPLATE_MODULE__STREAM_CONTROL_START__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&template_module__stream_control_start__descriptor) \
    , 0, 0 }


struct  _TemplateModule__Sample
{
  ProtobufCMessage base;
  /*
   * Timestamp for that specific channels sample. This is the time the sample was taken.
   * This timestamp is in microseconds since the start of the device and does not get synchronized with the clients time.
   */
  uint64_t timestamp;
  /*
   * Specifies the binary channel value when the input value has changed.
   */
  uint32_t value;
};
#define TEMPLATE_MODULE__SAMPLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&template_module__sample__descriptor) \
    , 0, 0 }


/*
 * StreamData to pass to Functionblock.StreamData.functionSpecificStreamData hook
 */
struct  _TemplateModule__StreamData
{
  ProtobufCMessage base;
  size_t n_samples;
  TemplateModule__Sample **samples;
};
#define TEMPLATE_MODULE__STREAM_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&template_module__stream_data__descriptor) \
    , 0,NULL }


/* TemplateModule__ConfigurationControlSet methods */
void   template_module__configuration_control_set__init
                     (TemplateModule__ConfigurationControlSet         *message);
size_t template_module__configuration_control_set__get_packed_size
                     (const TemplateModule__ConfigurationControlSet   *message);
size_t template_module__configuration_control_set__pack
                     (const TemplateModule__ConfigurationControlSet   *message,
                      uint8_t             *out);
size_t template_module__configuration_control_set__pack_to_buffer
                     (const TemplateModule__ConfigurationControlSet   *message,
                      ProtobufCBuffer     *buffer);
TemplateModule__ConfigurationControlSet *
       template_module__configuration_control_set__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   template_module__configuration_control_set__free_unpacked
                     (TemplateModule__ConfigurationControlSet *message,
                      ProtobufCAllocator *allocator);
/* TemplateModule__ConfigurationControlSetResponse methods */
void   template_module__configuration_control_set_response__init
                     (TemplateModule__ConfigurationControlSetResponse         *message);
size_t template_module__configuration_control_set_response__get_packed_size
                     (const TemplateModule__ConfigurationControlSetResponse   *message);
size_t template_module__configuration_control_set_response__pack
                     (const TemplateModule__ConfigurationControlSetResponse   *message,
                      uint8_t             *out);
size_t template_module__configuration_control_set_response__pack_to_buffer
                     (const TemplateModule__ConfigurationControlSetResponse   *message,
                      ProtobufCBuffer     *buffer);
TemplateModule__ConfigurationControlSetResponse *
       template_module__configuration_control_set_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   template_module__configuration_control_set_response__free_unpacked
                     (TemplateModule__ConfigurationControlSetResponse *message,
                      ProtobufCAllocator *allocator);
/* TemplateModule__ConfigurationControlGet methods */
void   template_module__configuration_control_get__init
                     (TemplateModule__ConfigurationControlGet         *message);
size_t template_module__configuration_control_get__get_packed_size
                     (const TemplateModule__ConfigurationControlGet   *message);
size_t template_module__configuration_control_get__pack
                     (const TemplateModule__ConfigurationControlGet   *message,
                      uint8_t             *out);
size_t template_module__configuration_control_get__pack_to_buffer
                     (const TemplateModule__ConfigurationControlGet   *message,
                      ProtobufCBuffer     *buffer);
TemplateModule__ConfigurationControlGet *
       template_module__configuration_control_get__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   template_module__configuration_control_get__free_unpacked
                     (TemplateModule__ConfigurationControlGet *message,
                      ProtobufCAllocator *allocator);
/* TemplateModule__ConfigurationControlGetResponse methods */
void   template_module__configuration_control_get_response__init
                     (TemplateModule__ConfigurationControlGetResponse         *message);
size_t template_module__configuration_control_get_response__get_packed_size
                     (const TemplateModule__ConfigurationControlGetResponse   *message);
size_t template_module__configuration_control_get_response__pack
                     (const TemplateModule__ConfigurationControlGetResponse   *message,
                      uint8_t             *out);
size_t template_module__configuration_control_get_response__pack_to_buffer
                     (const TemplateModule__ConfigurationControlGetResponse   *message,
                      ProtobufCBuffer     *buffer);
TemplateModule__ConfigurationControlGetResponse *
       template_module__configuration_control_get_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   template_module__configuration_control_get_response__free_unpacked
                     (TemplateModule__ConfigurationControlGetResponse *message,
                      ProtobufCAllocator *allocator);
/* TemplateModule__ConfigurationControlDescribe methods */
void   template_module__configuration_control_describe__init
                     (TemplateModule__ConfigurationControlDescribe         *message);
size_t template_module__configuration_control_describe__get_packed_size
                     (const TemplateModule__ConfigurationControlDescribe   *message);
size_t template_module__configuration_control_describe__pack
                     (const TemplateModule__ConfigurationControlDescribe   *message,
                      uint8_t             *out);
size_t template_module__configuration_control_describe__pack_to_buffer
                     (const TemplateModule__ConfigurationControlDescribe   *message,
                      ProtobufCBuffer     *buffer);
TemplateModule__ConfigurationControlDescribe *
       template_module__configuration_control_describe__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   template_module__configuration_control_describe__free_unpacked
                     (TemplateModule__ConfigurationControlDescribe *message,
                      ProtobufCAllocator *allocator);
/* TemplateModule__ConfigurationControlDescribeResponse methods */
void   template_module__configuration_control_describe_response__init
                     (TemplateModule__ConfigurationControlDescribeResponse         *message);
size_t template_module__configuration_control_describe_response__get_packed_size
                     (const TemplateModule__ConfigurationControlDescribeResponse   *message);
size_t template_module__configuration_control_describe_response__pack
                     (const TemplateModule__ConfigurationControlDescribeResponse   *message,
                      uint8_t             *out);
size_t template_module__configuration_control_describe_response__pack_to_buffer
                     (const TemplateModule__ConfigurationControlDescribeResponse   *message,
                      ProtobufCBuffer     *buffer);
TemplateModule__ConfigurationControlDescribeResponse *
       template_module__configuration_control_describe_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   template_module__configuration_control_describe_response__free_unpacked
                     (TemplateModule__ConfigurationControlDescribeResponse *message,
                      ProtobufCAllocator *allocator);
/* TemplateModule__ConfigurationControlResponse methods */
void   template_module__configuration_control_response__init
                     (TemplateModule__ConfigurationControlResponse         *message);
size_t template_module__configuration_control_response__get_packed_size
                     (const TemplateModule__ConfigurationControlResponse   *message);
size_t template_module__configuration_control_response__pack
                     (const TemplateModule__ConfigurationControlResponse   *message,
                      uint8_t             *out);
size_t template_module__configuration_control_response__pack_to_buffer
                     (const TemplateModule__ConfigurationControlResponse   *message,
                      ProtobufCBuffer     *buffer);
TemplateModule__ConfigurationControlResponse *
       template_module__configuration_control_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   template_module__configuration_control_response__free_unpacked
                     (TemplateModule__ConfigurationControlResponse *message,
                      ProtobufCAllocator *allocator);
/* TemplateModule__FunctionControlGet methods */
void   template_module__function_control_get__init
                     (TemplateModule__FunctionControlGet         *message);
size_t template_module__function_control_get__get_packed_size
                     (const TemplateModule__FunctionControlGet   *message);
size_t template_module__function_control_get__pack
                     (const TemplateModule__FunctionControlGet   *message,
                      uint8_t             *out);
size_t template_module__function_control_get__pack_to_buffer
                     (const TemplateModule__FunctionControlGet   *message,
                      ProtobufCBuffer     *buffer);
TemplateModule__FunctionControlGet *
       template_module__function_control_get__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   template_module__function_control_get__free_unpacked
                     (TemplateModule__FunctionControlGet *message,
                      ProtobufCAllocator *allocator);
/* TemplateModule__FunctionControlSet methods */
void   template_module__function_control_set__init
                     (TemplateModule__FunctionControlSet         *message);
size_t template_module__function_control_set__get_packed_size
                     (const TemplateModule__FunctionControlSet   *message);
size_t template_module__function_control_set__pack
                     (const TemplateModule__FunctionControlSet   *message,
                      uint8_t             *out);
size_t template_module__function_control_set__pack_to_buffer
                     (const TemplateModule__FunctionControlSet   *message,
                      ProtobufCBuffer     *buffer);
TemplateModule__FunctionControlSet *
       template_module__function_control_set__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   template_module__function_control_set__free_unpacked
                     (TemplateModule__FunctionControlSet *message,
                      ProtobufCAllocator *allocator);
/* TemplateModule__SetResponse methods */
void   template_module__set_response__init
                     (TemplateModule__SetResponse         *message);
size_t template_module__set_response__get_packed_size
                     (const TemplateModule__SetResponse   *message);
size_t template_module__set_response__pack
                     (const TemplateModule__SetResponse   *message,
                      uint8_t             *out);
size_t template_module__set_response__pack_to_buffer
                     (const TemplateModule__SetResponse   *message,
                      ProtobufCBuffer     *buffer);
TemplateModule__SetResponse *
       template_module__set_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   template_module__set_response__free_unpacked
                     (TemplateModule__SetResponse *message,
                      ProtobufCAllocator *allocator);
/* TemplateModule__GetResponse methods */
void   template_module__get_response__init
                     (TemplateModule__GetResponse         *message);
size_t template_module__get_response__get_packed_size
                     (const TemplateModule__GetResponse   *message);
size_t template_module__get_response__pack
                     (const TemplateModule__GetResponse   *message,
                      uint8_t             *out);
size_t template_module__get_response__pack_to_buffer
                     (const TemplateModule__GetResponse   *message,
                      ProtobufCBuffer     *buffer);
TemplateModule__GetResponse *
       template_module__get_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   template_module__get_response__free_unpacked
                     (TemplateModule__GetResponse *message,
                      ProtobufCAllocator *allocator);
/* TemplateModule__FunctionControlResponse methods */
void   template_module__function_control_response__init
                     (TemplateModule__FunctionControlResponse         *message);
size_t template_module__function_control_response__get_packed_size
                     (const TemplateModule__FunctionControlResponse   *message);
size_t template_module__function_control_response__pack
                     (const TemplateModule__FunctionControlResponse   *message,
                      uint8_t             *out);
size_t template_module__function_control_response__pack_to_buffer
                     (const TemplateModule__FunctionControlResponse   *message,
                      ProtobufCBuffer     *buffer);
TemplateModule__FunctionControlResponse *
       template_module__function_control_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   template_module__function_control_response__free_unpacked
                     (TemplateModule__FunctionControlResponse *message,
                      ProtobufCAllocator *allocator);
/* TemplateModule__StreamControlStart methods */
void   template_module__stream_control_start__init
                     (TemplateModule__StreamControlStart         *message);
size_t template_module__stream_control_start__get_packed_size
                     (const TemplateModule__StreamControlStart   *message);
size_t template_module__stream_control_start__pack
                     (const TemplateModule__StreamControlStart   *message,
                      uint8_t             *out);
size_t template_module__stream_control_start__pack_to_buffer
                     (const TemplateModule__StreamControlStart   *message,
                      ProtobufCBuffer     *buffer);
TemplateModule__StreamControlStart *
       template_module__stream_control_start__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   template_module__stream_control_start__free_unpacked
                     (TemplateModule__StreamControlStart *message,
                      ProtobufCAllocator *allocator);
/* TemplateModule__Sample methods */
void   template_module__sample__init
                     (TemplateModule__Sample         *message);
size_t template_module__sample__get_packed_size
                     (const TemplateModule__Sample   *message);
size_t template_module__sample__pack
                     (const TemplateModule__Sample   *message,
                      uint8_t             *out);
size_t template_module__sample__pack_to_buffer
                     (const TemplateModule__Sample   *message,
                      ProtobufCBuffer     *buffer);
TemplateModule__Sample *
       template_module__sample__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   template_module__sample__free_unpacked
                     (TemplateModule__Sample *message,
                      ProtobufCAllocator *allocator);
/* TemplateModule__StreamData methods */
void   template_module__stream_data__init
                     (TemplateModule__StreamData         *message);
size_t template_module__stream_data__get_packed_size
                     (const TemplateModule__StreamData   *message);
size_t template_module__stream_data__pack
                     (const TemplateModule__StreamData   *message,
                      uint8_t             *out);
size_t template_module__stream_data__pack_to_buffer
                     (const TemplateModule__StreamData   *message,
                      ProtobufCBuffer     *buffer);
TemplateModule__StreamData *
       template_module__stream_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   template_module__stream_data__free_unpacked
                     (TemplateModule__StreamData *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*TemplateModule__ConfigurationControlSet_Closure)
                 (const TemplateModule__ConfigurationControlSet *message,
                  void *closure_data);
typedef void (*TemplateModule__ConfigurationControlSetResponse_Closure)
                 (const TemplateModule__ConfigurationControlSetResponse *message,
                  void *closure_data);
typedef void (*TemplateModule__ConfigurationControlGet_Closure)
                 (const TemplateModule__ConfigurationControlGet *message,
                  void *closure_data);
typedef void (*TemplateModule__ConfigurationControlGetResponse_Closure)
                 (const TemplateModule__ConfigurationControlGetResponse *message,
                  void *closure_data);
typedef void (*TemplateModule__ConfigurationControlDescribe_Closure)
                 (const TemplateModule__ConfigurationControlDescribe *message,
                  void *closure_data);
typedef void (*TemplateModule__ConfigurationControlDescribeResponse_Closure)
                 (const TemplateModule__ConfigurationControlDescribeResponse *message,
                  void *closure_data);
typedef void (*TemplateModule__ConfigurationControlResponse_Closure)
                 (const TemplateModule__ConfigurationControlResponse *message,
                  void *closure_data);
typedef void (*TemplateModule__FunctionControlGet_Closure)
                 (const TemplateModule__FunctionControlGet *message,
                  void *closure_data);
typedef void (*TemplateModule__FunctionControlSet_Closure)
                 (const TemplateModule__FunctionControlSet *message,
                  void *closure_data);
typedef void (*TemplateModule__SetResponse_Closure)
                 (const TemplateModule__SetResponse *message,
                  void *closure_data);
typedef void (*TemplateModule__GetResponse_Closure)
                 (const TemplateModule__GetResponse *message,
                  void *closure_data);
typedef void (*TemplateModule__FunctionControlResponse_Closure)
                 (const TemplateModule__FunctionControlResponse *message,
                  void *closure_data);
typedef void (*TemplateModule__StreamControlStart_Closure)
                 (const TemplateModule__StreamControlStart *message,
                  void *closure_data);
typedef void (*TemplateModule__Sample_Closure)
                 (const TemplateModule__Sample *message,
                  void *closure_data);
typedef void (*TemplateModule__StreamData_Closure)
                 (const TemplateModule__StreamData *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor template_module__configuration_control_set__descriptor;
extern const ProtobufCMessageDescriptor template_module__configuration_control_set_response__descriptor;
extern const ProtobufCMessageDescriptor template_module__configuration_control_get__descriptor;
extern const ProtobufCMessageDescriptor template_module__configuration_control_get_response__descriptor;
extern const ProtobufCMessageDescriptor template_module__configuration_control_describe__descriptor;
extern const ProtobufCMessageDescriptor template_module__configuration_control_describe_response__descriptor;
extern const ProtobufCMessageDescriptor template_module__configuration_control_response__descriptor;
extern const ProtobufCMessageDescriptor template_module__function_control_get__descriptor;
extern const ProtobufCMessageDescriptor template_module__function_control_set__descriptor;
extern const ProtobufCMessageDescriptor template_module__set_response__descriptor;
extern const ProtobufCMessageDescriptor template_module__get_response__descriptor;
extern const ProtobufCMessageDescriptor template_module__function_control_response__descriptor;
extern const ProtobufCMessageDescriptor template_module__stream_control_start__descriptor;
extern const ProtobufCMessageDescriptor template_module__sample__descriptor;
extern const ProtobufCMessageDescriptor template_module__stream_data__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_templateModule_2eproto__INCLUDED */
