/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: bitbusSniffer.proto */

#ifndef PROTOBUF_C_bitbusSniffer_2eproto__INCLUDED
#define PROTOBUF_C_bitbusSniffer_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _BitbusSniffer__ConfigurationSet BitbusSniffer__ConfigurationSet;
typedef struct _BitbusSniffer__ConfigurationSetResponse BitbusSniffer__ConfigurationSetResponse;
typedef struct _BitbusSniffer__ConfigurationGet BitbusSniffer__ConfigurationGet;
typedef struct _BitbusSniffer__ConfigurationGetResponse BitbusSniffer__ConfigurationGetResponse;
typedef struct _BitbusSniffer__ConfigurationDescribe BitbusSniffer__ConfigurationDescribe;
typedef struct _BitbusSniffer__ConfigurationDescribeResponse BitbusSniffer__ConfigurationDescribeResponse;
typedef struct _BitbusSniffer__FunctionControlGet BitbusSniffer__FunctionControlGet;
typedef struct _BitbusSniffer__Frame BitbusSniffer__Frame;
typedef struct _BitbusSniffer__FunctionControlSet BitbusSniffer__FunctionControlSet;
typedef struct _BitbusSniffer__FunctionControlGetResponse BitbusSniffer__FunctionControlGetResponse;
typedef struct _BitbusSniffer__FunctionControlSetResponse BitbusSniffer__FunctionControlSetResponse;
typedef struct _BitbusSniffer__StreamControlStart BitbusSniffer__StreamControlStart;
typedef struct _BitbusSniffer__Sample BitbusSniffer__Sample;
typedef struct _BitbusSniffer__StreamData BitbusSniffer__StreamData;


/* --- enums --- */

typedef enum _BitbusSniffer__Sample__Flags {
  /*
   * no flags set
   */
  BITBUS_SNIFFER__SAMPLE__FLAGS__none = 0,
  /*
   * frame has a bad CRC
   */
  BITBUS_SNIFFER__SAMPLE__FLAGS__bad_crc = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(BITBUS_SNIFFER__SAMPLE__FLAGS)
} BitbusSniffer__Sample__Flags;

/* --- messages --- */

/*
 * ConfigurationSet to pass to
 * Functionblock.Configuration.functionSpecificConfigurationSet hook
 */
struct  _BitbusSniffer__ConfigurationSet
{
  ProtobufCMessage base;
  /*
   * if true, frames with wrong CRC are not discarded
   */
  protobuf_c_boolean ignore_crc;
  /*
   * if true, the baudrate shall be set to 62500 (otherwise 375000)
   */
  protobuf_c_boolean baud_62500;
  /*
   * bit field mask for address filter (32 bytes with 8 bits each. TODO: Bit order?. 
   */
  ProtobufCBinaryData address_filter;
};
#define BITBUS_SNIFFER__CONFIGURATION_SET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bitbus_sniffer__configuration_set__descriptor) \
    , 0, 0, {0,NULL} }


/*
 * ConfigurationSetResponse to pass to
 * Functionblock.Configuration.functionSpecificConfigurationSetResponse hook
 */
struct  _BitbusSniffer__ConfigurationSetResponse
{
  ProtobufCMessage base;
};
#define BITBUS_SNIFFER__CONFIGURATION_SET_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bitbus_sniffer__configuration_set_response__descriptor) \
     }


/*
 * ConfigurationGet to pass to
 * Functionblock.Configuration.functionSpecificConfigurationGet hook
 */
struct  _BitbusSniffer__ConfigurationGet
{
  ProtobufCMessage base;
};
#define BITBUS_SNIFFER__CONFIGURATION_GET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bitbus_sniffer__configuration_get__descriptor) \
     }


/*
 * ConfigurationGetResponse to pass to
 * Functionblock.ConfigurationGetResponse.functionSpecificConfigurationGetResponse
 * hook Returns the current hardware configuration
 */
struct  _BitbusSniffer__ConfigurationGetResponse
{
  ProtobufCMessage base;
};
#define BITBUS_SNIFFER__CONFIGURATION_GET_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bitbus_sniffer__configuration_get_response__descriptor) \
     }


/*
 * ConfigurationDescribe to pass to
 * Functionblock.Configuration.functionSpecificConfigurationDescribe hook
 */
struct  _BitbusSniffer__ConfigurationDescribe
{
  ProtobufCMessage base;
};
#define BITBUS_SNIFFER__CONFIGURATION_DESCRIBE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bitbus_sniffer__configuration_describe__descriptor) \
     }


struct  _BitbusSniffer__ConfigurationDescribeResponse
{
  ProtobufCMessage base;
};
#define BITBUS_SNIFFER__CONFIGURATION_DESCRIBE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bitbus_sniffer__configuration_describe_response__descriptor) \
     }


/*
 * FunctionControlGet to pass to
 * Functionblock.FunctionControl.functionSpecificFunctionControlGet hook
 */
struct  _BitbusSniffer__FunctionControlGet
{
  ProtobufCMessage base;
};
#define BITBUS_SNIFFER__FUNCTION_CONTROL_GET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bitbus_sniffer__function_control_get__descriptor) \
     }


struct  _BitbusSniffer__Frame
{
  ProtobufCMessage base;
  /*
   * byte 0: address
   * byte 1: control
   * byte 2..n: information
   */
  ProtobufCBinaryData bitbus_frame;
};
#define BITBUS_SNIFFER__FRAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bitbus_sniffer__frame__descriptor) \
    , {0,NULL} }


/*
 * FunctionControlSet to pass to
 * Functionblock.FunctionControl.functionSpecificFunctionControlSet hook
 */
struct  _BitbusSniffer__FunctionControlSet
{
  ProtobufCMessage base;
  /*
   * frames to send to the bus
   */
  size_t n_frames;
  BitbusSniffer__Frame **frames;
};
#define BITBUS_SNIFFER__FUNCTION_CONTROL_SET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bitbus_sniffer__function_control_set__descriptor) \
    , 0,NULL }


/*
 * FunctionControlGetResponse to pass to
 * Functionblock.FunctionControlResponse.functionSpecificControlGet hook
 */
struct  _BitbusSniffer__FunctionControlGetResponse
{
  ProtobufCMessage base;
};
#define BITBUS_SNIFFER__FUNCTION_CONTROL_GET_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bitbus_sniffer__function_control_get_response__descriptor) \
     }


/*
 * FunctionControlSetResponse to pass to
 * Functionblock.FunctionControlResponse.functionSpecificControlSet hook
 */
struct  _BitbusSniffer__FunctionControlSetResponse
{
  ProtobufCMessage base;
};
#define BITBUS_SNIFFER__FUNCTION_CONTROL_SET_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bitbus_sniffer__function_control_set_response__descriptor) \
     }


/*
 * StreamControlStart to pass to
 * Functionblock.StreamControlStart.functionSpecificStreamControlStart hook
 */
struct  _BitbusSniffer__StreamControlStart
{
  ProtobufCMessage base;
};
#define BITBUS_SNIFFER__STREAM_CONTROL_START__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bitbus_sniffer__stream_control_start__descriptor) \
     }


struct  _BitbusSniffer__Sample
{
  ProtobufCMessage base;
  /*
   * This timestamp is in microseconds since the start of the device and does not get synchronized with the clients time.
   */
  uint64_t timestamp;
  /*
   * flags for the sample (bitmask with values from Flags enum)
   */
  uint32_t flags;
  /*
   * Frame received from the bus
   * byte 0: address
   * byte 1: control
   * byte 2..n: information
   */
  ProtobufCBinaryData bitbus_frame;
};
#define BITBUS_SNIFFER__SAMPLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bitbus_sniffer__sample__descriptor) \
    , 0, 0, {0,NULL} }


/*
 * StreamData to pass to Functionblock.StreamData.functionSpecificStreamData hook
 */
struct  _BitbusSniffer__StreamData
{
  ProtobufCMessage base;
  /*
   * frames received from the bus with timestamp
   */
  size_t n_samples;
  BitbusSniffer__Sample **samples;
};
#define BITBUS_SNIFFER__STREAM_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bitbus_sniffer__stream_data__descriptor) \
    , 0,NULL }


/* BitbusSniffer__ConfigurationSet methods */
void   bitbus_sniffer__configuration_set__init
                     (BitbusSniffer__ConfigurationSet         *message);
size_t bitbus_sniffer__configuration_set__get_packed_size
                     (const BitbusSniffer__ConfigurationSet   *message);
size_t bitbus_sniffer__configuration_set__pack
                     (const BitbusSniffer__ConfigurationSet   *message,
                      uint8_t             *out);
size_t bitbus_sniffer__configuration_set__pack_to_buffer
                     (const BitbusSniffer__ConfigurationSet   *message,
                      ProtobufCBuffer     *buffer);
BitbusSniffer__ConfigurationSet *
       bitbus_sniffer__configuration_set__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bitbus_sniffer__configuration_set__free_unpacked
                     (BitbusSniffer__ConfigurationSet *message,
                      ProtobufCAllocator *allocator);
/* BitbusSniffer__ConfigurationSetResponse methods */
void   bitbus_sniffer__configuration_set_response__init
                     (BitbusSniffer__ConfigurationSetResponse         *message);
size_t bitbus_sniffer__configuration_set_response__get_packed_size
                     (const BitbusSniffer__ConfigurationSetResponse   *message);
size_t bitbus_sniffer__configuration_set_response__pack
                     (const BitbusSniffer__ConfigurationSetResponse   *message,
                      uint8_t             *out);
size_t bitbus_sniffer__configuration_set_response__pack_to_buffer
                     (const BitbusSniffer__ConfigurationSetResponse   *message,
                      ProtobufCBuffer     *buffer);
BitbusSniffer__ConfigurationSetResponse *
       bitbus_sniffer__configuration_set_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bitbus_sniffer__configuration_set_response__free_unpacked
                     (BitbusSniffer__ConfigurationSetResponse *message,
                      ProtobufCAllocator *allocator);
/* BitbusSniffer__ConfigurationGet methods */
void   bitbus_sniffer__configuration_get__init
                     (BitbusSniffer__ConfigurationGet         *message);
size_t bitbus_sniffer__configuration_get__get_packed_size
                     (const BitbusSniffer__ConfigurationGet   *message);
size_t bitbus_sniffer__configuration_get__pack
                     (const BitbusSniffer__ConfigurationGet   *message,
                      uint8_t             *out);
size_t bitbus_sniffer__configuration_get__pack_to_buffer
                     (const BitbusSniffer__ConfigurationGet   *message,
                      ProtobufCBuffer     *buffer);
BitbusSniffer__ConfigurationGet *
       bitbus_sniffer__configuration_get__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bitbus_sniffer__configuration_get__free_unpacked
                     (BitbusSniffer__ConfigurationGet *message,
                      ProtobufCAllocator *allocator);
/* BitbusSniffer__ConfigurationGetResponse methods */
void   bitbus_sniffer__configuration_get_response__init
                     (BitbusSniffer__ConfigurationGetResponse         *message);
size_t bitbus_sniffer__configuration_get_response__get_packed_size
                     (const BitbusSniffer__ConfigurationGetResponse   *message);
size_t bitbus_sniffer__configuration_get_response__pack
                     (const BitbusSniffer__ConfigurationGetResponse   *message,
                      uint8_t             *out);
size_t bitbus_sniffer__configuration_get_response__pack_to_buffer
                     (const BitbusSniffer__ConfigurationGetResponse   *message,
                      ProtobufCBuffer     *buffer);
BitbusSniffer__ConfigurationGetResponse *
       bitbus_sniffer__configuration_get_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bitbus_sniffer__configuration_get_response__free_unpacked
                     (BitbusSniffer__ConfigurationGetResponse *message,
                      ProtobufCAllocator *allocator);
/* BitbusSniffer__ConfigurationDescribe methods */
void   bitbus_sniffer__configuration_describe__init
                     (BitbusSniffer__ConfigurationDescribe         *message);
size_t bitbus_sniffer__configuration_describe__get_packed_size
                     (const BitbusSniffer__ConfigurationDescribe   *message);
size_t bitbus_sniffer__configuration_describe__pack
                     (const BitbusSniffer__ConfigurationDescribe   *message,
                      uint8_t             *out);
size_t bitbus_sniffer__configuration_describe__pack_to_buffer
                     (const BitbusSniffer__ConfigurationDescribe   *message,
                      ProtobufCBuffer     *buffer);
BitbusSniffer__ConfigurationDescribe *
       bitbus_sniffer__configuration_describe__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bitbus_sniffer__configuration_describe__free_unpacked
                     (BitbusSniffer__ConfigurationDescribe *message,
                      ProtobufCAllocator *allocator);
/* BitbusSniffer__ConfigurationDescribeResponse methods */
void   bitbus_sniffer__configuration_describe_response__init
                     (BitbusSniffer__ConfigurationDescribeResponse         *message);
size_t bitbus_sniffer__configuration_describe_response__get_packed_size
                     (const BitbusSniffer__ConfigurationDescribeResponse   *message);
size_t bitbus_sniffer__configuration_describe_response__pack
                     (const BitbusSniffer__ConfigurationDescribeResponse   *message,
                      uint8_t             *out);
size_t bitbus_sniffer__configuration_describe_response__pack_to_buffer
                     (const BitbusSniffer__ConfigurationDescribeResponse   *message,
                      ProtobufCBuffer     *buffer);
BitbusSniffer__ConfigurationDescribeResponse *
       bitbus_sniffer__configuration_describe_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bitbus_sniffer__configuration_describe_response__free_unpacked
                     (BitbusSniffer__ConfigurationDescribeResponse *message,
                      ProtobufCAllocator *allocator);
/* BitbusSniffer__FunctionControlGet methods */
void   bitbus_sniffer__function_control_get__init
                     (BitbusSniffer__FunctionControlGet         *message);
size_t bitbus_sniffer__function_control_get__get_packed_size
                     (const BitbusSniffer__FunctionControlGet   *message);
size_t bitbus_sniffer__function_control_get__pack
                     (const BitbusSniffer__FunctionControlGet   *message,
                      uint8_t             *out);
size_t bitbus_sniffer__function_control_get__pack_to_buffer
                     (const BitbusSniffer__FunctionControlGet   *message,
                      ProtobufCBuffer     *buffer);
BitbusSniffer__FunctionControlGet *
       bitbus_sniffer__function_control_get__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bitbus_sniffer__function_control_get__free_unpacked
                     (BitbusSniffer__FunctionControlGet *message,
                      ProtobufCAllocator *allocator);
/* BitbusSniffer__Frame methods */
void   bitbus_sniffer__frame__init
                     (BitbusSniffer__Frame         *message);
size_t bitbus_sniffer__frame__get_packed_size
                     (const BitbusSniffer__Frame   *message);
size_t bitbus_sniffer__frame__pack
                     (const BitbusSniffer__Frame   *message,
                      uint8_t             *out);
size_t bitbus_sniffer__frame__pack_to_buffer
                     (const BitbusSniffer__Frame   *message,
                      ProtobufCBuffer     *buffer);
BitbusSniffer__Frame *
       bitbus_sniffer__frame__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bitbus_sniffer__frame__free_unpacked
                     (BitbusSniffer__Frame *message,
                      ProtobufCAllocator *allocator);
/* BitbusSniffer__FunctionControlSet methods */
void   bitbus_sniffer__function_control_set__init
                     (BitbusSniffer__FunctionControlSet         *message);
size_t bitbus_sniffer__function_control_set__get_packed_size
                     (const BitbusSniffer__FunctionControlSet   *message);
size_t bitbus_sniffer__function_control_set__pack
                     (const BitbusSniffer__FunctionControlSet   *message,
                      uint8_t             *out);
size_t bitbus_sniffer__function_control_set__pack_to_buffer
                     (const BitbusSniffer__FunctionControlSet   *message,
                      ProtobufCBuffer     *buffer);
BitbusSniffer__FunctionControlSet *
       bitbus_sniffer__function_control_set__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bitbus_sniffer__function_control_set__free_unpacked
                     (BitbusSniffer__FunctionControlSet *message,
                      ProtobufCAllocator *allocator);
/* BitbusSniffer__FunctionControlGetResponse methods */
void   bitbus_sniffer__function_control_get_response__init
                     (BitbusSniffer__FunctionControlGetResponse         *message);
size_t bitbus_sniffer__function_control_get_response__get_packed_size
                     (const BitbusSniffer__FunctionControlGetResponse   *message);
size_t bitbus_sniffer__function_control_get_response__pack
                     (const BitbusSniffer__FunctionControlGetResponse   *message,
                      uint8_t             *out);
size_t bitbus_sniffer__function_control_get_response__pack_to_buffer
                     (const BitbusSniffer__FunctionControlGetResponse   *message,
                      ProtobufCBuffer     *buffer);
BitbusSniffer__FunctionControlGetResponse *
       bitbus_sniffer__function_control_get_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bitbus_sniffer__function_control_get_response__free_unpacked
                     (BitbusSniffer__FunctionControlGetResponse *message,
                      ProtobufCAllocator *allocator);
/* BitbusSniffer__FunctionControlSetResponse methods */
void   bitbus_sniffer__function_control_set_response__init
                     (BitbusSniffer__FunctionControlSetResponse         *message);
size_t bitbus_sniffer__function_control_set_response__get_packed_size
                     (const BitbusSniffer__FunctionControlSetResponse   *message);
size_t bitbus_sniffer__function_control_set_response__pack
                     (const BitbusSniffer__FunctionControlSetResponse   *message,
                      uint8_t             *out);
size_t bitbus_sniffer__function_control_set_response__pack_to_buffer
                     (const BitbusSniffer__FunctionControlSetResponse   *message,
                      ProtobufCBuffer     *buffer);
BitbusSniffer__FunctionControlSetResponse *
       bitbus_sniffer__function_control_set_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bitbus_sniffer__function_control_set_response__free_unpacked
                     (BitbusSniffer__FunctionControlSetResponse *message,
                      ProtobufCAllocator *allocator);
/* BitbusSniffer__StreamControlStart methods */
void   bitbus_sniffer__stream_control_start__init
                     (BitbusSniffer__StreamControlStart         *message);
size_t bitbus_sniffer__stream_control_start__get_packed_size
                     (const BitbusSniffer__StreamControlStart   *message);
size_t bitbus_sniffer__stream_control_start__pack
                     (const BitbusSniffer__StreamControlStart   *message,
                      uint8_t             *out);
size_t bitbus_sniffer__stream_control_start__pack_to_buffer
                     (const BitbusSniffer__StreamControlStart   *message,
                      ProtobufCBuffer     *buffer);
BitbusSniffer__StreamControlStart *
       bitbus_sniffer__stream_control_start__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bitbus_sniffer__stream_control_start__free_unpacked
                     (BitbusSniffer__StreamControlStart *message,
                      ProtobufCAllocator *allocator);
/* BitbusSniffer__Sample methods */
void   bitbus_sniffer__sample__init
                     (BitbusSniffer__Sample         *message);
size_t bitbus_sniffer__sample__get_packed_size
                     (const BitbusSniffer__Sample   *message);
size_t bitbus_sniffer__sample__pack
                     (const BitbusSniffer__Sample   *message,
                      uint8_t             *out);
size_t bitbus_sniffer__sample__pack_to_buffer
                     (const BitbusSniffer__Sample   *message,
                      ProtobufCBuffer     *buffer);
BitbusSniffer__Sample *
       bitbus_sniffer__sample__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bitbus_sniffer__sample__free_unpacked
                     (BitbusSniffer__Sample *message,
                      ProtobufCAllocator *allocator);
/* BitbusSniffer__StreamData methods */
void   bitbus_sniffer__stream_data__init
                     (BitbusSniffer__StreamData         *message);
size_t bitbus_sniffer__stream_data__get_packed_size
                     (const BitbusSniffer__StreamData   *message);
size_t bitbus_sniffer__stream_data__pack
                     (const BitbusSniffer__StreamData   *message,
                      uint8_t             *out);
size_t bitbus_sniffer__stream_data__pack_to_buffer
                     (const BitbusSniffer__StreamData   *message,
                      ProtobufCBuffer     *buffer);
BitbusSniffer__StreamData *
       bitbus_sniffer__stream_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bitbus_sniffer__stream_data__free_unpacked
                     (BitbusSniffer__StreamData *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*BitbusSniffer__ConfigurationSet_Closure)
                 (const BitbusSniffer__ConfigurationSet *message,
                  void *closure_data);
typedef void (*BitbusSniffer__ConfigurationSetResponse_Closure)
                 (const BitbusSniffer__ConfigurationSetResponse *message,
                  void *closure_data);
typedef void (*BitbusSniffer__ConfigurationGet_Closure)
                 (const BitbusSniffer__ConfigurationGet *message,
                  void *closure_data);
typedef void (*BitbusSniffer__ConfigurationGetResponse_Closure)
                 (const BitbusSniffer__ConfigurationGetResponse *message,
                  void *closure_data);
typedef void (*BitbusSniffer__ConfigurationDescribe_Closure)
                 (const BitbusSniffer__ConfigurationDescribe *message,
                  void *closure_data);
typedef void (*BitbusSniffer__ConfigurationDescribeResponse_Closure)
                 (const BitbusSniffer__ConfigurationDescribeResponse *message,
                  void *closure_data);
typedef void (*BitbusSniffer__FunctionControlGet_Closure)
                 (const BitbusSniffer__FunctionControlGet *message,
                  void *closure_data);
typedef void (*BitbusSniffer__Frame_Closure)
                 (const BitbusSniffer__Frame *message,
                  void *closure_data);
typedef void (*BitbusSniffer__FunctionControlSet_Closure)
                 (const BitbusSniffer__FunctionControlSet *message,
                  void *closure_data);
typedef void (*BitbusSniffer__FunctionControlGetResponse_Closure)
                 (const BitbusSniffer__FunctionControlGetResponse *message,
                  void *closure_data);
typedef void (*BitbusSniffer__FunctionControlSetResponse_Closure)
                 (const BitbusSniffer__FunctionControlSetResponse *message,
                  void *closure_data);
typedef void (*BitbusSniffer__StreamControlStart_Closure)
                 (const BitbusSniffer__StreamControlStart *message,
                  void *closure_data);
typedef void (*BitbusSniffer__Sample_Closure)
                 (const BitbusSniffer__Sample *message,
                  void *closure_data);
typedef void (*BitbusSniffer__StreamData_Closure)
                 (const BitbusSniffer__StreamData *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor bitbus_sniffer__configuration_set__descriptor;
extern const ProtobufCMessageDescriptor bitbus_sniffer__configuration_set_response__descriptor;
extern const ProtobufCMessageDescriptor bitbus_sniffer__configuration_get__descriptor;
extern const ProtobufCMessageDescriptor bitbus_sniffer__configuration_get_response__descriptor;
extern const ProtobufCMessageDescriptor bitbus_sniffer__configuration_describe__descriptor;
extern const ProtobufCMessageDescriptor bitbus_sniffer__configuration_describe_response__descriptor;
extern const ProtobufCMessageDescriptor bitbus_sniffer__function_control_get__descriptor;
extern const ProtobufCMessageDescriptor bitbus_sniffer__frame__descriptor;
extern const ProtobufCMessageDescriptor bitbus_sniffer__function_control_set__descriptor;
extern const ProtobufCMessageDescriptor bitbus_sniffer__function_control_get_response__descriptor;
extern const ProtobufCMessageDescriptor bitbus_sniffer__function_control_set_response__descriptor;
extern const ProtobufCMessageDescriptor bitbus_sniffer__stream_control_start__descriptor;
extern const ProtobufCMessageDescriptor bitbus_sniffer__sample__descriptor;
extern const ProtobufCEnumDescriptor    bitbus_sniffer__sample__flags__descriptor;
extern const ProtobufCMessageDescriptor bitbus_sniffer__stream_data__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_bitbusSniffer_2eproto__INCLUDED */
