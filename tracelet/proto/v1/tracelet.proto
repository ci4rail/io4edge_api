// SPDX-License-Identifier: Apache-2.0
// SPDX-FileCopyrightText: (c) 2023 Ci4Rail GmbH

// Protobuf definitiions for Ci4Rail Tracelet, e.g. SIO02 or SIO03.
// It defines the messages exchanged between the Tracelet and the localization
// system. The messages are transported over UDP, with handshaking
// 
// The tracelet is the UDP client and the localization system is the UDP server.

syntax = "proto3";

import "google/protobuf/timestamp.proto";

package tracelet;
option go_package = "./tracelet";

// message sent from tracelet to server

message TraceletToServer {

  // Sub-message sent periodically sent by the tracelet
  message Location {

    message Gnss {
      // GNSS location valid. If false, the other fields are not valid
      bool valid = 1;

      // WGS84 coordinates
      // latitude in [deg]
      double latitude = 2;

      // longitude in [deg]
      double longitude = 3;

      // altitude in [m]
      double altitude = 4;

      // horizontal accuracy in [m]
      double eph = 5;

      // vertical accuracy in [m]
      double epv = 6;

      // type of fix 
      // 0 = invalid, 1 = GPS fix, 2 = DGPS fix, 3 = PPS fix, 4 = Real Time Kinematic, 
      // 5 = Float RTK, 6 = estimated, 7 = Manual input mode, 8 = Simulation mode
      int32 fix_type = 7;

      // heading of motion in [deg], relative to true north
      double head_motion = 8;

      // heading of vehicle in [deg], relative to true north
      double head_vehicle = 9;

      // heading valid (bit 0=motion valid, 1=vehicle valid))
      uint32 head_valid = 10;

      // speed in [m/s]
      double ground_speed = 11;
    }

    message Uwb {
      // UWB location valid. If false, the other fields are not valid
      bool valid = 1;

      // location of tracelet in space
      // Units: [m], can be negative. Resolution 0.1m
      double x = 2;
      double y = 3;
      double z = 4;

      // Site ID
      // a 16 bit unsigned value
      uint32 site_id = 5;

      // Location signature
      // can be used to validate the received location
      fixed64 location_signature = 6;

      // horizontal accuracy in [m]
      double eph = 7;

      // type of fix 
      // 0 = invalid, 1 = UWB/IMU, 2 - IMU only
      int32 fix_type = 8;

      // heading of motion in [deg]
      // relative to site coordinate system, counterclockwise, 0 in direction of pos. x axis
      double head_motion = 9;

      // heading of vehicle in [deg] - future extension
      double head_vehicle = 10;

      // heading valid (bit 0=motion valid, 1=vehicle valid))
      uint32 head_valid = 11;

      // speed in [m/s]
      double ground_speed = 12;
    }

    message Fused {
      // Fused location valid. If false, the other fields are not valid
      bool valid = 1;

      // WGS84 coordinates
      // latitude in [deg]
      double latitude = 2;

      // longitude in [deg]
      double longitude = 3;

      // altitude in [m] - future extension
      double altitude = 4; 

      // horizontal accuracy in [m]
      double eph = 5;

      // heading of motion in [deg] - future extension
      double head_motion = 6;  

      // heading of vehicle in [deg] - future extension
      double head_vehicle = 7;

      // heading valid (bit 0=motion valid, 1=vehicle valid)) - future extension
      uint32 head_valid = 8;

      // speed in [m/s] - future extension
      double ground_speed = 9;
    }

    // Acceleration data - all values in (m/s^2)
    message Acceleration {
        double x_max = 1; // Maximum acceleration in x direction in last period 
        double y_max = 2;
        double z_max = 3;
        double x_min = 4; // Minimum acceleration in x direction in last period
        double y_min = 5;
        double z_min = 6;
        double x_avg = 7; // Average acceleration in x direction in last period
        double y_avg = 8;
        double z_avg = 9;
    }


    enum Direction {
      // Invalid direction
      NO_DIRECTION = 0;

      // CAB A
      CAB_A_DIRECTION = 1;

      // CAB B
      CAB_B_DIRECTION = 2;
    }

    // Data from GNSS subsystem
    Gnss gnss = 1;

    // Data from UWB subsystem
    Uwb uwb = 2;

    // Fused location
    Fused fused = 7;

    // Driving direction of the vehicle
    Direction direction = 3;

    // Vehicle Speed in [m/s]
    double speed = 4;

    // Vehicle Mileage in [km]
    int32 mileage = 5;

    // Current Tracelet Temperature in [Â°C]
    double temperature = 6;

    // Acceleration data
    Acceleration acceleration = 8;

  } // Location

  // Currently not used, always 0
  int32 id = 1;

  // timestamp when the message was sent by the tracelet
  // If the Tracelet has no valid time, receive_ts is set to 1970-Jan-1 00:00
  // UTC
  google.protobuf.Timestamp delivery_ts = 2;

  // tracelet ID as provisioned in tracelet. Could be a vehicle ID
  string tracelet_id = 3;

  // status of the tracelet ignition signal
  bool ignition = 4;

  oneof type {
    Location location = 5;     // periodically sent by the tracelet or in
                               // response to a location request
    // possible future messages
  }
}