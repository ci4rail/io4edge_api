// SPDX-License-Identifier: Apache-2.0
// SPDX-FileCopyrightText: (c) 2024-2025 Ci4Rail GmbH

// Protobuf definitiions for Ci4Rail Tracelet, e.g. LTR01, SIO02 or SIO03.
// It defines the messages exchanged between the Tracelet and the localization
// system. The messages are transported over UDP, with handshaking
//
// The tracelet is the UDP client and the localization system is the UDP server.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.0--rc2
// source: tracelet.proto

package tracelet

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TraceletToServer_Location_Direction int32

const (
	// Invalid direction
	TraceletToServer_Location_NO_DIRECTION TraceletToServer_Location_Direction = 0
	// CAB A
	TraceletToServer_Location_CAB_A_DIRECTION TraceletToServer_Location_Direction = 1
	// CAB B
	TraceletToServer_Location_CAB_B_DIRECTION TraceletToServer_Location_Direction = 2
)

// Enum value maps for TraceletToServer_Location_Direction.
var (
	TraceletToServer_Location_Direction_name = map[int32]string{
		0: "NO_DIRECTION",
		1: "CAB_A_DIRECTION",
		2: "CAB_B_DIRECTION",
	}
	TraceletToServer_Location_Direction_value = map[string]int32{
		"NO_DIRECTION":    0,
		"CAB_A_DIRECTION": 1,
		"CAB_B_DIRECTION": 2,
	}
)

func (x TraceletToServer_Location_Direction) Enum() *TraceletToServer_Location_Direction {
	p := new(TraceletToServer_Location_Direction)
	*p = x
	return p
}

func (x TraceletToServer_Location_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TraceletToServer_Location_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_tracelet_proto_enumTypes[0].Descriptor()
}

func (TraceletToServer_Location_Direction) Type() protoreflect.EnumType {
	return &file_tracelet_proto_enumTypes[0]
}

func (x TraceletToServer_Location_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TraceletToServer_Location_Direction.Descriptor instead.
func (TraceletToServer_Location_Direction) EnumDescriptor() ([]byte, []int) {
	return file_tracelet_proto_rawDescGZIP(), []int{0, 0, 0}
}

type TraceletToServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// message UUIDv4 as a 16 byte value
	Uuid        *TraceletMessageID `protobuf:"bytes,8,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Ipv4Address uint32             `protobuf:"fixed32,9,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"` // IPv4 address of the tracelet, in network byte order
	// timestamp when the message was sent by the tracelet
	// If the Tracelet has no valid time, receive_ts is set to 1970-Jan-1 00:00
	// UTC
	DeliveryTs *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=delivery_ts,json=deliveryTs,proto3" json:"delivery_ts,omitempty"`
	// tracelet ID as provisioned in tracelet. Could be a vehicle ID
	TraceletId string `protobuf:"bytes,3,opt,name=tracelet_id,json=traceletId,proto3" json:"tracelet_id,omitempty"`
	// status of the tracelet ignition signal
	Ignition bool `protobuf:"varint,4,opt,name=ignition,proto3" json:"ignition,omitempty"`
	// Types that are assignable to Type:
	//
	//	*TraceletToServer_Location_
	Type            isTraceletToServer_Type `protobuf_oneof:"type"`
	FirmwareVersion string                  `protobuf:"bytes,7,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"` // Firmware version of the tracelet
	Metrics         *TraceletMetrics        `protobuf:"bytes,10,opt,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *TraceletToServer) Reset() {
	*x = TraceletToServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracelet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceletToServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceletToServer) ProtoMessage() {}

func (x *TraceletToServer) ProtoReflect() protoreflect.Message {
	mi := &file_tracelet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceletToServer.ProtoReflect.Descriptor instead.
func (*TraceletToServer) Descriptor() ([]byte, []int) {
	return file_tracelet_proto_rawDescGZIP(), []int{0}
}

func (x *TraceletToServer) GetUuid() *TraceletMessageID {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *TraceletToServer) GetIpv4Address() uint32 {
	if x != nil {
		return x.Ipv4Address
	}
	return 0
}

func (x *TraceletToServer) GetDeliveryTs() *timestamppb.Timestamp {
	if x != nil {
		return x.DeliveryTs
	}
	return nil
}

func (x *TraceletToServer) GetTraceletId() string {
	if x != nil {
		return x.TraceletId
	}
	return ""
}

func (x *TraceletToServer) GetIgnition() bool {
	if x != nil {
		return x.Ignition
	}
	return false
}

func (m *TraceletToServer) GetType() isTraceletToServer_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *TraceletToServer) GetLocation() *TraceletToServer_Location {
	if x, ok := x.GetType().(*TraceletToServer_Location_); ok {
		return x.Location
	}
	return nil
}

func (x *TraceletToServer) GetFirmwareVersion() string {
	if x != nil {
		return x.FirmwareVersion
	}
	return ""
}

func (x *TraceletToServer) GetMetrics() *TraceletMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type isTraceletToServer_Type interface {
	isTraceletToServer_Type()
}

type TraceletToServer_Location_ struct {
	Location *TraceletToServer_Location `protobuf:"bytes,5,opt,name=location,proto3,oneof"` // periodically sent by the tracelet
}

func (*TraceletToServer_Location_) isTraceletToServer_Type() {}

type TraceletMessageID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUIDv4 as a 16 byte value
	// The UUID is used to uniquely identify the tracelet message in the localization system
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TraceletMessageID) Reset() {
	*x = TraceletMessageID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracelet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceletMessageID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceletMessageID) ProtoMessage() {}

func (x *TraceletMessageID) ProtoReflect() protoreflect.Message {
	mi := &file_tracelet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceletMessageID.ProtoReflect.Descriptor instead.
func (*TraceletMessageID) Descriptor() ([]byte, []int) {
	return file_tracelet_proto_rawDescGZIP(), []int{1}
}

func (x *TraceletMessageID) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Tracelet metrics. May be sent together with the location message
// Metric families are written in the form of metric___label___labelvalue
type TraceletMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Health__Type__UwbComm                int64   `protobuf:"varint,1,opt,name=health___type___uwb_comm,json=healthTypeUwbComm,proto3" json:"health___type___uwb_comm,omitempty"`
	Health__Type__UwbFirmware            int64   `protobuf:"varint,2,opt,name=health___type___uwb_firmware,json=healthTypeUwbFirmware,proto3" json:"health___type___uwb_firmware,omitempty"`
	Health__Type__UwbConfig              int64   `protobuf:"varint,3,opt,name=health___type___uwb_config,json=healthTypeUwbConfig,proto3" json:"health___type___uwb_config,omitempty"`
	Health__Type__GnssComm               int64   `protobuf:"varint,4,opt,name=health___type___gnss_comm,json=healthTypeGnssComm,proto3" json:"health___type___gnss_comm,omitempty"`
	Health__Type__UbxFirmware            int64   `protobuf:"varint,5,opt,name=health___type___ubx_firmware,json=healthTypeUbxFirmware,proto3" json:"health___type___ubx_firmware,omitempty"`
	Health__Type__UbxConfig              int64   `protobuf:"varint,6,opt,name=health___type___ubx_config,json=healthTypeUbxConfig,proto3" json:"health___type___ubx_config,omitempty"`
	Health__Type__ActorsStartup          int64   `protobuf:"varint,7,opt,name=health___type___actors_startup,json=healthTypeActorsStartup,proto3" json:"health___type___actors_startup,omitempty"`
	SntpUpdates                          int64   `protobuf:"varint,8,opt,name=sntp_updates,json=sntpUpdates,proto3" json:"sntp_updates,omitempty"`                                                                                   // Number of SNTP time updates
	FreeHeapBytes                        int64   `protobuf:"varint,9,opt,name=free_heap_bytes,json=freeHeapBytes,proto3" json:"free_heap_bytes,omitempty"`                                                                           // Free heap (bytes)
	SystemTimeSeconds                    float64 `protobuf:"fixed64,10,opt,name=system_time_seconds,json=systemTimeSeconds,proto3" json:"system_time_seconds,omitempty"`                                                             // System time in seconds since 1970 UTC
	WifiRssiDbm                          float64 `protobuf:"fixed64,11,opt,name=wifi_rssi_dbm,json=wifiRssiDbm,proto3" json:"wifi_rssi_dbm,omitempty"`                                                                               // Wifi RSSI (dBm), NAN if not connected
	WifiAp                               int64   `protobuf:"varint,12,opt,name=wifi_ap,json=wifiAp,proto3" json:"wifi_ap,omitempty"`                                                                                                 // Last two bytes of connected AP MAC address as a number
	GnssNumSats__System__Gps             int64   `protobuf:"varint,13,opt,name=gnss_num_sats___system___gps,json=gnssNumSatsSystemGps,proto3" json:"gnss_num_sats___system___gps,omitempty"`                                         // number of satellites in view (GPS)
	GnssNumSats__System__Glonass         int64   `protobuf:"varint,14,opt,name=gnss_num_sats___system___glonass,json=gnssNumSatsSystemGlonass,proto3" json:"gnss_num_sats___system___glonass,omitempty"`                             // number of satellites in view (GLONASS)
	GnssNumSats__System__Beidou          int64   `protobuf:"varint,15,opt,name=gnss_num_sats___system___beidou,json=gnssNumSatsSystemBeidou,proto3" json:"gnss_num_sats___system___beidou,omitempty"`                                // number of satellites in view (Beidou)
	GnssNumSats__System__Galileo         int64   `protobuf:"varint,16,opt,name=gnss_num_sats___system___galileo,json=gnssNumSatsSystemGalileo,proto3" json:"gnss_num_sats___system___galileo,omitempty"`                             // number of satellites in view (Galileo)
	GnssNumSats__System__Qzss            int64   `protobuf:"varint,17,opt,name=gnss_num_sats___system___qzss,json=gnssNumSatsSystemQzss,proto3" json:"gnss_num_sats___system___qzss,omitempty"`                                      // number of satellites in view (QZSS)
	GnssUartErrors__Type__HwFifo         int64   `protobuf:"varint,21,opt,name=gnss_uart_errors___type___hw_fifo,json=gnssUartErrorsTypeHwFifo,proto3" json:"gnss_uart_errors___type___hw_fifo,omitempty"`                           // GNSS UART HW FIFO full
	GnssUartErrors__Type__BufFull        int64   `protobuf:"varint,22,opt,name=gnss_uart_errors___type___buf_full,json=gnssUartErrorsTypeBufFull,proto3" json:"gnss_uart_errors___type___buf_full,omitempty"`                        // GNSS UART buffer full, data lost
	GnssUartErrors__Type__Char           int64   `protobuf:"varint,23,opt,name=gnss_uart_errors___type___char,json=gnssUartErrorsTypeChar,proto3" json:"gnss_uart_errors___type___char,omitempty"`                                   // GNSS UART character errors, e.g. framing errors
	GnssNumSv                            int64   `protobuf:"varint,30,opt,name=gnss_num_sv,json=gnssNumSv,proto3" json:"gnss_num_sv,omitempty"`                                                                                      // Number of satellites used in fix
	GnssPga__Block__Rf1                  int64   `protobuf:"varint,31,opt,name=gnss_pga___block___rf1,json=gnssPgaBlockRf1,proto3" json:"gnss_pga___block___rf1,omitempty"`                                                          // gain of programmable amplifier for RF band 1 (db)
	GnssPga__Block__Rf2                  int64   `protobuf:"varint,32,opt,name=gnss_pga___block___rf2,json=gnssPgaBlockRf2,proto3" json:"gnss_pga___block___rf2,omitempty"`                                                          // gain of programmable amplifier for RF band 2 (db)
	UbxSensorFusionStatusEnum            int64   `protobuf:"varint,33,opt,name=ubx_sensor_fusion_status_enum,json=ubxSensorFusionStatusEnum,proto3" json:"ubx_sensor_fusion_status_enum,omitempty"`                                  // UBX Sensor fusion status (0=init 1=fusion 2=suspended 3=disabled)
	UbxRefStationId                      int64   `protobuf:"varint,34,opt,name=ubx_ref_station_id,json=ubxRefStationId,proto3" json:"ubx_ref_station_id,omitempty"`                                                                  // UBX GNSS reference station. May not be updated if no reference station
	NtripIsConnected                     int64   `protobuf:"varint,35,opt,name=ntrip_is_connected,json=ntripIsConnected,proto3" json:"ntrip_is_connected,omitempty"`                                                                 // Has Connection to NTRIP Caster
	NtripTransferBytes__Direction__Send  int64   `protobuf:"varint,36,opt,name=ntrip_transfer_bytes___direction___send,json=ntripTransferBytesDirectionSend,proto3" json:"ntrip_transfer_bytes___direction___send,omitempty"`        // Bytes sent to NTRIP Caster
	NtripTransferBytes__Direction__Recv  int64   `protobuf:"varint,37,opt,name=ntrip_transfer_bytes___direction___recv,json=ntripTransferBytesDirectionRecv,proto3" json:"ntrip_transfer_bytes___direction___recv,omitempty"`        // Bytes received from NTRIP Caster
	UwbStatusRoleEnum                    int64   `protobuf:"varint,38,opt,name=uwb_status_role_enum,json=uwbStatusRoleEnum,proto3" json:"uwb_status_role_enum,omitempty"`                                                            // UWB Role from Status Report (0-4) 3=TAG  TODO: needed?
	UwbStatusStateEnum                   int64   `protobuf:"varint,39,opt,name=uwb_status_state_enum,json=uwbStatusStateEnum,proto3" json:"uwb_status_state_enum,omitempty"`                                                         // UWB State from Status Report(0-4) TODO: needed?
	UwbStatusMotionStateEnum             int64   `protobuf:"varint,40,opt,name=uwb_status_motion_state_enum,json=uwbStatusMotionStateEnum,proto3" json:"uwb_status_motion_state_enum,omitempty"`                                     // UWB Motion Sensor State from Status Report (0..2), 1=MOVE TODO: needed?
	LsiIsConnected                       int64   `protobuf:"varint,41,opt,name=lsi_is_connected,json=lsiIsConnected,proto3" json:"lsi_is_connected,omitempty"`                                                                       // Localization Server Interface gets ACKs from server
	LsiAcksMissed                        int64   `protobuf:"varint,42,opt,name=lsi_acks_missed,json=lsiAcksMissed,proto3" json:"lsi_acks_missed,omitempty"`                                                                          // Localization Server Interface number of missed ACKs from server
	UbxBootTypeEnum                      int64   `protobuf:"varint,43,opt,name=ubx_boot_type_enum,json=ubxBootTypeEnum,proto3" json:"ubx_boot_type_enum,omitempty"`                                                                  // UBX Boot type (0=unknown, 1=cold-start, 2=watchdog, 3=hardware reset, 4=hardware backup, 5=software backup, 6=software reset, 7=vio fail, 8=vdd_x fail, 9=vdd_rf fail, 10=v_core_high fail, 11=system reset)
	UbxRuntime                           int64   `protobuf:"varint,44,opt,name=ubx_runtime,json=ubxRuntime,proto3" json:"ubx_runtime,omitempty"`                                                                                     // UBX Runtime in seconds
	UbxSensorFusionDetail__Type__WtInit  int64   `protobuf:"varint,45,opt,name=ubx_sensor_fusion_detail___type___wt_init,json=ubxSensorFusionDetailTypeWtInit,proto3" json:"ubx_sensor_fusion_detail___type___wt_init,omitempty"`    // WT Initialization status (0=off, 1=initializing, 2=initialized)
	UbxSensorFusionDetail__Type__MntAlg  int64   `protobuf:"varint,46,opt,name=ubx_sensor_fusion_detail___type___mnt_alg,json=ubxSensorFusionDetailTypeMntAlg,proto3" json:"ubx_sensor_fusion_detail___type___mnt_alg,omitempty"`    // Automatic IMU MntAlg status (0=off, 1=initializing, 2=initialized, 3=initialized)
	UbxSensorFusionDetail__Type__InsInit int64   `protobuf:"varint,47,opt,name=ubx_sensor_fusion_detail___type___ins_init,json=ubxSensorFusionDetailTypeInsInit,proto3" json:"ubx_sensor_fusion_detail___type___ins_init,omitempty"` // INS Initialization status (0=off, 1=initializing, 2=initialized)
	UbxSensorFusionDetail__Type__ImuInit int64   `protobuf:"varint,48,opt,name=ubx_sensor_fusion_detail___type___imu_init,json=ubxSensorFusionDetailTypeImuInit,proto3" json:"ubx_sensor_fusion_detail___type___imu_init,omitempty"` // INS State (0=off, 1=initializing, 2=initialized)
	SensorFusionState                    int64   `protobuf:"varint,49,opt,name=sensor_fusion_state,json=sensorFusionState,proto3" json:"sensor_fusion_state,omitempty"`                                                              // Sensor Fusion State (0=NONE, 1=UWB, 2=GNSS, 3=UWB-to-GNSS)
	UwbNumSats                           int64   `protobuf:"varint,50,opt,name=uwb_num_sats,json=uwbNumSats,proto3" json:"uwb_num_sats,omitempty"`                                                                                   // Number of UWB satlets in view
	UwbSat_1__Type__Addr                 int64   `protobuf:"varint,51,opt,name=uwb_sat_1___type___addr,json=uwbSat1TypeAddr,proto3" json:"uwb_sat_1___type___addr,omitempty"`                                                        // Address of UWB Satlet 1
	UwbSat_1__Type__Rssi                 int64   `protobuf:"varint,52,opt,name=uwb_sat_1___type___rssi,json=uwbSat1TypeRssi,proto3" json:"uwb_sat_1___type___rssi,omitempty"`                                                        // RSSI of UWB Satlet 1 (dBm)
	UwbSat_1__Type__Nlos                 int64   `protobuf:"varint,53,opt,name=uwb_sat_1___type___nlos,json=uwbSat1TypeNlos,proto3" json:"uwb_sat_1___type___nlos,omitempty"`                                                        // non-line of sight indicator of UWB Satlet 1 (0=LOS 1=NLOS)
	UwbSat_2__Type__Addr                 int64   `protobuf:"varint,54,opt,name=uwb_sat_2___type___addr,json=uwbSat2TypeAddr,proto3" json:"uwb_sat_2___type___addr,omitempty"`                                                        // Address of UWB Satlet 2
	UwbSat_2__Type__Rssi                 int64   `protobuf:"varint,55,opt,name=uwb_sat_2___type___rssi,json=uwbSat2TypeRssi,proto3" json:"uwb_sat_2___type___rssi,omitempty"`                                                        // RSSI of UWB Satlet 2 (dBm)
	UwbSat_2__Type__Nlos                 int64   `protobuf:"varint,56,opt,name=uwb_sat_2___type___nlos,json=uwbSat2TypeNlos,proto3" json:"uwb_sat_2___type___nlos,omitempty"`                                                        // non-line of sight indicator of UWB Satlet 2 (0=LOS 1=NLOS)
	UwbSat_3__Type__Addr                 int64   `protobuf:"varint,57,opt,name=uwb_sat_3___type___addr,json=uwbSat3TypeAddr,proto3" json:"uwb_sat_3___type___addr,omitempty"`                                                        // Address of UWB Satlet 3
	UwbSat_3__Type__Rssi                 int64   `protobuf:"varint,58,opt,name=uwb_sat_3___type___rssi,json=uwbSat3TypeRssi,proto3" json:"uwb_sat_3___type___rssi,omitempty"`                                                        // RSSI of UWB Satlet 3 (dBm)
	UwbSat_3__Type__Nlos                 int64   `protobuf:"varint,59,opt,name=uwb_sat_3___type___nlos,json=uwbSat3TypeNlos,proto3" json:"uwb_sat_3___type___nlos,omitempty"`                                                        // non-line of sight indicator of UWB Satlet 3 (0=LOS 1=NLOS)
	UwbSat_4__Type__Addr                 int64   `protobuf:"varint,60,opt,name=uwb_sat_4___type___addr,json=uwbSat4TypeAddr,proto3" json:"uwb_sat_4___type___addr,omitempty"`                                                        // Address of UWB Satlet 4
	UwbSat_4__Type__Rssi                 int64   `protobuf:"varint,61,opt,name=uwb_sat_4___type___rssi,json=uwbSat4TypeRssi,proto3" json:"uwb_sat_4___type___rssi,omitempty"`                                                        // RSSI of UWB Satlet 4 (dBm)
	UwbSat_4__Type__Nlos                 int64   `protobuf:"varint,62,opt,name=uwb_sat_4___type___nlos,json=uwbSat4TypeNlos,proto3" json:"uwb_sat_4___type___nlos,omitempty"`                                                        // non-line of sight indicator of UWB Satlet 4 (0=LOS 1=NLOS)
	UwbSat_5__Type__Addr                 int64   `protobuf:"varint,63,opt,name=uwb_sat_5___type___addr,json=uwbSat5TypeAddr,proto3" json:"uwb_sat_5___type___addr,omitempty"`                                                        // Address of UWB Satlet 5
	UwbSat_5__Type__Rssi                 int64   `protobuf:"varint,64,opt,name=uwb_sat_5___type___rssi,json=uwbSat5TypeRssi,proto3" json:"uwb_sat_5___type___rssi,omitempty"`                                                        // RSSI of UWB Satlet 5 (dBm)
	UwbSat_5__Type__Nlos                 int64   `protobuf:"varint,65,opt,name=uwb_sat_5___type___nlos,json=uwbSat5TypeNlos,proto3" json:"uwb_sat_5___type___nlos,omitempty"`                                                        // non-line of sight indicator of UWB Satlet 5 (0=LOS 1=NLOS)
	UwbSat_6__Type__Addr                 int64   `protobuf:"varint,66,opt,name=uwb_sat_6___type___addr,json=uwbSat6TypeAddr,proto3" json:"uwb_sat_6___type___addr,omitempty"`                                                        // Address of UWB Satlet 6
	UwbSat_6__Type__Rssi                 int64   `protobuf:"varint,67,opt,name=uwb_sat_6___type___rssi,json=uwbSat6TypeRssi,proto3" json:"uwb_sat_6___type___rssi,omitempty"`                                                        // RSSI of UWB Satlet 6 (dBm)
	UwbSat_6__Type__Nlos                 int64   `protobuf:"varint,68,opt,name=uwb_sat_6___type___nlos,json=uwbSat6TypeNlos,proto3" json:"uwb_sat_6___type___nlos,omitempty"`                                                        // non-line of sight indicator of UWB Satlet 6 (0=LOS 1=NLOS)
	CpuLoadPercent__Cpu___0              int64   `protobuf:"varint,69,opt,name=cpu_load_percent___cpu___0,json=cpuLoadPercentCpu0,proto3" json:"cpu_load_percent___cpu___0,omitempty"`                                               // CPU Load of CPU 0 in percent
	CpuLoadPercent__Cpu___1              int64   `protobuf:"varint,70,opt,name=cpu_load_percent___cpu___1,json=cpuLoadPercentCpu1,proto3" json:"cpu_load_percent___cpu___1,omitempty"`                                               // CPU Load of CPU 1 in percent
	UptimeSeconds                        int64   `protobuf:"varint,71,opt,name=uptime_seconds,json=uptimeSeconds,proto3" json:"uptime_seconds,omitempty"`                                                                            // Uptime in seconds since last reboot
	SleepManagerState                    int64   `protobuf:"varint,72,opt,name=sleep_manager_state,json=sleepManagerState,proto3" json:"sleep_manager_state,omitempty"`                                                              // Sleep Manager State (0=NORMAL, 1=WANT_SLEEP, 2=WANT_SLEEP_CONFIRM, 3=PREPARE_SLEEP, 4=SLEEP, 5=WAKE)
	LastPowerCutUnixSeconds              int64   `protobuf:"varint,73,opt,name=last_power_cut_unix_seconds,json=lastPowerCutUnixSeconds,proto3" json:"last_power_cut_unix_seconds,omitempty"`                                        // Last power cut time in seconds since 1.1.1970 UTC
	ResetCount__Type__Poweron            int64   `protobuf:"varint,80,opt,name=reset_count___type___poweron,json=resetCountTypePoweron,proto3" json:"reset_count___type___poweron,omitempty"`                                        // Number of power-on resets
	ResetCount__Type__Software           int64   `protobuf:"varint,81,opt,name=reset_count___type___software,json=resetCountTypeSoftware,proto3" json:"reset_count___type___software,omitempty"`                                     // Number of software resets
	ResetCount__Type__Interruptwd        int64   `protobuf:"varint,82,opt,name=reset_count___type___interruptwd,json=resetCountTypeInterruptwd,proto3" json:"reset_count___type___interruptwd,omitempty"`                            // Number of interrupt watchdog resets
	ResetCount__Type__Taskwd             int64   `protobuf:"varint,83,opt,name=reset_count___type___taskwd,json=resetCountTypeTaskwd,proto3" json:"reset_count___type___taskwd,omitempty"`                                           // Number of task watchdog resets
	ResetCount__Type__Wd                 int64   `protobuf:"varint,84,opt,name=reset_count___type___wd,json=resetCountTypeWd,proto3" json:"reset_count___type___wd,omitempty"`                                                       // Number of other watchdog resets
	ResetCount__Type__Brownout           int64   `protobuf:"varint,85,opt,name=reset_count___type___brownout,json=resetCountTypeBrownout,proto3" json:"reset_count___type___brownout,omitempty"`                                     // Number of brownout resets
	ResetCount__Type__Unknown            int64   `protobuf:"varint,86,opt,name=reset_count___type___unknown,json=resetCountTypeUnknown,proto3" json:"reset_count___type___unknown,omitempty"`                                        // Number of unknown resets
	UwbTachoSpeed                        int64   `protobuf:"varint,87,opt,name=uwb_tacho_speed,json=uwbTachoSpeed,proto3" json:"uwb_tacho_speed,omitempty"`                                                                          // Tacho speed from UWB subsystem in m/s (always positive)
}

func (x *TraceletMetrics) Reset() {
	*x = TraceletMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracelet_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceletMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceletMetrics) ProtoMessage() {}

func (x *TraceletMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_tracelet_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceletMetrics.ProtoReflect.Descriptor instead.
func (*TraceletMetrics) Descriptor() ([]byte, []int) {
	return file_tracelet_proto_rawDescGZIP(), []int{2}
}

func (x *TraceletMetrics) GetHealth__Type__UwbComm() int64 {
	if x != nil {
		return x.Health__Type__UwbComm
	}
	return 0
}

func (x *TraceletMetrics) GetHealth__Type__UwbFirmware() int64 {
	if x != nil {
		return x.Health__Type__UwbFirmware
	}
	return 0
}

func (x *TraceletMetrics) GetHealth__Type__UwbConfig() int64 {
	if x != nil {
		return x.Health__Type__UwbConfig
	}
	return 0
}

func (x *TraceletMetrics) GetHealth__Type__GnssComm() int64 {
	if x != nil {
		return x.Health__Type__GnssComm
	}
	return 0
}

func (x *TraceletMetrics) GetHealth__Type__UbxFirmware() int64 {
	if x != nil {
		return x.Health__Type__UbxFirmware
	}
	return 0
}

func (x *TraceletMetrics) GetHealth__Type__UbxConfig() int64 {
	if x != nil {
		return x.Health__Type__UbxConfig
	}
	return 0
}

func (x *TraceletMetrics) GetHealth__Type__ActorsStartup() int64 {
	if x != nil {
		return x.Health__Type__ActorsStartup
	}
	return 0
}

func (x *TraceletMetrics) GetSntpUpdates() int64 {
	if x != nil {
		return x.SntpUpdates
	}
	return 0
}

func (x *TraceletMetrics) GetFreeHeapBytes() int64 {
	if x != nil {
		return x.FreeHeapBytes
	}
	return 0
}

func (x *TraceletMetrics) GetSystemTimeSeconds() float64 {
	if x != nil {
		return x.SystemTimeSeconds
	}
	return 0
}

func (x *TraceletMetrics) GetWifiRssiDbm() float64 {
	if x != nil {
		return x.WifiRssiDbm
	}
	return 0
}

func (x *TraceletMetrics) GetWifiAp() int64 {
	if x != nil {
		return x.WifiAp
	}
	return 0
}

func (x *TraceletMetrics) GetGnssNumSats__System__Gps() int64 {
	if x != nil {
		return x.GnssNumSats__System__Gps
	}
	return 0
}

func (x *TraceletMetrics) GetGnssNumSats__System__Glonass() int64 {
	if x != nil {
		return x.GnssNumSats__System__Glonass
	}
	return 0
}

func (x *TraceletMetrics) GetGnssNumSats__System__Beidou() int64 {
	if x != nil {
		return x.GnssNumSats__System__Beidou
	}
	return 0
}

func (x *TraceletMetrics) GetGnssNumSats__System__Galileo() int64 {
	if x != nil {
		return x.GnssNumSats__System__Galileo
	}
	return 0
}

func (x *TraceletMetrics) GetGnssNumSats__System__Qzss() int64 {
	if x != nil {
		return x.GnssNumSats__System__Qzss
	}
	return 0
}

func (x *TraceletMetrics) GetGnssUartErrors__Type__HwFifo() int64 {
	if x != nil {
		return x.GnssUartErrors__Type__HwFifo
	}
	return 0
}

func (x *TraceletMetrics) GetGnssUartErrors__Type__BufFull() int64 {
	if x != nil {
		return x.GnssUartErrors__Type__BufFull
	}
	return 0
}

func (x *TraceletMetrics) GetGnssUartErrors__Type__Char() int64 {
	if x != nil {
		return x.GnssUartErrors__Type__Char
	}
	return 0
}

func (x *TraceletMetrics) GetGnssNumSv() int64 {
	if x != nil {
		return x.GnssNumSv
	}
	return 0
}

func (x *TraceletMetrics) GetGnssPga__Block__Rf1() int64 {
	if x != nil {
		return x.GnssPga__Block__Rf1
	}
	return 0
}

func (x *TraceletMetrics) GetGnssPga__Block__Rf2() int64 {
	if x != nil {
		return x.GnssPga__Block__Rf2
	}
	return 0
}

func (x *TraceletMetrics) GetUbxSensorFusionStatusEnum() int64 {
	if x != nil {
		return x.UbxSensorFusionStatusEnum
	}
	return 0
}

func (x *TraceletMetrics) GetUbxRefStationId() int64 {
	if x != nil {
		return x.UbxRefStationId
	}
	return 0
}

func (x *TraceletMetrics) GetNtripIsConnected() int64 {
	if x != nil {
		return x.NtripIsConnected
	}
	return 0
}

func (x *TraceletMetrics) GetNtripTransferBytes__Direction__Send() int64 {
	if x != nil {
		return x.NtripTransferBytes__Direction__Send
	}
	return 0
}

func (x *TraceletMetrics) GetNtripTransferBytes__Direction__Recv() int64 {
	if x != nil {
		return x.NtripTransferBytes__Direction__Recv
	}
	return 0
}

func (x *TraceletMetrics) GetUwbStatusRoleEnum() int64 {
	if x != nil {
		return x.UwbStatusRoleEnum
	}
	return 0
}

func (x *TraceletMetrics) GetUwbStatusStateEnum() int64 {
	if x != nil {
		return x.UwbStatusStateEnum
	}
	return 0
}

func (x *TraceletMetrics) GetUwbStatusMotionStateEnum() int64 {
	if x != nil {
		return x.UwbStatusMotionStateEnum
	}
	return 0
}

func (x *TraceletMetrics) GetLsiIsConnected() int64 {
	if x != nil {
		return x.LsiIsConnected
	}
	return 0
}

func (x *TraceletMetrics) GetLsiAcksMissed() int64 {
	if x != nil {
		return x.LsiAcksMissed
	}
	return 0
}

func (x *TraceletMetrics) GetUbxBootTypeEnum() int64 {
	if x != nil {
		return x.UbxBootTypeEnum
	}
	return 0
}

func (x *TraceletMetrics) GetUbxRuntime() int64 {
	if x != nil {
		return x.UbxRuntime
	}
	return 0
}

func (x *TraceletMetrics) GetUbxSensorFusionDetail__Type__WtInit() int64 {
	if x != nil {
		return x.UbxSensorFusionDetail__Type__WtInit
	}
	return 0
}

func (x *TraceletMetrics) GetUbxSensorFusionDetail__Type__MntAlg() int64 {
	if x != nil {
		return x.UbxSensorFusionDetail__Type__MntAlg
	}
	return 0
}

func (x *TraceletMetrics) GetUbxSensorFusionDetail__Type__InsInit() int64 {
	if x != nil {
		return x.UbxSensorFusionDetail__Type__InsInit
	}
	return 0
}

func (x *TraceletMetrics) GetUbxSensorFusionDetail__Type__ImuInit() int64 {
	if x != nil {
		return x.UbxSensorFusionDetail__Type__ImuInit
	}
	return 0
}

func (x *TraceletMetrics) GetSensorFusionState() int64 {
	if x != nil {
		return x.SensorFusionState
	}
	return 0
}

func (x *TraceletMetrics) GetUwbNumSats() int64 {
	if x != nil {
		return x.UwbNumSats
	}
	return 0
}

func (x *TraceletMetrics) GetUwbSat_1__Type__Addr() int64 {
	if x != nil {
		return x.UwbSat_1__Type__Addr
	}
	return 0
}

func (x *TraceletMetrics) GetUwbSat_1__Type__Rssi() int64 {
	if x != nil {
		return x.UwbSat_1__Type__Rssi
	}
	return 0
}

func (x *TraceletMetrics) GetUwbSat_1__Type__Nlos() int64 {
	if x != nil {
		return x.UwbSat_1__Type__Nlos
	}
	return 0
}

func (x *TraceletMetrics) GetUwbSat_2__Type__Addr() int64 {
	if x != nil {
		return x.UwbSat_2__Type__Addr
	}
	return 0
}

func (x *TraceletMetrics) GetUwbSat_2__Type__Rssi() int64 {
	if x != nil {
		return x.UwbSat_2__Type__Rssi
	}
	return 0
}

func (x *TraceletMetrics) GetUwbSat_2__Type__Nlos() int64 {
	if x != nil {
		return x.UwbSat_2__Type__Nlos
	}
	return 0
}

func (x *TraceletMetrics) GetUwbSat_3__Type__Addr() int64 {
	if x != nil {
		return x.UwbSat_3__Type__Addr
	}
	return 0
}

func (x *TraceletMetrics) GetUwbSat_3__Type__Rssi() int64 {
	if x != nil {
		return x.UwbSat_3__Type__Rssi
	}
	return 0
}

func (x *TraceletMetrics) GetUwbSat_3__Type__Nlos() int64 {
	if x != nil {
		return x.UwbSat_3__Type__Nlos
	}
	return 0
}

func (x *TraceletMetrics) GetUwbSat_4__Type__Addr() int64 {
	if x != nil {
		return x.UwbSat_4__Type__Addr
	}
	return 0
}

func (x *TraceletMetrics) GetUwbSat_4__Type__Rssi() int64 {
	if x != nil {
		return x.UwbSat_4__Type__Rssi
	}
	return 0
}

func (x *TraceletMetrics) GetUwbSat_4__Type__Nlos() int64 {
	if x != nil {
		return x.UwbSat_4__Type__Nlos
	}
	return 0
}

func (x *TraceletMetrics) GetUwbSat_5__Type__Addr() int64 {
	if x != nil {
		return x.UwbSat_5__Type__Addr
	}
	return 0
}

func (x *TraceletMetrics) GetUwbSat_5__Type__Rssi() int64 {
	if x != nil {
		return x.UwbSat_5__Type__Rssi
	}
	return 0
}

func (x *TraceletMetrics) GetUwbSat_5__Type__Nlos() int64 {
	if x != nil {
		return x.UwbSat_5__Type__Nlos
	}
	return 0
}

func (x *TraceletMetrics) GetUwbSat_6__Type__Addr() int64 {
	if x != nil {
		return x.UwbSat_6__Type__Addr
	}
	return 0
}

func (x *TraceletMetrics) GetUwbSat_6__Type__Rssi() int64 {
	if x != nil {
		return x.UwbSat_6__Type__Rssi
	}
	return 0
}

func (x *TraceletMetrics) GetUwbSat_6__Type__Nlos() int64 {
	if x != nil {
		return x.UwbSat_6__Type__Nlos
	}
	return 0
}

func (x *TraceletMetrics) GetCpuLoadPercent__Cpu___0() int64 {
	if x != nil {
		return x.CpuLoadPercent__Cpu___0
	}
	return 0
}

func (x *TraceletMetrics) GetCpuLoadPercent__Cpu___1() int64 {
	if x != nil {
		return x.CpuLoadPercent__Cpu___1
	}
	return 0
}

func (x *TraceletMetrics) GetUptimeSeconds() int64 {
	if x != nil {
		return x.UptimeSeconds
	}
	return 0
}

func (x *TraceletMetrics) GetSleepManagerState() int64 {
	if x != nil {
		return x.SleepManagerState
	}
	return 0
}

func (x *TraceletMetrics) GetLastPowerCutUnixSeconds() int64 {
	if x != nil {
		return x.LastPowerCutUnixSeconds
	}
	return 0
}

func (x *TraceletMetrics) GetResetCount__Type__Poweron() int64 {
	if x != nil {
		return x.ResetCount__Type__Poweron
	}
	return 0
}

func (x *TraceletMetrics) GetResetCount__Type__Software() int64 {
	if x != nil {
		return x.ResetCount__Type__Software
	}
	return 0
}

func (x *TraceletMetrics) GetResetCount__Type__Interruptwd() int64 {
	if x != nil {
		return x.ResetCount__Type__Interruptwd
	}
	return 0
}

func (x *TraceletMetrics) GetResetCount__Type__Taskwd() int64 {
	if x != nil {
		return x.ResetCount__Type__Taskwd
	}
	return 0
}

func (x *TraceletMetrics) GetResetCount__Type__Wd() int64 {
	if x != nil {
		return x.ResetCount__Type__Wd
	}
	return 0
}

func (x *TraceletMetrics) GetResetCount__Type__Brownout() int64 {
	if x != nil {
		return x.ResetCount__Type__Brownout
	}
	return 0
}

func (x *TraceletMetrics) GetResetCount__Type__Unknown() int64 {
	if x != nil {
		return x.ResetCount__Type__Unknown
	}
	return 0
}

func (x *TraceletMetrics) GetUwbTachoSpeed() int64 {
	if x != nil {
		return x.UwbTachoSpeed
	}
	return 0
}

// Sub-message sent periodically sent by the tracelet
type TraceletToServer_Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data from GNSS subsystem
	Gnss *TraceletToServer_Location_Gnss `protobuf:"bytes,1,opt,name=gnss,proto3" json:"gnss,omitempty"`
	// Data from UWB subsystem
	Uwb *TraceletToServer_Location_Uwb `protobuf:"bytes,2,opt,name=uwb,proto3" json:"uwb,omitempty"`
	// Fused location
	Fused *TraceletToServer_Location_Fused `protobuf:"bytes,7,opt,name=fused,proto3" json:"fused,omitempty"`
	// Driving direction of the vehicle
	Direction TraceletToServer_Location_Direction `protobuf:"varint,3,opt,name=direction,proto3,enum=tracelet.TraceletToServer_Location_Direction" json:"direction,omitempty"`
	// Vehicle Speed in [m/s]
	Speed float64 `protobuf:"fixed64,4,opt,name=speed,proto3" json:"speed,omitempty"`
	// Vehicle Mileage in [km]
	Mileage int32 `protobuf:"varint,5,opt,name=mileage,proto3" json:"mileage,omitempty"`
	// Current Tracelet Temperature in [°C]
	Temperature float64 `protobuf:"fixed64,6,opt,name=temperature,proto3" json:"temperature,omitempty"`
}

func (x *TraceletToServer_Location) Reset() {
	*x = TraceletToServer_Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracelet_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceletToServer_Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceletToServer_Location) ProtoMessage() {}

func (x *TraceletToServer_Location) ProtoReflect() protoreflect.Message {
	mi := &file_tracelet_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceletToServer_Location.ProtoReflect.Descriptor instead.
func (*TraceletToServer_Location) Descriptor() ([]byte, []int) {
	return file_tracelet_proto_rawDescGZIP(), []int{0, 0}
}

func (x *TraceletToServer_Location) GetGnss() *TraceletToServer_Location_Gnss {
	if x != nil {
		return x.Gnss
	}
	return nil
}

func (x *TraceletToServer_Location) GetUwb() *TraceletToServer_Location_Uwb {
	if x != nil {
		return x.Uwb
	}
	return nil
}

func (x *TraceletToServer_Location) GetFused() *TraceletToServer_Location_Fused {
	if x != nil {
		return x.Fused
	}
	return nil
}

func (x *TraceletToServer_Location) GetDirection() TraceletToServer_Location_Direction {
	if x != nil {
		return x.Direction
	}
	return TraceletToServer_Location_NO_DIRECTION
}

func (x *TraceletToServer_Location) GetSpeed() float64 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *TraceletToServer_Location) GetMileage() int32 {
	if x != nil {
		return x.Mileage
	}
	return 0
}

func (x *TraceletToServer_Location) GetTemperature() float64 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

type TraceletToServer_Location_Gnss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// GNSS location valid. If false, the other fields are not valid
	Valid bool `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	// WGS84 coordinates
	// latitude in [deg]
	Latitude float64 `protobuf:"fixed64,2,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// longitude in [deg]
	Longitude float64 `protobuf:"fixed64,3,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// altitude in [m]
	Altitude float64 `protobuf:"fixed64,4,opt,name=altitude,proto3" json:"altitude,omitempty"`
	// horizontal accuracy in [m]
	Eph float64 `protobuf:"fixed64,5,opt,name=eph,proto3" json:"eph,omitempty"`
	// vertical accuracy in [m]
	Epv float64 `protobuf:"fixed64,6,opt,name=epv,proto3" json:"epv,omitempty"`
	// type of fix
	// 0 = invalid, 1 = GPS fix, 2 = DGPS fix, 3 = PPS fix, 4 = Real Time Kinematic,
	// 5 = Float RTK, 6 = estimated, 7 = Manual input mode, 8 = Simulation mode
	FixType int32 `protobuf:"varint,7,opt,name=fix_type,json=fixType,proto3" json:"fix_type,omitempty"`
	// heading of motion in [deg], relative to true north
	HeadMotion float64 `protobuf:"fixed64,8,opt,name=head_motion,json=headMotion,proto3" json:"head_motion,omitempty"`
	// heading of vehicle in [deg], relative to true north
	HeadVehicle float64 `protobuf:"fixed64,9,opt,name=head_vehicle,json=headVehicle,proto3" json:"head_vehicle,omitempty"`
	// heading valid (bit 0=motion valid, 1=vehicle valid))
	HeadValid uint32 `protobuf:"varint,10,opt,name=head_valid,json=headValid,proto3" json:"head_valid,omitempty"`
	// heading precision in [deg]
	HeadPrecision float32 `protobuf:"fixed32,12,opt,name=head_precision,json=headPrecision,proto3" json:"head_precision,omitempty"`
	// speed in [m/s]
	GroundSpeed float64 `protobuf:"fixed64,11,opt,name=ground_speed,json=groundSpeed,proto3" json:"ground_speed,omitempty"`
}

func (x *TraceletToServer_Location_Gnss) Reset() {
	*x = TraceletToServer_Location_Gnss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracelet_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceletToServer_Location_Gnss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceletToServer_Location_Gnss) ProtoMessage() {}

func (x *TraceletToServer_Location_Gnss) ProtoReflect() protoreflect.Message {
	mi := &file_tracelet_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceletToServer_Location_Gnss.ProtoReflect.Descriptor instead.
func (*TraceletToServer_Location_Gnss) Descriptor() ([]byte, []int) {
	return file_tracelet_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *TraceletToServer_Location_Gnss) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *TraceletToServer_Location_Gnss) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *TraceletToServer_Location_Gnss) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *TraceletToServer_Location_Gnss) GetAltitude() float64 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *TraceletToServer_Location_Gnss) GetEph() float64 {
	if x != nil {
		return x.Eph
	}
	return 0
}

func (x *TraceletToServer_Location_Gnss) GetEpv() float64 {
	if x != nil {
		return x.Epv
	}
	return 0
}

func (x *TraceletToServer_Location_Gnss) GetFixType() int32 {
	if x != nil {
		return x.FixType
	}
	return 0
}

func (x *TraceletToServer_Location_Gnss) GetHeadMotion() float64 {
	if x != nil {
		return x.HeadMotion
	}
	return 0
}

func (x *TraceletToServer_Location_Gnss) GetHeadVehicle() float64 {
	if x != nil {
		return x.HeadVehicle
	}
	return 0
}

func (x *TraceletToServer_Location_Gnss) GetHeadValid() uint32 {
	if x != nil {
		return x.HeadValid
	}
	return 0
}

func (x *TraceletToServer_Location_Gnss) GetHeadPrecision() float32 {
	if x != nil {
		return x.HeadPrecision
	}
	return 0
}

func (x *TraceletToServer_Location_Gnss) GetGroundSpeed() float64 {
	if x != nil {
		return x.GroundSpeed
	}
	return 0
}

type TraceletToServer_Location_Uwb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UWB location valid. If false, the other fields are not valid
	Valid bool `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	// location of tracelet in space
	// Units: [m], can be negative. Resolution 0.1m
	X float64 `protobuf:"fixed64,2,opt,name=x,proto3" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,3,opt,name=y,proto3" json:"y,omitempty"`
	Z float64 `protobuf:"fixed64,4,opt,name=z,proto3" json:"z,omitempty"`
	// Site ID
	// a 16 bit unsigned value
	SiteId uint32 `protobuf:"varint,5,opt,name=site_id,json=siteId,proto3" json:"site_id,omitempty"`
	// Location signature
	// can be used to validate the received location
	LocationSignature uint64 `protobuf:"fixed64,6,opt,name=location_signature,json=locationSignature,proto3" json:"location_signature,omitempty"`
	// horizontal accuracy in [m]
	Eph float64 `protobuf:"fixed64,7,opt,name=eph,proto3" json:"eph,omitempty"`
	// type of fix
	// 0 = invalid, 1 = UWB/IMU, 2 - IMU only
	FixType int32 `protobuf:"varint,8,opt,name=fix_type,json=fixType,proto3" json:"fix_type,omitempty"`
	// heading of motion in [deg]
	// relative to site coordinate system, counterclockwise, 0 in direction of pos. x axis
	HeadMotion float64 `protobuf:"fixed64,9,opt,name=head_motion,json=headMotion,proto3" json:"head_motion,omitempty"`
	// heading of vehicle in [deg] - future extension
	HeadVehicle float64 `protobuf:"fixed64,10,opt,name=head_vehicle,json=headVehicle,proto3" json:"head_vehicle,omitempty"`
	// heading valid (bit 0=motion valid, 1=vehicle valid))
	HeadValid uint32 `protobuf:"varint,11,opt,name=head_valid,json=headValid,proto3" json:"head_valid,omitempty"`
	// heading precision in [deg]
	HeadPrecision float32 `protobuf:"fixed32,13,opt,name=head_precision,json=headPrecision,proto3" json:"head_precision,omitempty"`
	// speed in [m/s]
	GroundSpeed float64 `protobuf:"fixed64,12,opt,name=ground_speed,json=groundSpeed,proto3" json:"ground_speed,omitempty"`
}

func (x *TraceletToServer_Location_Uwb) Reset() {
	*x = TraceletToServer_Location_Uwb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracelet_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceletToServer_Location_Uwb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceletToServer_Location_Uwb) ProtoMessage() {}

func (x *TraceletToServer_Location_Uwb) ProtoReflect() protoreflect.Message {
	mi := &file_tracelet_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceletToServer_Location_Uwb.ProtoReflect.Descriptor instead.
func (*TraceletToServer_Location_Uwb) Descriptor() ([]byte, []int) {
	return file_tracelet_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *TraceletToServer_Location_Uwb) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *TraceletToServer_Location_Uwb) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *TraceletToServer_Location_Uwb) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *TraceletToServer_Location_Uwb) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

func (x *TraceletToServer_Location_Uwb) GetSiteId() uint32 {
	if x != nil {
		return x.SiteId
	}
	return 0
}

func (x *TraceletToServer_Location_Uwb) GetLocationSignature() uint64 {
	if x != nil {
		return x.LocationSignature
	}
	return 0
}

func (x *TraceletToServer_Location_Uwb) GetEph() float64 {
	if x != nil {
		return x.Eph
	}
	return 0
}

func (x *TraceletToServer_Location_Uwb) GetFixType() int32 {
	if x != nil {
		return x.FixType
	}
	return 0
}

func (x *TraceletToServer_Location_Uwb) GetHeadMotion() float64 {
	if x != nil {
		return x.HeadMotion
	}
	return 0
}

func (x *TraceletToServer_Location_Uwb) GetHeadVehicle() float64 {
	if x != nil {
		return x.HeadVehicle
	}
	return 0
}

func (x *TraceletToServer_Location_Uwb) GetHeadValid() uint32 {
	if x != nil {
		return x.HeadValid
	}
	return 0
}

func (x *TraceletToServer_Location_Uwb) GetHeadPrecision() float32 {
	if x != nil {
		return x.HeadPrecision
	}
	return 0
}

func (x *TraceletToServer_Location_Uwb) GetGroundSpeed() float64 {
	if x != nil {
		return x.GroundSpeed
	}
	return 0
}

type TraceletToServer_Location_Fused struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fused location valid. If false, the other fields are not valid
	Valid bool `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	// WGS84 coordinates
	// latitude in [deg]
	Latitude float64 `protobuf:"fixed64,2,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// longitude in [deg]
	Longitude float64 `protobuf:"fixed64,3,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// altitude in [m]
	Altitude float64 `protobuf:"fixed64,4,opt,name=altitude,proto3" json:"altitude,omitempty"`
	// horizontal accuracy in [m]
	Eph float64 `protobuf:"fixed64,5,opt,name=eph,proto3" json:"eph,omitempty"`
	// heading of motion in [deg] - future extension
	HeadMotion float64 `protobuf:"fixed64,6,opt,name=head_motion,json=headMotion,proto3" json:"head_motion,omitempty"`
	// heading of vehicle in [deg] - future extension
	HeadVehicle float64 `protobuf:"fixed64,7,opt,name=head_vehicle,json=headVehicle,proto3" json:"head_vehicle,omitempty"`
	// heading valid (bit 0=motion valid, 1=vehicle valid))
	HeadValid uint32 `protobuf:"varint,8,opt,name=head_valid,json=headValid,proto3" json:"head_valid,omitempty"`
	// heading precision in [deg]
	HeadPrecision float32 `protobuf:"fixed32,10,opt,name=head_precision,json=headPrecision,proto3" json:"head_precision,omitempty"`
	// speed in [m/s]
	GroundSpeed float64 `protobuf:"fixed64,9,opt,name=ground_speed,json=groundSpeed,proto3" json:"ground_speed,omitempty"`
}

func (x *TraceletToServer_Location_Fused) Reset() {
	*x = TraceletToServer_Location_Fused{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracelet_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceletToServer_Location_Fused) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceletToServer_Location_Fused) ProtoMessage() {}

func (x *TraceletToServer_Location_Fused) ProtoReflect() protoreflect.Message {
	mi := &file_tracelet_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceletToServer_Location_Fused.ProtoReflect.Descriptor instead.
func (*TraceletToServer_Location_Fused) Descriptor() ([]byte, []int) {
	return file_tracelet_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *TraceletToServer_Location_Fused) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *TraceletToServer_Location_Fused) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *TraceletToServer_Location_Fused) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *TraceletToServer_Location_Fused) GetAltitude() float64 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *TraceletToServer_Location_Fused) GetEph() float64 {
	if x != nil {
		return x.Eph
	}
	return 0
}

func (x *TraceletToServer_Location_Fused) GetHeadMotion() float64 {
	if x != nil {
		return x.HeadMotion
	}
	return 0
}

func (x *TraceletToServer_Location_Fused) GetHeadVehicle() float64 {
	if x != nil {
		return x.HeadVehicle
	}
	return 0
}

func (x *TraceletToServer_Location_Fused) GetHeadValid() uint32 {
	if x != nil {
		return x.HeadValid
	}
	return 0
}

func (x *TraceletToServer_Location_Fused) GetHeadPrecision() float32 {
	if x != nil {
		return x.HeadPrecision
	}
	return 0
}

func (x *TraceletToServer_Location_Fused) GetGroundSpeed() float64 {
	if x != nil {
		return x.GroundSpeed
	}
	return 0
}

var File_tracelet_proto protoreflect.FileDescriptor

var file_tracelet_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x6c, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x6c, 0x65, 0x74, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xba, 0x0e, 0x0a, 0x10,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x6c, 0x65, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x2f, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x6c,
	0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x6c, 0x65, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x07,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x6c, 0x65,
	0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x1a, 0xac, 0x0b, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c,
	0x0a, 0x04, 0x67, 0x6e, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x6c, 0x65, 0x74,
	0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x47, 0x6e, 0x73, 0x73, 0x52, 0x04, 0x67, 0x6e, 0x73, 0x73, 0x12, 0x39, 0x0a, 0x03,
	0x75, 0x77, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x6c, 0x65, 0x74, 0x54, 0x6f, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55,
	0x77, 0x62, 0x52, 0x03, 0x75, 0x77, 0x62, 0x12, 0x3f, 0x0a, 0x05, 0x66, 0x75, 0x73, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x6c, 0x65,
	0x74, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x6c, 0x65, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x75, 0x73, 0x65,
	0x64, 0x52, 0x05, 0x66, 0x75, 0x73, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x6c, 0x65, 0x74, 0x54,
	0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x69, 0x6c, 0x65, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x69,
	0x6c, 0x65, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x1a, 0xde, 0x02, 0x0a, 0x04, 0x47, 0x6e, 0x73, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x70, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x65, 0x70, 0x68, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x70, 0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x65, 0x70, 0x76,
	0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x66, 0x69, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x68,
	0x65, 0x61, 0x64, 0x5f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x68, 0x65, 0x61, 0x64, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x65, 0x61, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x68, 0x65, 0x61, 0x64, 0x50, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x1a, 0xe7, 0x02, 0x0a, 0x03, 0x55, 0x77, 0x62,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x7a,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x06, 0x52, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x70, 0x68, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x65, 0x70, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69,
	0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x69,
	0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64,
	0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x76,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x68, 0x65,
	0x61, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x61,
	0x64, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68,
	0x65, 0x61, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x65, 0x61, 0x64,
	0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0d, 0x68, 0x65, 0x61, 0x64, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x1a, 0xb2, 0x02, 0x0a, 0x05, 0x46, 0x75, 0x73, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x70, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x65, 0x70, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x65,
	0x61, 0x64, 0x5f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x68, 0x65, 0x61, 0x64, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x68,
	0x65, 0x61, 0x64, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x68, 0x65, 0x61, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x68, 0x65, 0x61, 0x64, 0x50, 0x72, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x22, 0x47, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x41, 0x42, 0x5f, 0x41, 0x5f,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x41, 0x42, 0x5f, 0x42, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02,
	0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x29, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x6c, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xfb, 0x1e, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x63, 0x65, 0x6c, 0x65, 0x74,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x33, 0x0a, 0x18, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x5f, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x5f, 0x5f, 0x75, 0x77, 0x62, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x55, 0x77, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x12, 0x3b, 0x0a, 0x1c,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x5f, 0x5f,
	0x75, 0x77, 0x62, 0x5f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x15, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x55, 0x77,
	0x62, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x12, 0x37, 0x0a, 0x1a, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x5f, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x5f, 0x5f, 0x75, 0x77, 0x62,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x55, 0x77, 0x62, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x35, 0x0a, 0x19, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x5f, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x5f, 0x5f, 0x67, 0x6e, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x47, 0x6e, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x12, 0x3b, 0x0a, 0x1c, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x5f, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x5f, 0x5f, 0x75, 0x62, 0x78,
	0x5f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x15, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x55, 0x62, 0x78, 0x46, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x12, 0x37, 0x0a, 0x1a, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x5f, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x5f, 0x5f, 0x75, 0x62, 0x78, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x55, 0x62, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x3f, 0x0a, 0x1e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x5f, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75,
	0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6e, 0x74, 0x70, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x6e, 0x74, 0x70, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x70,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x66, 0x72,
	0x65, 0x65, 0x48, 0x65, 0x61, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x77,
	0x69, 0x66, 0x69, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x5f, 0x64, 0x62, 0x6d, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x77, 0x69, 0x66, 0x69, 0x52, 0x73, 0x73, 0x69, 0x44, 0x62, 0x6d, 0x12,
	0x17, 0x0a, 0x07, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x61, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x77, 0x69, 0x66, 0x69, 0x41, 0x70, 0x12, 0x3a, 0x0a, 0x1c, 0x67, 0x6e, 0x73, 0x73,
	0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x61, 0x74, 0x73, 0x5f, 0x5f, 0x5f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x5f, 0x5f, 0x67, 0x70, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14,
	0x67, 0x6e, 0x73, 0x73, 0x4e, 0x75, 0x6d, 0x53, 0x61, 0x74, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x47, 0x70, 0x73, 0x12, 0x42, 0x0a, 0x20, 0x67, 0x6e, 0x73, 0x73, 0x5f, 0x6e, 0x75, 0x6d,
	0x5f, 0x73, 0x61, 0x74, 0x73, 0x5f, 0x5f, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x5f,
	0x5f, 0x67, 0x6c, 0x6f, 0x6e, 0x61, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18,
	0x67, 0x6e, 0x73, 0x73, 0x4e, 0x75, 0x6d, 0x53, 0x61, 0x74, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x47, 0x6c, 0x6f, 0x6e, 0x61, 0x73, 0x73, 0x12, 0x40, 0x0a, 0x1f, 0x67, 0x6e, 0x73, 0x73,
	0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x61, 0x74, 0x73, 0x5f, 0x5f, 0x5f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x5f, 0x5f, 0x62, 0x65, 0x69, 0x64, 0x6f, 0x75, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x17, 0x67, 0x6e, 0x73, 0x73, 0x4e, 0x75, 0x6d, 0x53, 0x61, 0x74, 0x73, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x42, 0x65, 0x69, 0x64, 0x6f, 0x75, 0x12, 0x42, 0x0a, 0x20, 0x67, 0x6e,
	0x73, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x61, 0x74, 0x73, 0x5f, 0x5f, 0x5f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x5f, 0x5f, 0x67, 0x61, 0x6c, 0x69, 0x6c, 0x65, 0x6f, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x67, 0x6e, 0x73, 0x73, 0x4e, 0x75, 0x6d, 0x53, 0x61, 0x74,
	0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x61, 0x6c, 0x69, 0x6c, 0x65, 0x6f, 0x12, 0x3c,
	0x0a, 0x1d, 0x67, 0x6e, 0x73, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x61, 0x74, 0x73, 0x5f,
	0x5f, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x5f, 0x5f, 0x71, 0x7a, 0x73, 0x73, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x67, 0x6e, 0x73, 0x73, 0x4e, 0x75, 0x6d, 0x53, 0x61,
	0x74, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x51, 0x7a, 0x73, 0x73, 0x12, 0x43, 0x0a, 0x21,
	0x67, 0x6e, 0x73, 0x73, 0x5f, 0x75, 0x61, 0x72, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x5f, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x5f, 0x5f, 0x68, 0x77, 0x5f, 0x66, 0x69, 0x66,
	0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x67, 0x6e, 0x73, 0x73, 0x55, 0x61, 0x72,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x54, 0x79, 0x70, 0x65, 0x48, 0x77, 0x46, 0x69, 0x66,
	0x6f, 0x12, 0x45, 0x0a, 0x22, 0x67, 0x6e, 0x73, 0x73, 0x5f, 0x75, 0x61, 0x72, 0x74, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x5f, 0x5f, 0x62,
	0x75, 0x66, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x67,
	0x6e, 0x73, 0x73, 0x55, 0x61, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x75, 0x66, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x3e, 0x0a, 0x1e, 0x67, 0x6e, 0x73, 0x73,
	0x5f, 0x75, 0x61, 0x72, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x5f, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x5f, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x16, 0x67, 0x6e, 0x73, 0x73, 0x55, 0x61, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x61, 0x72, 0x12, 0x1e, 0x0a, 0x0b, 0x67, 0x6e, 0x73, 0x73,
	0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x76, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x67,
	0x6e, 0x73, 0x73, 0x4e, 0x75, 0x6d, 0x53, 0x76, 0x12, 0x2f, 0x0a, 0x16, 0x67, 0x6e, 0x73, 0x73,
	0x5f, 0x70, 0x67, 0x61, 0x5f, 0x5f, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x5f, 0x5f, 0x72,
	0x66, 0x31, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x67, 0x6e, 0x73, 0x73, 0x50, 0x67,
	0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x66, 0x31, 0x12, 0x2f, 0x0a, 0x16, 0x67, 0x6e, 0x73,
	0x73, 0x5f, 0x70, 0x67, 0x61, 0x5f, 0x5f, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x5f, 0x5f,
	0x72, 0x66, 0x32, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x67, 0x6e, 0x73, 0x73, 0x50,
	0x67, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x66, 0x32, 0x12, 0x40, 0x0a, 0x1d, 0x75, 0x62,
	0x78, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x19, 0x75, 0x62, 0x78, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x46, 0x75, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x2b, 0x0a, 0x12,
	0x75, 0x62, 0x78, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x75, 0x62, 0x78, 0x52, 0x65, 0x66,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x74, 0x72,
	0x69, 0x70, 0x5f, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6e, 0x74, 0x72, 0x69, 0x70, 0x49, 0x73, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x27, 0x6e, 0x74, 0x72, 0x69, 0x70,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x5f, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x5f, 0x5f, 0x73, 0x65,
	0x6e, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1f, 0x6e, 0x74, 0x72, 0x69, 0x70, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x79, 0x74, 0x65, 0x73, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x50, 0x0a, 0x27, 0x6e, 0x74, 0x72,
	0x69, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x5f, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x5f, 0x5f,
	0x72, 0x65, 0x63, 0x76, 0x18, 0x25, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1f, 0x6e, 0x74, 0x72, 0x69,
	0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x79, 0x74, 0x65, 0x73, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x76, 0x12, 0x2f, 0x0a, 0x14, 0x75,
	0x77, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x65,
	0x6e, 0x75, 0x6d, 0x18, 0x26, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x75, 0x77, 0x62, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x31, 0x0a, 0x15,
	0x75, 0x77, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x27, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x75, 0x77, 0x62,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x3e, 0x0a, 0x1c, 0x75, 0x77, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x75, 0x77, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x28, 0x0a, 0x10, 0x6c, 0x73, 0x69, 0x5f, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x73, 0x69, 0x49, 0x73,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x73, 0x69,
	0x5f, 0x61, 0x63, 0x6b, 0x73, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x6c, 0x73, 0x69, 0x41, 0x63, 0x6b, 0x73, 0x4d, 0x69, 0x73, 0x73, 0x65,
	0x64, 0x12, 0x2b, 0x0a, 0x12, 0x75, 0x62, 0x78, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x75,
	0x62, 0x78, 0x42, 0x6f, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x62, 0x78, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x62, 0x78, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x52, 0x0a, 0x29, 0x75, 0x62, 0x78, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x66, 0x75,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x5f, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x5f, 0x5f, 0x77, 0x74, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x1f, 0x75, 0x62, 0x78, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x46, 0x75, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x57, 0x74, 0x49,
	0x6e, 0x69, 0x74, 0x12, 0x52, 0x0a, 0x29, 0x75, 0x62, 0x78, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x5f, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f,
	0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x5f, 0x5f, 0x6d, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x67,
	0x18, 0x2e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1f, 0x75, 0x62, 0x78, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x46, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x4d, 0x6e, 0x74, 0x41, 0x6c, 0x67, 0x12, 0x54, 0x0a, 0x2a, 0x75, 0x62, 0x78, 0x5f, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x5f, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x5f, 0x5f, 0x69, 0x6e, 0x73,
	0x5f, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x20, 0x75, 0x62, 0x78,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x46, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x54, 0x0a,
	0x2a, 0x75, 0x62, 0x78, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x66, 0x75, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x5f, 0x5f, 0x69, 0x6d, 0x75, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x30, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x20, 0x75, 0x62, 0x78, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x46, 0x75, 0x73, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6d, 0x75, 0x49,
	0x6e, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x66, 0x75,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x46, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x77, 0x62, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x73,
	0x61, 0x74, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x77, 0x62, 0x4e, 0x75,
	0x6d, 0x53, 0x61, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x17, 0x75, 0x77, 0x62, 0x5f, 0x73, 0x61, 0x74,
	0x5f, 0x31, 0x5f, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x5f, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x75, 0x77, 0x62, 0x53, 0x61, 0x74, 0x31, 0x54,
	0x79, 0x70, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x30, 0x0a, 0x17, 0x75, 0x77, 0x62, 0x5f, 0x73,
	0x61, 0x74, 0x5f, 0x31, 0x5f, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x5f, 0x5f, 0x72, 0x73,
	0x73, 0x69, 0x18, 0x34, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x75, 0x77, 0x62, 0x53, 0x61, 0x74,
	0x31, 0x54, 0x79, 0x70, 0x65, 0x52, 0x73, 0x73, 0x69, 0x12, 0x30, 0x0a, 0x17, 0x75, 0x77, 0x62,
	0x5f, 0x73, 0x61, 0x74, 0x5f, 0x31, 0x5f, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x5f, 0x5f,
	0x6e, 0x6c, 0x6f, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x75, 0x77, 0x62, 0x53,
	0x61, 0x74, 0x31, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x6c, 0x6f, 0x73, 0x12, 0x30, 0x0a, 0x17, 0x75,
	0x77, 0x62, 0x5f, 0x73, 0x61, 0x74, 0x5f, 0x32, 0x5f, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x5f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x36, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x75, 0x77,
	0x62, 0x53, 0x61, 0x74, 0x32, 0x54, 0x79, 0x70, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x30, 0x0a,
	0x17, 0x75, 0x77, 0x62, 0x5f, 0x73, 0x61, 0x74, 0x5f, 0x32, 0x5f, 0x5f, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x5f, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0x37, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x75, 0x77, 0x62, 0x53, 0x61, 0x74, 0x32, 0x54, 0x79, 0x70, 0x65, 0x52, 0x73, 0x73, 0x69, 0x12,
	0x30, 0x0a, 0x17, 0x75, 0x77, 0x62, 0x5f, 0x73, 0x61, 0x74, 0x5f, 0x32, 0x5f, 0x5f, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x5f, 0x5f, 0x6e, 0x6c, 0x6f, 0x73, 0x18, 0x38, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x75, 0x77, 0x62, 0x53, 0x61, 0x74, 0x32, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x6c, 0x6f,
	0x73, 0x12, 0x30, 0x0a, 0x17, 0x75, 0x77, 0x62, 0x5f, 0x73, 0x61, 0x74, 0x5f, 0x33, 0x5f, 0x5f,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x5f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x39, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x75, 0x77, 0x62, 0x53, 0x61, 0x74, 0x33, 0x54, 0x79, 0x70, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x30, 0x0a, 0x17, 0x75, 0x77, 0x62, 0x5f, 0x73, 0x61, 0x74, 0x5f, 0x33,
	0x5f, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x5f, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0x3a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x75, 0x77, 0x62, 0x53, 0x61, 0x74, 0x33, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x73, 0x73, 0x69, 0x12, 0x30, 0x0a, 0x17, 0x75, 0x77, 0x62, 0x5f, 0x73, 0x61, 0x74,
	0x5f, 0x33, 0x5f, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x5f, 0x5f, 0x6e, 0x6c, 0x6f, 0x73,
	0x18, 0x3b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x75, 0x77, 0x62, 0x53, 0x61, 0x74, 0x33, 0x54,
	0x79, 0x70, 0x65, 0x4e, 0x6c, 0x6f, 0x73, 0x12, 0x30, 0x0a, 0x17, 0x75, 0x77, 0x62, 0x5f, 0x73,
	0x61, 0x74, 0x5f, 0x34, 0x5f, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x5f, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x75, 0x77, 0x62, 0x53, 0x61, 0x74,
	0x34, 0x54, 0x79, 0x70, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x30, 0x0a, 0x17, 0x75, 0x77, 0x62,
	0x5f, 0x73, 0x61, 0x74, 0x5f, 0x34, 0x5f, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x5f, 0x5f,
	0x72, 0x73, 0x73, 0x69, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x75, 0x77, 0x62, 0x53,
	0x61, 0x74, 0x34, 0x54, 0x79, 0x70, 0x65, 0x52, 0x73, 0x73, 0x69, 0x12, 0x30, 0x0a, 0x17, 0x75,
	0x77, 0x62, 0x5f, 0x73, 0x61, 0x74, 0x5f, 0x34, 0x5f, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x5f, 0x5f, 0x6e, 0x6c, 0x6f, 0x73, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x75, 0x77,
	0x62, 0x53, 0x61, 0x74, 0x34, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x6c, 0x6f, 0x73, 0x12, 0x30, 0x0a,
	0x17, 0x75, 0x77, 0x62, 0x5f, 0x73, 0x61, 0x74, 0x5f, 0x35, 0x5f, 0x5f, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x5f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x75, 0x77, 0x62, 0x53, 0x61, 0x74, 0x35, 0x54, 0x79, 0x70, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x30, 0x0a, 0x17, 0x75, 0x77, 0x62, 0x5f, 0x73, 0x61, 0x74, 0x5f, 0x35, 0x5f, 0x5f, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x5f, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0x40, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x75, 0x77, 0x62, 0x53, 0x61, 0x74, 0x35, 0x54, 0x79, 0x70, 0x65, 0x52, 0x73, 0x73,
	0x69, 0x12, 0x30, 0x0a, 0x17, 0x75, 0x77, 0x62, 0x5f, 0x73, 0x61, 0x74, 0x5f, 0x35, 0x5f, 0x5f,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x5f, 0x5f, 0x6e, 0x6c, 0x6f, 0x73, 0x18, 0x41, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x75, 0x77, 0x62, 0x53, 0x61, 0x74, 0x35, 0x54, 0x79, 0x70, 0x65, 0x4e,
	0x6c, 0x6f, 0x73, 0x12, 0x30, 0x0a, 0x17, 0x75, 0x77, 0x62, 0x5f, 0x73, 0x61, 0x74, 0x5f, 0x36,
	0x5f, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x5f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x42,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x75, 0x77, 0x62, 0x53, 0x61, 0x74, 0x36, 0x54, 0x79, 0x70,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x30, 0x0a, 0x17, 0x75, 0x77, 0x62, 0x5f, 0x73, 0x61, 0x74,
	0x5f, 0x36, 0x5f, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x5f, 0x5f, 0x72, 0x73, 0x73, 0x69,
	0x18, 0x43, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x75, 0x77, 0x62, 0x53, 0x61, 0x74, 0x36, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x73, 0x73, 0x69, 0x12, 0x30, 0x0a, 0x17, 0x75, 0x77, 0x62, 0x5f, 0x73,
	0x61, 0x74, 0x5f, 0x36, 0x5f, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x5f, 0x5f, 0x6e, 0x6c,
	0x6f, 0x73, 0x18, 0x44, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x75, 0x77, 0x62, 0x53, 0x61, 0x74,
	0x36, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x6c, 0x6f, 0x73, 0x12, 0x36, 0x0a, 0x1a, 0x63, 0x70, 0x75,
	0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x5f, 0x5f,
	0x63, 0x70, 0x75, 0x5f, 0x5f, 0x5f, 0x30, 0x18, 0x45, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x63,
	0x70, 0x75, 0x4c, 0x6f, 0x61, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x70, 0x75,
	0x30, 0x12, 0x36, 0x0a, 0x1a, 0x63, 0x70, 0x75, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x5f, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x5f, 0x5f, 0x31, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x63, 0x70, 0x75, 0x4c, 0x6f, 0x61, 0x64, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x70, 0x75, 0x31, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x70, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x47, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73,
	0x6c, 0x65, 0x65, 0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x3c, 0x0a, 0x1b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63,
	0x75, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x49, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x43, 0x75, 0x74, 0x55, 0x6e, 0x69, 0x78, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x3b,
	0x0a, 0x1c, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x5f, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x5f, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x6f, 0x6e, 0x18, 0x50,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x72, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x1d, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x5f, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x5f, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x18, 0x51, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x16, 0x72, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x12, 0x43, 0x0a, 0x20, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x5f, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x77, 0x64, 0x18, 0x52,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x72, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x77, 0x64, 0x12,
	0x39, 0x0a, 0x1b, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x5f,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x5f, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x77, 0x64, 0x18, 0x53,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x72, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x77, 0x64, 0x12, 0x31, 0x0a, 0x17, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x5f, 0x5f, 0x77, 0x64, 0x18, 0x54, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x57, 0x64, 0x12, 0x3d, 0x0a,
	0x1d, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x5f, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x5f, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x6e, 0x6f, 0x75, 0x74, 0x18, 0x55,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x72, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x6e, 0x6f, 0x75, 0x74, 0x12, 0x3b, 0x0a, 0x1c,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x5f, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x5f, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x56, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x15, 0x72, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x77, 0x62,
	0x5f, 0x74, 0x61, 0x63, 0x68, 0x6f, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x57, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x75, 0x77, 0x62, 0x54, 0x61, 0x63, 0x68, 0x6f, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x6c, 0x65, 0x74, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tracelet_proto_rawDescOnce sync.Once
	file_tracelet_proto_rawDescData = file_tracelet_proto_rawDesc
)

func file_tracelet_proto_rawDescGZIP() []byte {
	file_tracelet_proto_rawDescOnce.Do(func() {
		file_tracelet_proto_rawDescData = protoimpl.X.CompressGZIP(file_tracelet_proto_rawDescData)
	})
	return file_tracelet_proto_rawDescData
}

var file_tracelet_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tracelet_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_tracelet_proto_goTypes = []interface{}{
	(TraceletToServer_Location_Direction)(0), // 0: tracelet.TraceletToServer.Location.Direction
	(*TraceletToServer)(nil),                 // 1: tracelet.TraceletToServer
	(*TraceletMessageID)(nil),                // 2: tracelet.TraceletMessageID
	(*TraceletMetrics)(nil),                  // 3: tracelet.TraceletMetrics
	(*TraceletToServer_Location)(nil),        // 4: tracelet.TraceletToServer.Location
	(*TraceletToServer_Location_Gnss)(nil),   // 5: tracelet.TraceletToServer.Location.Gnss
	(*TraceletToServer_Location_Uwb)(nil),    // 6: tracelet.TraceletToServer.Location.Uwb
	(*TraceletToServer_Location_Fused)(nil),  // 7: tracelet.TraceletToServer.Location.Fused
	(*timestamppb.Timestamp)(nil),            // 8: google.protobuf.Timestamp
}
var file_tracelet_proto_depIdxs = []int32{
	2, // 0: tracelet.TraceletToServer.uuid:type_name -> tracelet.TraceletMessageID
	8, // 1: tracelet.TraceletToServer.delivery_ts:type_name -> google.protobuf.Timestamp
	4, // 2: tracelet.TraceletToServer.location:type_name -> tracelet.TraceletToServer.Location
	3, // 3: tracelet.TraceletToServer.metrics:type_name -> tracelet.TraceletMetrics
	5, // 4: tracelet.TraceletToServer.Location.gnss:type_name -> tracelet.TraceletToServer.Location.Gnss
	6, // 5: tracelet.TraceletToServer.Location.uwb:type_name -> tracelet.TraceletToServer.Location.Uwb
	7, // 6: tracelet.TraceletToServer.Location.fused:type_name -> tracelet.TraceletToServer.Location.Fused
	0, // 7: tracelet.TraceletToServer.Location.direction:type_name -> tracelet.TraceletToServer.Location.Direction
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_tracelet_proto_init() }
func file_tracelet_proto_init() {
	if File_tracelet_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tracelet_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceletToServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tracelet_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceletMessageID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tracelet_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceletMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tracelet_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceletToServer_Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tracelet_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceletToServer_Location_Gnss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tracelet_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceletToServer_Location_Uwb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tracelet_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceletToServer_Location_Fused); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tracelet_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*TraceletToServer_Location_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tracelet_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tracelet_proto_goTypes,
		DependencyIndexes: file_tracelet_proto_depIdxs,
		EnumInfos:         file_tracelet_proto_enumTypes,
		MessageInfos:      file_tracelet_proto_msgTypes,
	}.Build()
	File_tracelet_proto = out.File
	file_tracelet_proto_rawDesc = nil
	file_tracelet_proto_goTypes = nil
	file_tracelet_proto_depIdxs = nil
}
