// SPDX-License-Identifier: Apache-2.0
// SPDX-FileCopyrightText: (c) 2024 Ci4Rail GmbH

// Protobuf definitiions for Ci4Rail Tracelet, e.g. SIO02 or SIO03.
// It defines the messages exchanged between the Tracelet and the localization
// system. The messages are transported over UDP, with handshaking
//
// The tracelet is the UDP client and the localization system is the UDP server.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.0--rc2
// source: tracelet.proto

package tracelet

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TraceletToServer_Location_Direction int32

const (
	// Invalid direction
	TraceletToServer_Location_NO_DIRECTION TraceletToServer_Location_Direction = 0
	// CAB A
	TraceletToServer_Location_CAB_A_DIRECTION TraceletToServer_Location_Direction = 1
	// CAB B
	TraceletToServer_Location_CAB_B_DIRECTION TraceletToServer_Location_Direction = 2
)

// Enum value maps for TraceletToServer_Location_Direction.
var (
	TraceletToServer_Location_Direction_name = map[int32]string{
		0: "NO_DIRECTION",
		1: "CAB_A_DIRECTION",
		2: "CAB_B_DIRECTION",
	}
	TraceletToServer_Location_Direction_value = map[string]int32{
		"NO_DIRECTION":    0,
		"CAB_A_DIRECTION": 1,
		"CAB_B_DIRECTION": 2,
	}
)

func (x TraceletToServer_Location_Direction) Enum() *TraceletToServer_Location_Direction {
	p := new(TraceletToServer_Location_Direction)
	*p = x
	return p
}

func (x TraceletToServer_Location_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TraceletToServer_Location_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_tracelet_proto_enumTypes[0].Descriptor()
}

func (TraceletToServer_Location_Direction) Type() protoreflect.EnumType {
	return &file_tracelet_proto_enumTypes[0]
}

func (x TraceletToServer_Location_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TraceletToServer_Location_Direction.Descriptor instead.
func (TraceletToServer_Location_Direction) EnumDescriptor() ([]byte, []int) {
	return file_tracelet_proto_rawDescGZIP(), []int{0, 0, 0}
}

type TraceletToServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Currently not used, always 0
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// timestamp when the message was sent by the tracelet
	// If the Tracelet has no valid time, receive_ts is set to 1970-Jan-1 00:00
	// UTC
	DeliveryTs *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=delivery_ts,json=deliveryTs,proto3" json:"delivery_ts,omitempty"`
	// tracelet ID as provisioned in tracelet. Could be a vehicle ID
	TraceletId string `protobuf:"bytes,3,opt,name=tracelet_id,json=traceletId,proto3" json:"tracelet_id,omitempty"`
	// status of the tracelet ignition signal
	Ignition bool `protobuf:"varint,4,opt,name=ignition,proto3" json:"ignition,omitempty"`
	// Types that are assignable to Type:
	//
	//	*TraceletToServer_Location_
	Type    isTraceletToServer_Type `protobuf_oneof:"type"`
	Metrics *TraceletMetrics        `protobuf:"bytes,10,opt,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *TraceletToServer) Reset() {
	*x = TraceletToServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracelet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceletToServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceletToServer) ProtoMessage() {}

func (x *TraceletToServer) ProtoReflect() protoreflect.Message {
	mi := &file_tracelet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceletToServer.ProtoReflect.Descriptor instead.
func (*TraceletToServer) Descriptor() ([]byte, []int) {
	return file_tracelet_proto_rawDescGZIP(), []int{0}
}

func (x *TraceletToServer) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TraceletToServer) GetDeliveryTs() *timestamppb.Timestamp {
	if x != nil {
		return x.DeliveryTs
	}
	return nil
}

func (x *TraceletToServer) GetTraceletId() string {
	if x != nil {
		return x.TraceletId
	}
	return ""
}

func (x *TraceletToServer) GetIgnition() bool {
	if x != nil {
		return x.Ignition
	}
	return false
}

func (m *TraceletToServer) GetType() isTraceletToServer_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *TraceletToServer) GetLocation() *TraceletToServer_Location {
	if x, ok := x.GetType().(*TraceletToServer_Location_); ok {
		return x.Location
	}
	return nil
}

func (x *TraceletToServer) GetMetrics() *TraceletMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type isTraceletToServer_Type interface {
	isTraceletToServer_Type()
}

type TraceletToServer_Location_ struct {
	Location *TraceletToServer_Location `protobuf:"bytes,5,opt,name=location,proto3,oneof"` // periodically sent by the tracelet
}

func (*TraceletToServer_Location_) isTraceletToServer_Type() {}

// Tracelet metrics. May be sent together with the location message
type TraceletMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WifiRssiDbm                  float64 `protobuf:"fixed64,1,opt,name=wifi_rssi_dbm,json=wifiRssiDbm,proto3" json:"wifi_rssi_dbm,omitempty"`                                                   // Wifi RSSI (dBm), NAN if not connected
	WifiAp                       int64   `protobuf:"varint,2,opt,name=wifi_ap,json=wifiAp,proto3" json:"wifi_ap,omitempty"`                                                                     // Last two bytes of connected AP MAC address as a number
	GnssFixTypeEnum              int64   `protobuf:"varint,3,opt,name=gnss_fix_type_enum,json=gnssFixTypeEnum,proto3" json:"gnss_fix_type_enum,omitempty"`                                      // GNSS fix type (0-7)
	GnssEphMeters                float64 `protobuf:"fixed64,4,opt,name=gnss_eph_meters,json=gnssEphMeters,proto3" json:"gnss_eph_meters,omitempty"`                                             // GNSS horizontal accuracy in meters
	GnssNumSats__System__Gps     int64   `protobuf:"varint,5,opt,name=gnss_num_sats___system___gps,json=gnssNumSatsSystemGps,proto3" json:"gnss_num_sats___system___gps,omitempty"`             // number of satellites in view (GPS)
	GnssNumSats__System__Glonass int64   `protobuf:"varint,6,opt,name=gnss_num_sats___system___glonass,json=gnssNumSatsSystemGlonass,proto3" json:"gnss_num_sats___system___glonass,omitempty"` // number of satellites in view (GLONASS)
}

func (x *TraceletMetrics) Reset() {
	*x = TraceletMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracelet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceletMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceletMetrics) ProtoMessage() {}

func (x *TraceletMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_tracelet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceletMetrics.ProtoReflect.Descriptor instead.
func (*TraceletMetrics) Descriptor() ([]byte, []int) {
	return file_tracelet_proto_rawDescGZIP(), []int{1}
}

func (x *TraceletMetrics) GetWifiRssiDbm() float64 {
	if x != nil {
		return x.WifiRssiDbm
	}
	return 0
}

func (x *TraceletMetrics) GetWifiAp() int64 {
	if x != nil {
		return x.WifiAp
	}
	return 0
}

func (x *TraceletMetrics) GetGnssFixTypeEnum() int64 {
	if x != nil {
		return x.GnssFixTypeEnum
	}
	return 0
}

func (x *TraceletMetrics) GetGnssEphMeters() float64 {
	if x != nil {
		return x.GnssEphMeters
	}
	return 0
}

func (x *TraceletMetrics) GetGnssNumSats__System__Gps() int64 {
	if x != nil {
		return x.GnssNumSats__System__Gps
	}
	return 0
}

func (x *TraceletMetrics) GetGnssNumSats__System__Glonass() int64 {
	if x != nil {
		return x.GnssNumSats__System__Glonass
	}
	return 0
}

// Sub-message sent periodically sent by the tracelet
type TraceletToServer_Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data from GNSS subsystem
	Gnss *TraceletToServer_Location_Gnss `protobuf:"bytes,1,opt,name=gnss,proto3" json:"gnss,omitempty"`
	// Data from UWB subsystem
	Uwb *TraceletToServer_Location_Uwb `protobuf:"bytes,2,opt,name=uwb,proto3" json:"uwb,omitempty"`
	// Fused location
	Fused *TraceletToServer_Location_Fused `protobuf:"bytes,7,opt,name=fused,proto3" json:"fused,omitempty"`
	// Driving direction of the vehicle
	Direction TraceletToServer_Location_Direction `protobuf:"varint,3,opt,name=direction,proto3,enum=tracelet.TraceletToServer_Location_Direction" json:"direction,omitempty"`
	// Vehicle Speed in [m/s]
	Speed float64 `protobuf:"fixed64,4,opt,name=speed,proto3" json:"speed,omitempty"`
	// Vehicle Mileage in [km]
	Mileage int32 `protobuf:"varint,5,opt,name=mileage,proto3" json:"mileage,omitempty"`
	// Current Tracelet Temperature in [Â°C]
	Temperature float64 `protobuf:"fixed64,6,opt,name=temperature,proto3" json:"temperature,omitempty"`
	// Acceleration data
	Acceleration *TraceletToServer_Location_Acceleration `protobuf:"bytes,8,opt,name=acceleration,proto3" json:"acceleration,omitempty"`
}

func (x *TraceletToServer_Location) Reset() {
	*x = TraceletToServer_Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracelet_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceletToServer_Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceletToServer_Location) ProtoMessage() {}

func (x *TraceletToServer_Location) ProtoReflect() protoreflect.Message {
	mi := &file_tracelet_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceletToServer_Location.ProtoReflect.Descriptor instead.
func (*TraceletToServer_Location) Descriptor() ([]byte, []int) {
	return file_tracelet_proto_rawDescGZIP(), []int{0, 0}
}

func (x *TraceletToServer_Location) GetGnss() *TraceletToServer_Location_Gnss {
	if x != nil {
		return x.Gnss
	}
	return nil
}

func (x *TraceletToServer_Location) GetUwb() *TraceletToServer_Location_Uwb {
	if x != nil {
		return x.Uwb
	}
	return nil
}

func (x *TraceletToServer_Location) GetFused() *TraceletToServer_Location_Fused {
	if x != nil {
		return x.Fused
	}
	return nil
}

func (x *TraceletToServer_Location) GetDirection() TraceletToServer_Location_Direction {
	if x != nil {
		return x.Direction
	}
	return TraceletToServer_Location_NO_DIRECTION
}

func (x *TraceletToServer_Location) GetSpeed() float64 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *TraceletToServer_Location) GetMileage() int32 {
	if x != nil {
		return x.Mileage
	}
	return 0
}

func (x *TraceletToServer_Location) GetTemperature() float64 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *TraceletToServer_Location) GetAcceleration() *TraceletToServer_Location_Acceleration {
	if x != nil {
		return x.Acceleration
	}
	return nil
}

type TraceletToServer_Location_Gnss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// GNSS location valid. If false, the other fields are not valid
	Valid bool `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	// WGS84 coordinates
	// latitude in [deg]
	Latitude float64 `protobuf:"fixed64,2,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// longitude in [deg]
	Longitude float64 `protobuf:"fixed64,3,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// altitude in [m]
	Altitude float64 `protobuf:"fixed64,4,opt,name=altitude,proto3" json:"altitude,omitempty"`
	// horizontal accuracy in [m]
	Eph float64 `protobuf:"fixed64,5,opt,name=eph,proto3" json:"eph,omitempty"`
	// vertical accuracy in [m]
	Epv float64 `protobuf:"fixed64,6,opt,name=epv,proto3" json:"epv,omitempty"`
	// type of fix
	// 0 = invalid, 1 = GPS fix, 2 = DGPS fix, 3 = PPS fix, 4 = Real Time Kinematic,
	// 5 = Float RTK, 6 = estimated, 7 = Manual input mode, 8 = Simulation mode
	FixType int32 `protobuf:"varint,7,opt,name=fix_type,json=fixType,proto3" json:"fix_type,omitempty"`
	// heading of motion in [deg], relative to true north
	HeadMotion float64 `protobuf:"fixed64,8,opt,name=head_motion,json=headMotion,proto3" json:"head_motion,omitempty"`
	// heading of vehicle in [deg], relative to true north
	HeadVehicle float64 `protobuf:"fixed64,9,opt,name=head_vehicle,json=headVehicle,proto3" json:"head_vehicle,omitempty"`
	// heading valid (bit 0=motion valid, 1=vehicle valid))
	HeadValid uint32 `protobuf:"varint,10,opt,name=head_valid,json=headValid,proto3" json:"head_valid,omitempty"`
	// speed in [m/s]
	GroundSpeed float64 `protobuf:"fixed64,11,opt,name=ground_speed,json=groundSpeed,proto3" json:"ground_speed,omitempty"`
}

func (x *TraceletToServer_Location_Gnss) Reset() {
	*x = TraceletToServer_Location_Gnss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracelet_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceletToServer_Location_Gnss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceletToServer_Location_Gnss) ProtoMessage() {}

func (x *TraceletToServer_Location_Gnss) ProtoReflect() protoreflect.Message {
	mi := &file_tracelet_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceletToServer_Location_Gnss.ProtoReflect.Descriptor instead.
func (*TraceletToServer_Location_Gnss) Descriptor() ([]byte, []int) {
	return file_tracelet_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *TraceletToServer_Location_Gnss) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *TraceletToServer_Location_Gnss) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *TraceletToServer_Location_Gnss) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *TraceletToServer_Location_Gnss) GetAltitude() float64 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *TraceletToServer_Location_Gnss) GetEph() float64 {
	if x != nil {
		return x.Eph
	}
	return 0
}

func (x *TraceletToServer_Location_Gnss) GetEpv() float64 {
	if x != nil {
		return x.Epv
	}
	return 0
}

func (x *TraceletToServer_Location_Gnss) GetFixType() int32 {
	if x != nil {
		return x.FixType
	}
	return 0
}

func (x *TraceletToServer_Location_Gnss) GetHeadMotion() float64 {
	if x != nil {
		return x.HeadMotion
	}
	return 0
}

func (x *TraceletToServer_Location_Gnss) GetHeadVehicle() float64 {
	if x != nil {
		return x.HeadVehicle
	}
	return 0
}

func (x *TraceletToServer_Location_Gnss) GetHeadValid() uint32 {
	if x != nil {
		return x.HeadValid
	}
	return 0
}

func (x *TraceletToServer_Location_Gnss) GetGroundSpeed() float64 {
	if x != nil {
		return x.GroundSpeed
	}
	return 0
}

type TraceletToServer_Location_Uwb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UWB location valid. If false, the other fields are not valid
	Valid bool `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	// location of tracelet in space
	// Units: [m], can be negative. Resolution 0.1m
	X float64 `protobuf:"fixed64,2,opt,name=x,proto3" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,3,opt,name=y,proto3" json:"y,omitempty"`
	Z float64 `protobuf:"fixed64,4,opt,name=z,proto3" json:"z,omitempty"`
	// Site ID
	// a 16 bit unsigned value
	SiteId uint32 `protobuf:"varint,5,opt,name=site_id,json=siteId,proto3" json:"site_id,omitempty"`
	// Location signature
	// can be used to validate the received location
	LocationSignature uint64 `protobuf:"fixed64,6,opt,name=location_signature,json=locationSignature,proto3" json:"location_signature,omitempty"`
	// horizontal accuracy in [m]
	Eph float64 `protobuf:"fixed64,7,opt,name=eph,proto3" json:"eph,omitempty"`
	// type of fix
	// 0 = invalid, 1 = UWB/IMU, 2 - IMU only
	FixType int32 `protobuf:"varint,8,opt,name=fix_type,json=fixType,proto3" json:"fix_type,omitempty"`
	// heading of motion in [deg]
	// relative to site coordinate system, counterclockwise, 0 in direction of pos. x axis
	HeadMotion float64 `protobuf:"fixed64,9,opt,name=head_motion,json=headMotion,proto3" json:"head_motion,omitempty"`
	// heading of vehicle in [deg] - future extension
	HeadVehicle float64 `protobuf:"fixed64,10,opt,name=head_vehicle,json=headVehicle,proto3" json:"head_vehicle,omitempty"`
	// heading valid (bit 0=motion valid, 1=vehicle valid))
	HeadValid uint32 `protobuf:"varint,11,opt,name=head_valid,json=headValid,proto3" json:"head_valid,omitempty"`
	// speed in [m/s]
	GroundSpeed float64 `protobuf:"fixed64,12,opt,name=ground_speed,json=groundSpeed,proto3" json:"ground_speed,omitempty"`
}

func (x *TraceletToServer_Location_Uwb) Reset() {
	*x = TraceletToServer_Location_Uwb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracelet_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceletToServer_Location_Uwb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceletToServer_Location_Uwb) ProtoMessage() {}

func (x *TraceletToServer_Location_Uwb) ProtoReflect() protoreflect.Message {
	mi := &file_tracelet_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceletToServer_Location_Uwb.ProtoReflect.Descriptor instead.
func (*TraceletToServer_Location_Uwb) Descriptor() ([]byte, []int) {
	return file_tracelet_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *TraceletToServer_Location_Uwb) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *TraceletToServer_Location_Uwb) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *TraceletToServer_Location_Uwb) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *TraceletToServer_Location_Uwb) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

func (x *TraceletToServer_Location_Uwb) GetSiteId() uint32 {
	if x != nil {
		return x.SiteId
	}
	return 0
}

func (x *TraceletToServer_Location_Uwb) GetLocationSignature() uint64 {
	if x != nil {
		return x.LocationSignature
	}
	return 0
}

func (x *TraceletToServer_Location_Uwb) GetEph() float64 {
	if x != nil {
		return x.Eph
	}
	return 0
}

func (x *TraceletToServer_Location_Uwb) GetFixType() int32 {
	if x != nil {
		return x.FixType
	}
	return 0
}

func (x *TraceletToServer_Location_Uwb) GetHeadMotion() float64 {
	if x != nil {
		return x.HeadMotion
	}
	return 0
}

func (x *TraceletToServer_Location_Uwb) GetHeadVehicle() float64 {
	if x != nil {
		return x.HeadVehicle
	}
	return 0
}

func (x *TraceletToServer_Location_Uwb) GetHeadValid() uint32 {
	if x != nil {
		return x.HeadValid
	}
	return 0
}

func (x *TraceletToServer_Location_Uwb) GetGroundSpeed() float64 {
	if x != nil {
		return x.GroundSpeed
	}
	return 0
}

type TraceletToServer_Location_Fused struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fused location valid. If false, the other fields are not valid
	Valid bool `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	// WGS84 coordinates
	// latitude in [deg]
	Latitude float64 `protobuf:"fixed64,2,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// longitude in [deg]
	Longitude float64 `protobuf:"fixed64,3,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// altitude in [m] - future extension
	Altitude float64 `protobuf:"fixed64,4,opt,name=altitude,proto3" json:"altitude,omitempty"`
	// horizontal accuracy in [m]
	Eph float64 `protobuf:"fixed64,5,opt,name=eph,proto3" json:"eph,omitempty"`
	// heading of motion in [deg] - future extension
	HeadMotion float64 `protobuf:"fixed64,6,opt,name=head_motion,json=headMotion,proto3" json:"head_motion,omitempty"`
	// heading of vehicle in [deg] - future extension
	HeadVehicle float64 `protobuf:"fixed64,7,opt,name=head_vehicle,json=headVehicle,proto3" json:"head_vehicle,omitempty"`
	// heading valid (bit 0=motion valid, 1=vehicle valid)) - future extension
	HeadValid uint32 `protobuf:"varint,8,opt,name=head_valid,json=headValid,proto3" json:"head_valid,omitempty"`
	// speed in [m/s] - future extension
	GroundSpeed float64 `protobuf:"fixed64,9,opt,name=ground_speed,json=groundSpeed,proto3" json:"ground_speed,omitempty"`
}

func (x *TraceletToServer_Location_Fused) Reset() {
	*x = TraceletToServer_Location_Fused{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracelet_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceletToServer_Location_Fused) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceletToServer_Location_Fused) ProtoMessage() {}

func (x *TraceletToServer_Location_Fused) ProtoReflect() protoreflect.Message {
	mi := &file_tracelet_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceletToServer_Location_Fused.ProtoReflect.Descriptor instead.
func (*TraceletToServer_Location_Fused) Descriptor() ([]byte, []int) {
	return file_tracelet_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *TraceletToServer_Location_Fused) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *TraceletToServer_Location_Fused) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *TraceletToServer_Location_Fused) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *TraceletToServer_Location_Fused) GetAltitude() float64 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *TraceletToServer_Location_Fused) GetEph() float64 {
	if x != nil {
		return x.Eph
	}
	return 0
}

func (x *TraceletToServer_Location_Fused) GetHeadMotion() float64 {
	if x != nil {
		return x.HeadMotion
	}
	return 0
}

func (x *TraceletToServer_Location_Fused) GetHeadVehicle() float64 {
	if x != nil {
		return x.HeadVehicle
	}
	return 0
}

func (x *TraceletToServer_Location_Fused) GetHeadValid() uint32 {
	if x != nil {
		return x.HeadValid
	}
	return 0
}

func (x *TraceletToServer_Location_Fused) GetGroundSpeed() float64 {
	if x != nil {
		return x.GroundSpeed
	}
	return 0
}

// Acceleration data - all values in (m/s^2)
type TraceletToServer_Location_Acceleration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XMax float64 `protobuf:"fixed64,1,opt,name=x_max,json=xMax,proto3" json:"x_max,omitempty"` // Maximum acceleration in x direction in last period
	YMax float64 `protobuf:"fixed64,2,opt,name=y_max,json=yMax,proto3" json:"y_max,omitempty"`
	ZMax float64 `protobuf:"fixed64,3,opt,name=z_max,json=zMax,proto3" json:"z_max,omitempty"`
	XMin float64 `protobuf:"fixed64,4,opt,name=x_min,json=xMin,proto3" json:"x_min,omitempty"` // Minimum acceleration in x direction in last period
	YMin float64 `protobuf:"fixed64,5,opt,name=y_min,json=yMin,proto3" json:"y_min,omitempty"`
	ZMin float64 `protobuf:"fixed64,6,opt,name=z_min,json=zMin,proto3" json:"z_min,omitempty"`
	XAvg float64 `protobuf:"fixed64,7,opt,name=x_avg,json=xAvg,proto3" json:"x_avg,omitempty"` // Average acceleration in x direction in last period
	YAvg float64 `protobuf:"fixed64,8,opt,name=y_avg,json=yAvg,proto3" json:"y_avg,omitempty"`
	ZAvg float64 `protobuf:"fixed64,9,opt,name=z_avg,json=zAvg,proto3" json:"z_avg,omitempty"`
}

func (x *TraceletToServer_Location_Acceleration) Reset() {
	*x = TraceletToServer_Location_Acceleration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracelet_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceletToServer_Location_Acceleration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceletToServer_Location_Acceleration) ProtoMessage() {}

func (x *TraceletToServer_Location_Acceleration) ProtoReflect() protoreflect.Message {
	mi := &file_tracelet_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceletToServer_Location_Acceleration.ProtoReflect.Descriptor instead.
func (*TraceletToServer_Location_Acceleration) Descriptor() ([]byte, []int) {
	return file_tracelet_proto_rawDescGZIP(), []int{0, 0, 3}
}

func (x *TraceletToServer_Location_Acceleration) GetXMax() float64 {
	if x != nil {
		return x.XMax
	}
	return 0
}

func (x *TraceletToServer_Location_Acceleration) GetYMax() float64 {
	if x != nil {
		return x.YMax
	}
	return 0
}

func (x *TraceletToServer_Location_Acceleration) GetZMax() float64 {
	if x != nil {
		return x.ZMax
	}
	return 0
}

func (x *TraceletToServer_Location_Acceleration) GetXMin() float64 {
	if x != nil {
		return x.XMin
	}
	return 0
}

func (x *TraceletToServer_Location_Acceleration) GetYMin() float64 {
	if x != nil {
		return x.YMin
	}
	return 0
}

func (x *TraceletToServer_Location_Acceleration) GetZMin() float64 {
	if x != nil {
		return x.ZMin
	}
	return 0
}

func (x *TraceletToServer_Location_Acceleration) GetXAvg() float64 {
	if x != nil {
		return x.XAvg
	}
	return 0
}

func (x *TraceletToServer_Location_Acceleration) GetYAvg() float64 {
	if x != nil {
		return x.YAvg
	}
	return 0
}

func (x *TraceletToServer_Location_Acceleration) GetZAvg() float64 {
	if x != nil {
		return x.ZAvg
	}
	return 0
}

var File_tracelet_proto protoreflect.FileDescriptor

var file_tracelet_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x6c, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x6c, 0x65, 0x74, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfa, 0x0e, 0x0a, 0x10,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x6c, 0x65, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x6c, 0x65, 0x74,
	0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a,
	0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x6c,
	0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x1a, 0xdb, 0x0c, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3c, 0x0a, 0x04, 0x67, 0x6e, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x6c, 0x65,
	0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x47, 0x6e, 0x73, 0x73, 0x52, 0x04, 0x67, 0x6e, 0x73, 0x73, 0x12, 0x39, 0x0a,
	0x03, 0x75, 0x77, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x6c, 0x65, 0x74, 0x54, 0x6f,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x55, 0x77, 0x62, 0x52, 0x03, 0x75, 0x77, 0x62, 0x12, 0x3f, 0x0a, 0x05, 0x66, 0x75, 0x73, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x6c,
	0x65, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x6c, 0x65, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x75, 0x73,
	0x65, 0x64, 0x52, 0x05, 0x66, 0x75, 0x73, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x6c, 0x65, 0x74,
	0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x69, 0x6c, 0x65, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d,
	0x69, 0x6c, 0x65, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x54, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65,
	0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x6c,
	0x65, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xb7,
	0x02, 0x0a, 0x04, 0x47, 0x6e, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x70, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x65, 0x70, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x70, 0x76, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x65, 0x70, 0x76, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x78, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x69, 0x78, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x4d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x76, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x65, 0x61, 0x64,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x1a, 0xc0, 0x02, 0x0a, 0x03, 0x55, 0x77, 0x62,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x7a,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x06, 0x52, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x70, 0x68, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x65, 0x70, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69,
	0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x69,
	0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64,
	0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x76,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x68, 0x65,
	0x61, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x61,
	0x64, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68,
	0x65, 0x61, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x1a, 0x8b, 0x02, 0x0a, 0x05,
	0x46, 0x75, 0x73, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x70, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x65, 0x70, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x4d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x76, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x64,
	0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x65, 0x61,
	0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x1a, 0xcb, 0x01, 0x0a, 0x0c, 0x41, 0x63,
	0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x78, 0x5f,
	0x6d, 0x61, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x78, 0x4d, 0x61, 0x78, 0x12,
	0x13, 0x0a, 0x05, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x79, 0x4d, 0x61, 0x78, 0x12, 0x13, 0x0a, 0x05, 0x7a, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x04, 0x7a, 0x4d, 0x61, 0x78, 0x12, 0x13, 0x0a, 0x05, 0x78, 0x5f, 0x6d,
	0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x78, 0x4d, 0x69, 0x6e, 0x12, 0x13,
	0x0a, 0x05, 0x79, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x79,
	0x4d, 0x69, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x7a, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x7a, 0x4d, 0x69, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x78, 0x5f, 0x61, 0x76,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x78, 0x41, 0x76, 0x67, 0x12, 0x13, 0x0a,
	0x05, 0x79, 0x5f, 0x61, 0x76, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x79, 0x41,
	0x76, 0x67, 0x12, 0x13, 0x0a, 0x05, 0x7a, 0x5f, 0x61, 0x76, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x7a, 0x41, 0x76, 0x67, 0x22, 0x47, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x41, 0x42, 0x5f, 0x41, 0x5f,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x41, 0x42, 0x5f, 0x42, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02,
	0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa3, 0x02, 0x0a, 0x0f, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x6c, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x22, 0x0a, 0x0d,
	0x77, 0x69, 0x66, 0x69, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x5f, 0x64, 0x62, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x77, 0x69, 0x66, 0x69, 0x52, 0x73, 0x73, 0x69, 0x44, 0x62, 0x6d,
	0x12, 0x17, 0x0a, 0x07, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x77, 0x69, 0x66, 0x69, 0x41, 0x70, 0x12, 0x2b, 0x0a, 0x12, 0x67, 0x6e, 0x73,
	0x73, 0x5f, 0x66, 0x69, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x67, 0x6e, 0x73, 0x73, 0x46, 0x69, 0x78, 0x54, 0x79,
	0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x6e, 0x73, 0x73, 0x5f, 0x65,
	0x70, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0d, 0x67, 0x6e, 0x73, 0x73, 0x45, 0x70, 0x68, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3a,
	0x0a, 0x1c, 0x67, 0x6e, 0x73, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x61, 0x74, 0x73, 0x5f,
	0x5f, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x5f, 0x5f, 0x67, 0x70, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x67, 0x6e, 0x73, 0x73, 0x4e, 0x75, 0x6d, 0x53, 0x61, 0x74,
	0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x70, 0x73, 0x12, 0x42, 0x0a, 0x20, 0x67, 0x6e,
	0x73, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x61, 0x74, 0x73, 0x5f, 0x5f, 0x5f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x5f, 0x5f, 0x67, 0x6c, 0x6f, 0x6e, 0x61, 0x73, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x67, 0x6e, 0x73, 0x73, 0x4e, 0x75, 0x6d, 0x53, 0x61, 0x74,
	0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x6c, 0x6f, 0x6e, 0x61, 0x73, 0x73, 0x42, 0x0c,
	0x5a, 0x0a, 0x2e, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x6c, 0x65, 0x74, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tracelet_proto_rawDescOnce sync.Once
	file_tracelet_proto_rawDescData = file_tracelet_proto_rawDesc
)

func file_tracelet_proto_rawDescGZIP() []byte {
	file_tracelet_proto_rawDescOnce.Do(func() {
		file_tracelet_proto_rawDescData = protoimpl.X.CompressGZIP(file_tracelet_proto_rawDescData)
	})
	return file_tracelet_proto_rawDescData
}

var file_tracelet_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tracelet_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_tracelet_proto_goTypes = []interface{}{
	(TraceletToServer_Location_Direction)(0),       // 0: tracelet.TraceletToServer.Location.Direction
	(*TraceletToServer)(nil),                       // 1: tracelet.TraceletToServer
	(*TraceletMetrics)(nil),                        // 2: tracelet.TraceletMetrics
	(*TraceletToServer_Location)(nil),              // 3: tracelet.TraceletToServer.Location
	(*TraceletToServer_Location_Gnss)(nil),         // 4: tracelet.TraceletToServer.Location.Gnss
	(*TraceletToServer_Location_Uwb)(nil),          // 5: tracelet.TraceletToServer.Location.Uwb
	(*TraceletToServer_Location_Fused)(nil),        // 6: tracelet.TraceletToServer.Location.Fused
	(*TraceletToServer_Location_Acceleration)(nil), // 7: tracelet.TraceletToServer.Location.Acceleration
	(*timestamppb.Timestamp)(nil),                  // 8: google.protobuf.Timestamp
}
var file_tracelet_proto_depIdxs = []int32{
	8, // 0: tracelet.TraceletToServer.delivery_ts:type_name -> google.protobuf.Timestamp
	3, // 1: tracelet.TraceletToServer.location:type_name -> tracelet.TraceletToServer.Location
	2, // 2: tracelet.TraceletToServer.metrics:type_name -> tracelet.TraceletMetrics
	4, // 3: tracelet.TraceletToServer.Location.gnss:type_name -> tracelet.TraceletToServer.Location.Gnss
	5, // 4: tracelet.TraceletToServer.Location.uwb:type_name -> tracelet.TraceletToServer.Location.Uwb
	6, // 5: tracelet.TraceletToServer.Location.fused:type_name -> tracelet.TraceletToServer.Location.Fused
	0, // 6: tracelet.TraceletToServer.Location.direction:type_name -> tracelet.TraceletToServer.Location.Direction
	7, // 7: tracelet.TraceletToServer.Location.acceleration:type_name -> tracelet.TraceletToServer.Location.Acceleration
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_tracelet_proto_init() }
func file_tracelet_proto_init() {
	if File_tracelet_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tracelet_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceletToServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tracelet_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceletMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tracelet_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceletToServer_Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tracelet_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceletToServer_Location_Gnss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tracelet_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceletToServer_Location_Uwb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tracelet_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceletToServer_Location_Fused); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tracelet_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceletToServer_Location_Acceleration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tracelet_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*TraceletToServer_Location_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tracelet_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tracelet_proto_goTypes,
		DependencyIndexes: file_tracelet_proto_depIdxs,
		EnumInfos:         file_tracelet_proto_enumTypes,
		MessageInfos:      file_tracelet_proto_msgTypes,
	}.Build()
	File_tracelet_proto = out.File
	file_tracelet_proto_rawDesc = nil
	file_tracelet_proto_goTypes = nil
	file_tracelet_proto_depIdxs = nil
}
