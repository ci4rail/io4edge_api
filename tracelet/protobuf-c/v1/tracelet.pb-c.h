/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: tracelet.proto */

#ifndef PROTOBUF_C_tracelet_2eproto__INCLUDED
#define PROTOBUF_C_tracelet_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "google/protobuf/timestamp.pb-c.h"

typedef struct _Tracelet__TraceletToServer Tracelet__TraceletToServer;
typedef struct _Tracelet__TraceletToServer__Location Tracelet__TraceletToServer__Location;
typedef struct _Tracelet__TraceletToServer__Location__Gnss Tracelet__TraceletToServer__Location__Gnss;
typedef struct _Tracelet__TraceletToServer__Location__Uwb Tracelet__TraceletToServer__Location__Uwb;
typedef struct _Tracelet__TraceletToServer__Location__Fused Tracelet__TraceletToServer__Location__Fused;
typedef struct _Tracelet__TraceletToServer__Location__Acceleration Tracelet__TraceletToServer__Location__Acceleration;
typedef struct _Tracelet__TraceletMetrics Tracelet__TraceletMetrics;


/* --- enums --- */

typedef enum _Tracelet__TraceletToServer__Location__Direction {
  /*
   * Invalid direction
   */
  TRACELET__TRACELET_TO_SERVER__LOCATION__DIRECTION__NO_DIRECTION = 0,
  /*
   * CAB A
   */
  TRACELET__TRACELET_TO_SERVER__LOCATION__DIRECTION__CAB_A_DIRECTION = 1,
  /*
   * CAB B
   */
  TRACELET__TRACELET_TO_SERVER__LOCATION__DIRECTION__CAB_B_DIRECTION = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TRACELET__TRACELET_TO_SERVER__LOCATION__DIRECTION)
} Tracelet__TraceletToServer__Location__Direction;

/* --- messages --- */

struct  _Tracelet__TraceletToServer__Location__Gnss
{
  ProtobufCMessage base;
  /*
   * GNSS location valid. If false, the other fields are not valid
   */
  protobuf_c_boolean valid;
  /*
   * WGS84 coordinates
   * latitude in [deg]
   */
  double latitude;
  /*
   * longitude in [deg]
   */
  double longitude;
  /*
   * altitude in [m]
   */
  double altitude;
  /*
   * horizontal accuracy in [m]
   */
  double eph;
  /*
   * vertical accuracy in [m]
   */
  double epv;
  /*
   * type of fix 
   * 0 = invalid, 1 = GPS fix, 2 = DGPS fix, 3 = PPS fix, 4 = Real Time Kinematic, 
   * 5 = Float RTK, 6 = estimated, 7 = Manual input mode, 8 = Simulation mode
   */
  int32_t fix_type;
  /*
   * heading of motion in [deg], relative to true north
   */
  double head_motion;
  /*
   * heading of vehicle in [deg], relative to true north
   */
  double head_vehicle;
  /*
   * heading valid (bit 0=motion valid, 1=vehicle valid))
   */
  uint32_t head_valid;
  /*
   * speed in [m/s]
   */
  double ground_speed;
};
#define TRACELET__TRACELET_TO_SERVER__LOCATION__GNSS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tracelet__tracelet_to_server__location__gnss__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _Tracelet__TraceletToServer__Location__Uwb
{
  ProtobufCMessage base;
  /*
   * UWB location valid. If false, the other fields are not valid
   */
  protobuf_c_boolean valid;
  /*
   * location of tracelet in space
   * Units: [m], can be negative. Resolution 0.1m
   */
  double x;
  double y;
  double z;
  /*
   * Site ID
   * a 16 bit unsigned value
   */
  uint32_t site_id;
  /*
   * Location signature
   * can be used to validate the received location
   */
  uint64_t location_signature;
  /*
   * horizontal accuracy in [m]
   */
  double eph;
  /*
   * type of fix 
   * 0 = invalid, 1 = UWB/IMU, 2 - IMU only
   */
  int32_t fix_type;
  /*
   * heading of motion in [deg]
   * relative to site coordinate system, counterclockwise, 0 in direction of pos. x axis
   */
  double head_motion;
  /*
   * heading of vehicle in [deg] - future extension
   */
  double head_vehicle;
  /*
   * heading valid (bit 0=motion valid, 1=vehicle valid))
   */
  uint32_t head_valid;
  /*
   * speed in [m/s]
   */
  double ground_speed;
};
#define TRACELET__TRACELET_TO_SERVER__LOCATION__UWB__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tracelet__tracelet_to_server__location__uwb__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _Tracelet__TraceletToServer__Location__Fused
{
  ProtobufCMessage base;
  /*
   * Fused location valid. If false, the other fields are not valid
   */
  protobuf_c_boolean valid;
  /*
   * WGS84 coordinates
   * latitude in [deg]
   */
  double latitude;
  /*
   * longitude in [deg]
   */
  double longitude;
  /*
   * altitude in [m] - future extension
   */
  double altitude;
  /*
   * horizontal accuracy in [m]
   */
  double eph;
  /*
   * heading of motion in [deg] - future extension
   */
  double head_motion;
  /*
   * heading of vehicle in [deg] - future extension
   */
  double head_vehicle;
  /*
   * heading valid (bit 0=motion valid, 1=vehicle valid)) - future extension
   */
  uint32_t head_valid;
  /*
   * speed in [m/s] - future extension
   */
  double ground_speed;
};
#define TRACELET__TRACELET_TO_SERVER__LOCATION__FUSED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tracelet__tracelet_to_server__location__fused__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0 }


/*
 * Acceleration data - all values in (m/s^2)
 */
struct  _Tracelet__TraceletToServer__Location__Acceleration
{
  ProtobufCMessage base;
  /*
   * Maximum acceleration in x direction in last period 
   */
  double x_max;
  double y_max;
  double z_max;
  /*
   * Minimum acceleration in x direction in last period
   */
  double x_min;
  double y_min;
  double z_min;
  /*
   * Average acceleration in x direction in last period
   */
  double x_avg;
  double y_avg;
  double z_avg;
};
#define TRACELET__TRACELET_TO_SERVER__LOCATION__ACCELERATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tracelet__tracelet_to_server__location__acceleration__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0 }


/*
 * Sub-message sent periodically sent by the tracelet
 */
struct  _Tracelet__TraceletToServer__Location
{
  ProtobufCMessage base;
  /*
   * Data from GNSS subsystem
   */
  Tracelet__TraceletToServer__Location__Gnss *gnss;
  /*
   * Data from UWB subsystem
   */
  Tracelet__TraceletToServer__Location__Uwb *uwb;
  /*
   * Fused location
   */
  Tracelet__TraceletToServer__Location__Fused *fused;
  /*
   * Driving direction of the vehicle
   */
  Tracelet__TraceletToServer__Location__Direction direction;
  /*
   * Vehicle Speed in [m/s]
   */
  double speed;
  /*
   * Vehicle Mileage in [km]
   */
  int32_t mileage;
  /*
   * Current Tracelet Temperature in [Â°C]
   */
  double temperature;
  /*
   * Acceleration data
   */
  Tracelet__TraceletToServer__Location__Acceleration *acceleration;
};
#define TRACELET__TRACELET_TO_SERVER__LOCATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tracelet__tracelet_to_server__location__descriptor) \
    , NULL, NULL, NULL, TRACELET__TRACELET_TO_SERVER__LOCATION__DIRECTION__NO_DIRECTION, 0, 0, 0, NULL }


typedef enum {
  TRACELET__TRACELET_TO_SERVER__TYPE__NOT_SET = 0,
  TRACELET__TRACELET_TO_SERVER__TYPE_LOCATION = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TRACELET__TRACELET_TO_SERVER__TYPE)
} Tracelet__TraceletToServer__TypeCase;

struct  _Tracelet__TraceletToServer
{
  ProtobufCMessage base;
  /*
   * Currently not used, always 0
   */
  int32_t id;
  /*
   * timestamp when the message was sent by the tracelet
   * If the Tracelet has no valid time, receive_ts is set to 1970-Jan-1 00:00
   * UTC
   */
  Google__Protobuf__Timestamp *delivery_ts;
  /*
   * tracelet ID as provisioned in tracelet. Could be a vehicle ID
   */
  char *tracelet_id;
  /*
   * status of the tracelet ignition signal
   */
  protobuf_c_boolean ignition;
  /*
   * Firmware version of the tracelet
   */
  char *firmware_version;
  Tracelet__TraceletMetrics *metrics;
  Tracelet__TraceletToServer__TypeCase type_case;
  union {
    /*
     * periodically sent by the tracelet
     */
    Tracelet__TraceletToServer__Location *location;
  };
};
#define TRACELET__TRACELET_TO_SERVER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tracelet__tracelet_to_server__descriptor) \
    , 0, NULL, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, NULL, TRACELET__TRACELET_TO_SERVER__TYPE__NOT_SET, {0} }


/*
 * Tracelet metrics. May be sent together with the location message
 * Metric families are written in the form of metric___label___labelvalue
 */
struct  _Tracelet__TraceletMetrics
{
  ProtobufCMessage base;
  int64_t health___type___uwb_comm;
  int64_t health___type___uwb_firmware;
  int64_t health___type___uwb_config;
  int64_t health___type___gnss_comm;
  int64_t health___type___ubx_firmware;
  int64_t health___type___ubx_config;
  int64_t health___type___actors_startup;
  /*
   * Number of SNTP time updates
   */
  int64_t sntp_updates;
  /*
   * Free heap (bytes)
   */
  int64_t free_heap_bytes;
  /*
   * System time in seconds since 1970 UTC
   */
  double system_time_seconds;
  /*
   * Wifi RSSI (dBm), NAN if not connected
   */
  double wifi_rssi_dbm;
  /*
   * Last two bytes of connected AP MAC address as a number
   */
  int64_t wifi_ap;
  /*
   * number of satellites in view (GPS)
   */
  int64_t gnss_num_sats___system___gps;
  /*
   * number of satellites in view (GLONASS)
   */
  int64_t gnss_num_sats___system___glonass;
  /*
   * number of satellites in view (Beidou)
   */
  int64_t gnss_num_sats___system___beidou;
  /*
   * number of satellites in view (Galileo)
   */
  int64_t gnss_num_sats___system___galileo;
  /*
   * number of satellites in view (QZSS)
   */
  int64_t gnss_num_sats___system___qzss;
  /*
   * Number of GNSS UART errors
   */
  int64_t gnss_uart_errors___type___parse_gsv;
  int64_t gnss_uart_errors___type___sentence_invalid;
  int64_t gnss_uart_errors___type___sentence_unknown;
  int64_t gnss_uart_errors___type___hw_fifo;
  int64_t gnss_uart_errors___type___buf_full;
  int64_t gnss_uart_errors___type___char;
  double gnss_protection_level___info___tmir;
  double gnss_protection_level___info___pos1;
  double gnss_protection_level___info___pos2;
  double gnss_protection_level___info___pos3;
  double gnss_protection_level___info___pos_valid;
  double gnss_protection_level___info___pos_frame;
  /*
   * Number of satellites used in fix
   */
  int64_t gnss_num_sv;
  /*
   * gain of programmable amplifier
   */
  int64_t gnss_pga___block___rf1;
  int64_t gnss_pga___block___rf2;
  /*
   * UBX Sensor fusion status (0-3)
   */
  int64_t ubx_sensor_fusion_status_enum;
  /*
   * UBX GNSS reference station
   */
  int64_t ubx_ref_station_id;
  /*
   * Has Connection to NTRIP Caster
   */
  int64_t ntrip_is_connected;
  /*
   * Bytes sent to NTRIP Caster
   */
  int64_t ntrip_transfer_bytes___direction___send;
  /*
   * Bytes received from NTRIP Caster
   */
  int64_t ntrip_transfer_bytes___direction___recv;
  /*
   * UWB Role from Status Report (0-4) 3=TAG
   */
  int64_t uwb_status_role_enum;
  /*
   * UWB State from Status Report(0-4)
   */
  int64_t uwb_status_state_enum;
  /*
   * UWB Motion Sensor State from Status Report (0..2), 1=MOVE
   */
  int64_t uwb_status_motion_state_enum;
  /*
   * Localization Server Interface gets ACKs from server
   */
  int64_t lsi_is_connected;
  /*
   * Localization Server Interface missed ACKs from server
   */
  int64_t lsi_acks_missed;
  /*
   * UBX Boot type (0-10)
   */
  int64_t ubx_boot_type_enum;
  /*
   * UBX Runtime in seconds
   */
  int64_t ubx_runtime;
  /*
   * WT Initialization status (0..2)
   */
  int64_t ubx_sensor_fusion_detail___type___wt_init;
  /*
   * Automatic IMU MntAlg status (0..3)
   */
  int64_t ubx_sensor_fusion_detail___type___mnt_alg;
  /*
   * INS Initialization status (0..2)
   */
  int64_t ubx_sensor_fusion_detail___type___ins_init;
  /*
   * INS State (0..2)
   */
  int64_t ubx_sensor_fusion_detail___type___imu_init;
  /*
   * Sensor Fusion State (0=NONE, 1=UWB, 2=GNSS, 3=UWB-to-GNSS)
   */
  int64_t sensor_fusion_state;
  /*
   * Number of satlets in view
   */
  int64_t uwb_num_sats;
};
#define TRACELET__TRACELET_METRICS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tracelet__tracelet_metrics__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


/* Tracelet__TraceletToServer__Location__Gnss methods */
void   tracelet__tracelet_to_server__location__gnss__init
                     (Tracelet__TraceletToServer__Location__Gnss         *message);
/* Tracelet__TraceletToServer__Location__Uwb methods */
void   tracelet__tracelet_to_server__location__uwb__init
                     (Tracelet__TraceletToServer__Location__Uwb         *message);
/* Tracelet__TraceletToServer__Location__Fused methods */
void   tracelet__tracelet_to_server__location__fused__init
                     (Tracelet__TraceletToServer__Location__Fused         *message);
/* Tracelet__TraceletToServer__Location__Acceleration methods */
void   tracelet__tracelet_to_server__location__acceleration__init
                     (Tracelet__TraceletToServer__Location__Acceleration         *message);
/* Tracelet__TraceletToServer__Location methods */
void   tracelet__tracelet_to_server__location__init
                     (Tracelet__TraceletToServer__Location         *message);
/* Tracelet__TraceletToServer methods */
void   tracelet__tracelet_to_server__init
                     (Tracelet__TraceletToServer         *message);
size_t tracelet__tracelet_to_server__get_packed_size
                     (const Tracelet__TraceletToServer   *message);
size_t tracelet__tracelet_to_server__pack
                     (const Tracelet__TraceletToServer   *message,
                      uint8_t             *out);
size_t tracelet__tracelet_to_server__pack_to_buffer
                     (const Tracelet__TraceletToServer   *message,
                      ProtobufCBuffer     *buffer);
Tracelet__TraceletToServer *
       tracelet__tracelet_to_server__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tracelet__tracelet_to_server__free_unpacked
                     (Tracelet__TraceletToServer *message,
                      ProtobufCAllocator *allocator);
/* Tracelet__TraceletMetrics methods */
void   tracelet__tracelet_metrics__init
                     (Tracelet__TraceletMetrics         *message);
size_t tracelet__tracelet_metrics__get_packed_size
                     (const Tracelet__TraceletMetrics   *message);
size_t tracelet__tracelet_metrics__pack
                     (const Tracelet__TraceletMetrics   *message,
                      uint8_t             *out);
size_t tracelet__tracelet_metrics__pack_to_buffer
                     (const Tracelet__TraceletMetrics   *message,
                      ProtobufCBuffer     *buffer);
Tracelet__TraceletMetrics *
       tracelet__tracelet_metrics__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tracelet__tracelet_metrics__free_unpacked
                     (Tracelet__TraceletMetrics *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Tracelet__TraceletToServer__Location__Gnss_Closure)
                 (const Tracelet__TraceletToServer__Location__Gnss *message,
                  void *closure_data);
typedef void (*Tracelet__TraceletToServer__Location__Uwb_Closure)
                 (const Tracelet__TraceletToServer__Location__Uwb *message,
                  void *closure_data);
typedef void (*Tracelet__TraceletToServer__Location__Fused_Closure)
                 (const Tracelet__TraceletToServer__Location__Fused *message,
                  void *closure_data);
typedef void (*Tracelet__TraceletToServer__Location__Acceleration_Closure)
                 (const Tracelet__TraceletToServer__Location__Acceleration *message,
                  void *closure_data);
typedef void (*Tracelet__TraceletToServer__Location_Closure)
                 (const Tracelet__TraceletToServer__Location *message,
                  void *closure_data);
typedef void (*Tracelet__TraceletToServer_Closure)
                 (const Tracelet__TraceletToServer *message,
                  void *closure_data);
typedef void (*Tracelet__TraceletMetrics_Closure)
                 (const Tracelet__TraceletMetrics *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor tracelet__tracelet_to_server__descriptor;
extern const ProtobufCMessageDescriptor tracelet__tracelet_to_server__location__descriptor;
extern const ProtobufCMessageDescriptor tracelet__tracelet_to_server__location__gnss__descriptor;
extern const ProtobufCMessageDescriptor tracelet__tracelet_to_server__location__uwb__descriptor;
extern const ProtobufCMessageDescriptor tracelet__tracelet_to_server__location__fused__descriptor;
extern const ProtobufCMessageDescriptor tracelet__tracelet_to_server__location__acceleration__descriptor;
extern const ProtobufCEnumDescriptor    tracelet__tracelet_to_server__location__direction__descriptor;
extern const ProtobufCMessageDescriptor tracelet__tracelet_metrics__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_tracelet_2eproto__INCLUDED */
