/*
Copyright Â© 2022 Ci4Rail GmbH <engineering@ci4rail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
syntax = "proto3";

package mvbSniffer;
option go_package = "mvbSniffer/v1";

// ============= Configuration =================

// ConfigurationSet to pass to
// Functionblock.Configuration.functionSpecificConfigurationSet hook
message ConfigurationSet {
  // not implemented
}

// ConfigurationSetResponse to pass to
// Functionblock.Configuration.functionSpecificConfigurationSetResponse hook
message ConfigurationSetResponse {
  // no parameters
}

// ConfigurationGet to pass to
// Functionblock.Configuration.functionSpecificConfigurationGet hook
message ConfigurationGet {
  // no parameters
}

// ConfigurationGetResponse to pass to
// Functionblock.ConfigurationGetResponse.functionSpecificConfigurationGetResponse
// hook Returns the current hardware configuration
message ConfigurationGetResponse {
  // not implemented
}

// ConfigurationDescribe to pass to
// Functionblock.Configuration.functionSpecificConfigurationDescribe hook
message ConfigurationDescribe {
  // no parameters
}

message ConfigurationDescribeResponse {
  // Not implemented
}

// ============= FunctionControl =================

// FunctionControlGet to pass to
// Functionblock.FunctionControl.functionSpecificFunctionControlGet hook
message FunctionControlGet {
  // no parameters
}

// FunctionControlSet to pass to
// Functionblock.FunctionControl.functionSpecificFunctionControlSet hook
message FunctionControlSet {
  string generator_pattern = 1; // pattern to send to the stimulus generator within the MVB sniffer for self-test
}

// FunctionControlGetResponse to pass to
// Functionblock.FunctionControlResponse.functionSpecificControlGet hook
message FunctionControlGetResponse {
  // Not implemented
}

// FunctionControlSetResponse to pass to
// Functionblock.FunctionControlResponse.functionSpecificControlSet hook
message FunctionControlSetResponse {
  // Not implemented
}

// ============= StreamControl ==================
// StreamControlStart to pass to
// Functionblock.StreamControlStart.functionSpecificStreamControlStart hook
message StreamControlStart {
  // TODO: Filter
}

enum FrameType {
  UNKNOWN = 0;
  MASTER = 1;
  SLAVE = 2;
}

enum Line {
  A = 0; // received on A
  B = 1; // received on B
}

enum SampleError {
  NONE = 0;
  STREAMBUF_OVERRUN = 1;
  DMA_ERROR = 2;
}


// A sample represents an MVB frame
message Sample {
  // Timestamp when this frame has started.
  // In microseconds since the start of the device.
  // Not synchronized with the clients time.
  fixed64 timestamp = 1;
  // time difference from the end of the last message to the begin of
  // this message (in us).
  // A value of <5 is invalid. A value of 255 means 255 us or more.
  int32 delta_time = 2;
  // master or slave frame
  FrameType frame_type = 3;
  // line on which this MVB frame has been received (redundant frames are
  // dropped)
  Line line = 4;
  // this frame has been received on both lines
  bool redundant = 5;
  // Bitmask with errors
  SampleError error = 6;
  // MVB frame, checksums are removed
  bytes payload = 10;
}

// StreamData to pass to Functionblock.StreamData.functionSpecificStreamData
// hook
message StreamData { repeated Sample samples = 1; }
