/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: binaryIoTypeC.proto */

#ifndef PROTOBUF_C_binaryIoTypeC_2eproto__INCLUDED
#define PROTOBUF_C_binaryIoTypeC_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _BinaryIoTypeC__ChannelConfig BinaryIoTypeC__ChannelConfig;
typedef struct _BinaryIoTypeC__ConfigurationSet BinaryIoTypeC__ConfigurationSet;
typedef struct _BinaryIoTypeC__ConfigurationSetResponse BinaryIoTypeC__ConfigurationSetResponse;
typedef struct _BinaryIoTypeC__ConfigurationGet BinaryIoTypeC__ConfigurationGet;
typedef struct _BinaryIoTypeC__ConfigurationGetResponse BinaryIoTypeC__ConfigurationGetResponse;
typedef struct _BinaryIoTypeC__ConfigurationDescribe BinaryIoTypeC__ConfigurationDescribe;
typedef struct _BinaryIoTypeC__ConfigurationDescribeResponse BinaryIoTypeC__ConfigurationDescribeResponse;
typedef struct _BinaryIoTypeC__ConfigurationResponse BinaryIoTypeC__ConfigurationResponse;
typedef struct _BinaryIoTypeC__GetSingle BinaryIoTypeC__GetSingle;
typedef struct _BinaryIoTypeC__GetAll BinaryIoTypeC__GetAll;
typedef struct _BinaryIoTypeC__FunctionControlGet BinaryIoTypeC__FunctionControlGet;
typedef struct _BinaryIoTypeC__SetSingle BinaryIoTypeC__SetSingle;
typedef struct _BinaryIoTypeC__SetAll BinaryIoTypeC__SetAll;
typedef struct _BinaryIoTypeC__FunctionControlSet BinaryIoTypeC__FunctionControlSet;
typedef struct _BinaryIoTypeC__GetSingleResponse BinaryIoTypeC__GetSingleResponse;
typedef struct _BinaryIoTypeC__GetAllResponse BinaryIoTypeC__GetAllResponse;
typedef struct _BinaryIoTypeC__FunctionControlGetResponse BinaryIoTypeC__FunctionControlGetResponse;
typedef struct _BinaryIoTypeC__SetSingleResponse BinaryIoTypeC__SetSingleResponse;
typedef struct _BinaryIoTypeC__SetAllResponse BinaryIoTypeC__SetAllResponse;
typedef struct _BinaryIoTypeC__FunctionControlSetResponse BinaryIoTypeC__FunctionControlSetResponse;
typedef struct _BinaryIoTypeC__StreamControlStart BinaryIoTypeC__StreamControlStart;
typedef struct _BinaryIoTypeC__Sample BinaryIoTypeC__Sample;
typedef struct _BinaryIoTypeC__StreamData BinaryIoTypeC__StreamData;


/* --- enums --- */

/*
 * ============= Configuration =================
 */
typedef enum _BinaryIoTypeC__ChannelMode {
  /*
   * input channel
   */
  BINARY_IO_TYPE_C__CHANNEL_MODE__BINARYIOTYPEC_INPUT_TYPE_1_3 = 0,
  /*
   * output channel, simple push pull
   */
  /*
   * further modes may be added later
   */
  BINARY_IO_TYPE_C__CHANNEL_MODE__BINARYIOTYPEC_OUTPUT_PUSH_PULL = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(BINARY_IO_TYPE_C__CHANNEL_MODE)
} BinaryIoTypeC__ChannelMode;
/*
 * Channel diagnostic bits. Multiple bits may be set at the same time.
 */
typedef enum _BinaryIoTypeC__ChannelDiag {
  BINARY_IO_TYPE_C__CHANNEL_DIAG__NoDiag = 0,
  /*
   * group supply voltage missing (input values can't be determined, output values can't be set)
   */
  BINARY_IO_TYPE_C__CHANNEL_DIAG__NoSupplyVoltage = 1,
  /*
   * channel current limiter is limiting current
   */
  BINARY_IO_TYPE_C__CHANNEL_DIAG__CurrentLimit = 2,
  /*
   * channel or group overload (output is disabled, output can't be set)
   */
  BINARY_IO_TYPE_C__CHANNEL_DIAG__Overload = 4,
  /*
   * group supply undervoltage
   */
  BINARY_IO_TYPE_C__CHANNEL_DIAG__SupplyUndervoltage = 8,
  /*
   * group supply overvoltage
   */
  BINARY_IO_TYPE_C__CHANNEL_DIAG__SupplyOvervoltage = 16
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(BINARY_IO_TYPE_C__CHANNEL_DIAG)
} BinaryIoTypeC__ChannelDiag;

/* --- messages --- */

struct  _BinaryIoTypeC__ChannelConfig
{
  ProtobufCMessage base;
  BinaryIoTypeC__ChannelMode mode;
  /*
   * If channel is configured for output, initialValue defines the value after initialization
   * and after the watchdog has fired
   */
  protobuf_c_boolean initialvalue;
};
#define BINARY_IO_TYPE_C__CHANNEL_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&binary_io_type_c__channel_config__descriptor) \
    , BINARY_IO_TYPE_C__CHANNEL_MODE__BINARYIOTYPEC_INPUT_TYPE_1_3, 0 }


/*
 * ConfigurationSet to pass to Functionblock.Configuration.functionSpecificConfigurationSet hook
 */
struct  _BinaryIoTypeC__ConfigurationSet
{
  ProtobufCMessage base;
  /*
   * per channel configuration (one per channel/pin)
   */
  size_t n_channelconfig;
  BinaryIoTypeC__ChannelConfig **channelconfig;
  /*
   * Map to enable the output watchdog for binary output channels. The output watchdog fires if the output is not updated for a certain time.
   * LSB is Output0, 1: output watchdog enabled, 0: disabled
   */
  uint32_t outputwatchdogmask;
  /*
   * The output watchdog timeout in ms.
   */
  uint32_t outputwatchdogtimeout;
};
#define BINARY_IO_TYPE_C__CONFIGURATION_SET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&binary_io_type_c__configuration_set__descriptor) \
    , 0,NULL, 0, 0 }


/*
 * ConfigurationSetResponse to pass to Functionblock.Configuration.functionSpecificConfigurationSetResponse hook
 */
struct  _BinaryIoTypeC__ConfigurationSetResponse
{
  ProtobufCMessage base;
};
#define BINARY_IO_TYPE_C__CONFIGURATION_SET_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&binary_io_type_c__configuration_set_response__descriptor) \
     }


/*
 * ConfigurationGet to pass to Functionblock.Configuration.functionSpecificConfigurationGet hook
 */
struct  _BinaryIoTypeC__ConfigurationGet
{
  ProtobufCMessage base;
};
#define BINARY_IO_TYPE_C__CONFIGURATION_GET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&binary_io_type_c__configuration_get__descriptor) \
     }


/*
 * ConfigurationGetResponse to pass to Functionblock.ConfigurationGetResponse.functionSpecificConfigurationGetResponse hook
 * Returns the current hardware configuration
 */
struct  _BinaryIoTypeC__ConfigurationGetResponse
{
  ProtobufCMessage base;
  /*
   * per channel configuration (one per channel/pin)
   */
  size_t n_channelconfig;
  BinaryIoTypeC__ChannelConfig **channelconfig;
  /*
   * Map to enable the output watchdog for binary output channels. The output watchdog fires if the output is not updated for a certain time.
   * LSB is Output0, 1: output watchdog enabled, 0: disabled
   */
  uint32_t outputwatchdogmask;
  /*
   * The output watchdog timeout in ms.
   */
  uint32_t outputwatchdogtimeout;
};
#define BINARY_IO_TYPE_C__CONFIGURATION_GET_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&binary_io_type_c__configuration_get_response__descriptor) \
    , 0,NULL, 0, 0 }


/*
 * ConfigurationDescribe to pass to Functionblock.Configuration.functionSpecificConfigurationDescribe hook
 */
struct  _BinaryIoTypeC__ConfigurationDescribe
{
  ProtobufCMessage base;
};
#define BINARY_IO_TYPE_C__CONFIGURATION_DESCRIBE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&binary_io_type_c__configuration_describe__descriptor) \
     }


struct  _BinaryIoTypeC__ConfigurationDescribeResponse
{
  ProtobufCMessage base;
  uint32_t numberofchannels;
};
#define BINARY_IO_TYPE_C__CONFIGURATION_DESCRIBE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&binary_io_type_c__configuration_describe_response__descriptor) \
    , 0 }


typedef enum {
  BINARY_IO_TYPE_C__CONFIGURATION_RESPONSE__TYPE__NOT_SET = 0,
  BINARY_IO_TYPE_C__CONFIGURATION_RESPONSE__TYPE_GET = 1,
  BINARY_IO_TYPE_C__CONFIGURATION_RESPONSE__TYPE_SET = 2,
  BINARY_IO_TYPE_C__CONFIGURATION_RESPONSE__TYPE_DESCRIBE = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(BINARY_IO_TYPE_C__CONFIGURATION_RESPONSE__TYPE)
} BinaryIoTypeC__ConfigurationResponse__TypeCase;

/*
 * ConfigurationResponse to pass to Functionblock.ConfigurationResponse.functionSpecificConfigurationResponse hook
 */
struct  _BinaryIoTypeC__ConfigurationResponse
{
  ProtobufCMessage base;
  BinaryIoTypeC__ConfigurationResponse__TypeCase type_case;
  union {
    BinaryIoTypeC__ConfigurationGetResponse *get;
    BinaryIoTypeC__ConfigurationSetResponse *set;
    BinaryIoTypeC__ConfigurationDescribeResponse *describe;
  };
};
#define BINARY_IO_TYPE_C__CONFIGURATION_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&binary_io_type_c__configuration_response__descriptor) \
    , BINARY_IO_TYPE_C__CONFIGURATION_RESPONSE__TYPE__NOT_SET, {0} }


/*
 * ============= FunctionControl =================
 * Gets the current value of a single binary channel
 */
struct  _BinaryIoTypeC__GetSingle
{
  ProtobufCMessage base;
  /*
   * Specifies the binary input channel (0 - (number of channels - 1))
   */
  uint32_t channel;
};
#define BINARY_IO_TYPE_C__GET_SINGLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&binary_io_type_c__get_single__descriptor) \
    , 0 }


/*
 * Gets the values of all binary channels
 */
struct  _BinaryIoTypeC__GetAll
{
  ProtobufCMessage base;
  /*
   * mask to define which channels are affected by the get all command. 0 means not set, 1 means set, LSB is channel 0
   */
  uint32_t mask;
};
#define BINARY_IO_TYPE_C__GET_ALL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&binary_io_type_c__get_all__descriptor) \
    , 0 }


typedef enum {
  BINARY_IO_TYPE_C__FUNCTION_CONTROL_GET__TYPE__NOT_SET = 0,
  BINARY_IO_TYPE_C__FUNCTION_CONTROL_GET__TYPE_SINGLE = 1,
  BINARY_IO_TYPE_C__FUNCTION_CONTROL_GET__TYPE_ALL = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(BINARY_IO_TYPE_C__FUNCTION_CONTROL_GET__TYPE)
} BinaryIoTypeC__FunctionControlGet__TypeCase;

/*
 * FunctionControlGet to pass to Functionblock.FunctionControl.functionSpecificFunctionControlGet hook
 */
struct  _BinaryIoTypeC__FunctionControlGet
{
  ProtobufCMessage base;
  BinaryIoTypeC__FunctionControlGet__TypeCase type_case;
  union {
    BinaryIoTypeC__GetSingle *single;
    BinaryIoTypeC__GetAll *all;
  };
};
#define BINARY_IO_TYPE_C__FUNCTION_CONTROL_GET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&binary_io_type_c__function_control_get__descriptor) \
    , BINARY_IO_TYPE_C__FUNCTION_CONTROL_GET__TYPE__NOT_SET, {0} }


/*
 * Sets the value of a single binary channel
 */
struct  _BinaryIoTypeC__SetSingle
{
  ProtobufCMessage base;
  /*
   * Number of the binary output channel (0 - (number of channels - 1))
   */
  uint32_t channel;
  /*
   * State of the binary output channel. false means low, true means high.
   */
  protobuf_c_boolean state;
};
#define BINARY_IO_TYPE_C__SET_SINGLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&binary_io_type_c__set_single__descriptor) \
    , 0, 0 }


/*
 * Sets all binary channels
 */
struct  _BinaryIoTypeC__SetAll
{
  ProtobufCMessage base;
  /*
   * binary coded map of input values. 0 means low, 1 means high, LSB is Output0
   */
  uint32_t values;
  /*
   * mask to define which channels are affected by the set all command. 0 means not set, 1 means set, LSB is channel 0
   */
  uint32_t mask;
};
#define BINARY_IO_TYPE_C__SET_ALL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&binary_io_type_c__set_all__descriptor) \
    , 0, 0 }


typedef enum {
  BINARY_IO_TYPE_C__FUNCTION_CONTROL_SET__TYPE__NOT_SET = 0,
  BINARY_IO_TYPE_C__FUNCTION_CONTROL_SET__TYPE_SINGLE = 1,
  BINARY_IO_TYPE_C__FUNCTION_CONTROL_SET__TYPE_ALL = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(BINARY_IO_TYPE_C__FUNCTION_CONTROL_SET__TYPE)
} BinaryIoTypeC__FunctionControlSet__TypeCase;

/*
 * FunctionControlSet to pass to Functionblock.FunctionControl.functionSpecificFunctionControlSet hook
 */
struct  _BinaryIoTypeC__FunctionControlSet
{
  ProtobufCMessage base;
  BinaryIoTypeC__FunctionControlSet__TypeCase type_case;
  union {
    BinaryIoTypeC__SetSingle *single;
    BinaryIoTypeC__SetAll *all;
  };
};
#define BINARY_IO_TYPE_C__FUNCTION_CONTROL_SET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&binary_io_type_c__function_control_set__descriptor) \
    , BINARY_IO_TYPE_C__FUNCTION_CONTROL_SET__TYPE__NOT_SET, {0} }


struct  _BinaryIoTypeC__GetSingleResponse
{
  ProtobufCMessage base;
  /*
   * Number of the binary input channel
   */
  uint32_t channel;
  /*
   * State for the bianry input channel
   */
  protobuf_c_boolean state;
  /*
   * channel diagnostic bits
   */
  uint32_t diag;
};
#define BINARY_IO_TYPE_C__GET_SINGLE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&binary_io_type_c__get_single_response__descriptor) \
    , 0, 0, 0 }


struct  _BinaryIoTypeC__GetAllResponse
{
  ProtobufCMessage base;
  /*
   * binary coded map of input values. 0 means low, 1 means high, LSB is channel 0.
   * In case the input value is unknown, its value is reported as 0. The input value is invalid if
   * the diag NoSupplyVoltage bit is set.
   */
  uint32_t inputs;
  /*
   * diagnostic information for each channel, containing the ChannelDiag bits.
   * first diag corresponds to channel 0, second to channel 1, etc.
   */
  size_t n_diag;
  uint32_t *diag;
};
#define BINARY_IO_TYPE_C__GET_ALL_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&binary_io_type_c__get_all_response__descriptor) \
    , 0, 0,NULL }


typedef enum {
  BINARY_IO_TYPE_C__FUNCTION_CONTROL_GET_RESPONSE__TYPE__NOT_SET = 0,
  BINARY_IO_TYPE_C__FUNCTION_CONTROL_GET_RESPONSE__TYPE_SINGLE = 1,
  BINARY_IO_TYPE_C__FUNCTION_CONTROL_GET_RESPONSE__TYPE_ALL = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(BINARY_IO_TYPE_C__FUNCTION_CONTROL_GET_RESPONSE__TYPE)
} BinaryIoTypeC__FunctionControlGetResponse__TypeCase;

/*
 * FunctionControlGetResponse to pass to Functionblock.FunctionControlResponse.functionSpecificControlGet hook
 */
struct  _BinaryIoTypeC__FunctionControlGetResponse
{
  ProtobufCMessage base;
  BinaryIoTypeC__FunctionControlGetResponse__TypeCase type_case;
  union {
    BinaryIoTypeC__GetSingleResponse *single;
    BinaryIoTypeC__GetAllResponse *all;
  };
};
#define BINARY_IO_TYPE_C__FUNCTION_CONTROL_GET_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&binary_io_type_c__function_control_get_response__descriptor) \
    , BINARY_IO_TYPE_C__FUNCTION_CONTROL_GET_RESPONSE__TYPE__NOT_SET, {0} }


struct  _BinaryIoTypeC__SetSingleResponse
{
  ProtobufCMessage base;
};
#define BINARY_IO_TYPE_C__SET_SINGLE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&binary_io_type_c__set_single_response__descriptor) \
     }


struct  _BinaryIoTypeC__SetAllResponse
{
  ProtobufCMessage base;
};
#define BINARY_IO_TYPE_C__SET_ALL_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&binary_io_type_c__set_all_response__descriptor) \
     }


typedef enum {
  BINARY_IO_TYPE_C__FUNCTION_CONTROL_SET_RESPONSE__TYPE__NOT_SET = 0,
  BINARY_IO_TYPE_C__FUNCTION_CONTROL_SET_RESPONSE__TYPE_SINGLE = 1,
  BINARY_IO_TYPE_C__FUNCTION_CONTROL_SET_RESPONSE__TYPE_ALL = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(BINARY_IO_TYPE_C__FUNCTION_CONTROL_SET_RESPONSE__TYPE)
} BinaryIoTypeC__FunctionControlSetResponse__TypeCase;

/*
 * FunctionControlSetResponse to pass to Functionblock.FunctionControlResponse.functionSpecificControlSet hook
 */
struct  _BinaryIoTypeC__FunctionControlSetResponse
{
  ProtobufCMessage base;
  BinaryIoTypeC__FunctionControlSetResponse__TypeCase type_case;
  union {
    BinaryIoTypeC__SetSingleResponse *single;
    BinaryIoTypeC__SetAllResponse *all;
  };
};
#define BINARY_IO_TYPE_C__FUNCTION_CONTROL_SET_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&binary_io_type_c__function_control_set_response__descriptor) \
    , BINARY_IO_TYPE_C__FUNCTION_CONTROL_SET_RESPONSE__TYPE__NOT_SET, {0} }


/*
 * ============= StreamControl ==================
 * StreamControlStart to pass to Functionblock.StreamControlStart.functionSpecificStreamControlStart hook
 */
struct  _BinaryIoTypeC__StreamControlStart
{
  ProtobufCMessage base;
  /*
   * mask to define which channels are considered in the stream. 0 means don't send channels value, 1 means sent it
   * LSB is channel 0
   */
  uint32_t channelfiltermask;
};
#define BINARY_IO_TYPE_C__STREAM_CONTROL_START__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&binary_io_type_c__stream_control_start__descriptor) \
    , 0 }


/*
 * Sample is taken whenever the values change with respect to the last reported sample on that stream.
 * An initial sample is sent immediately after stream start.
 */
struct  _BinaryIoTypeC__Sample
{
  ProtobufCMessage base;
  /*
   * Timestamp for that specific channels sample. This is the time the sample was taken.
   * This timestamp is in microseconds since the start of the device and does not get synchronized with the clients time.
   */
  uint64_t timestamp;
  /*
   * binary coded map of input values. 0 means low, 1 means high, LSB is channel 0.
   * In case the input value is unknown, its value is reported as 0.
   */
  uint32_t values;
};
#define BINARY_IO_TYPE_C__SAMPLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&binary_io_type_c__sample__descriptor) \
    , 0, 0 }


/*
 * StreamData to pass to Functionblock.StreamData.functionSpecificStreamData hook
 */
struct  _BinaryIoTypeC__StreamData
{
  ProtobufCMessage base;
  size_t n_samples;
  BinaryIoTypeC__Sample **samples;
};
#define BINARY_IO_TYPE_C__STREAM_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&binary_io_type_c__stream_data__descriptor) \
    , 0,NULL }


/* BinaryIoTypeC__ChannelConfig methods */
void   binary_io_type_c__channel_config__init
                     (BinaryIoTypeC__ChannelConfig         *message);
size_t binary_io_type_c__channel_config__get_packed_size
                     (const BinaryIoTypeC__ChannelConfig   *message);
size_t binary_io_type_c__channel_config__pack
                     (const BinaryIoTypeC__ChannelConfig   *message,
                      uint8_t             *out);
size_t binary_io_type_c__channel_config__pack_to_buffer
                     (const BinaryIoTypeC__ChannelConfig   *message,
                      ProtobufCBuffer     *buffer);
BinaryIoTypeC__ChannelConfig *
       binary_io_type_c__channel_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   binary_io_type_c__channel_config__free_unpacked
                     (BinaryIoTypeC__ChannelConfig *message,
                      ProtobufCAllocator *allocator);
/* BinaryIoTypeC__ConfigurationSet methods */
void   binary_io_type_c__configuration_set__init
                     (BinaryIoTypeC__ConfigurationSet         *message);
size_t binary_io_type_c__configuration_set__get_packed_size
                     (const BinaryIoTypeC__ConfigurationSet   *message);
size_t binary_io_type_c__configuration_set__pack
                     (const BinaryIoTypeC__ConfigurationSet   *message,
                      uint8_t             *out);
size_t binary_io_type_c__configuration_set__pack_to_buffer
                     (const BinaryIoTypeC__ConfigurationSet   *message,
                      ProtobufCBuffer     *buffer);
BinaryIoTypeC__ConfigurationSet *
       binary_io_type_c__configuration_set__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   binary_io_type_c__configuration_set__free_unpacked
                     (BinaryIoTypeC__ConfigurationSet *message,
                      ProtobufCAllocator *allocator);
/* BinaryIoTypeC__ConfigurationSetResponse methods */
void   binary_io_type_c__configuration_set_response__init
                     (BinaryIoTypeC__ConfigurationSetResponse         *message);
size_t binary_io_type_c__configuration_set_response__get_packed_size
                     (const BinaryIoTypeC__ConfigurationSetResponse   *message);
size_t binary_io_type_c__configuration_set_response__pack
                     (const BinaryIoTypeC__ConfigurationSetResponse   *message,
                      uint8_t             *out);
size_t binary_io_type_c__configuration_set_response__pack_to_buffer
                     (const BinaryIoTypeC__ConfigurationSetResponse   *message,
                      ProtobufCBuffer     *buffer);
BinaryIoTypeC__ConfigurationSetResponse *
       binary_io_type_c__configuration_set_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   binary_io_type_c__configuration_set_response__free_unpacked
                     (BinaryIoTypeC__ConfigurationSetResponse *message,
                      ProtobufCAllocator *allocator);
/* BinaryIoTypeC__ConfigurationGet methods */
void   binary_io_type_c__configuration_get__init
                     (BinaryIoTypeC__ConfigurationGet         *message);
size_t binary_io_type_c__configuration_get__get_packed_size
                     (const BinaryIoTypeC__ConfigurationGet   *message);
size_t binary_io_type_c__configuration_get__pack
                     (const BinaryIoTypeC__ConfigurationGet   *message,
                      uint8_t             *out);
size_t binary_io_type_c__configuration_get__pack_to_buffer
                     (const BinaryIoTypeC__ConfigurationGet   *message,
                      ProtobufCBuffer     *buffer);
BinaryIoTypeC__ConfigurationGet *
       binary_io_type_c__configuration_get__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   binary_io_type_c__configuration_get__free_unpacked
                     (BinaryIoTypeC__ConfigurationGet *message,
                      ProtobufCAllocator *allocator);
/* BinaryIoTypeC__ConfigurationGetResponse methods */
void   binary_io_type_c__configuration_get_response__init
                     (BinaryIoTypeC__ConfigurationGetResponse         *message);
size_t binary_io_type_c__configuration_get_response__get_packed_size
                     (const BinaryIoTypeC__ConfigurationGetResponse   *message);
size_t binary_io_type_c__configuration_get_response__pack
                     (const BinaryIoTypeC__ConfigurationGetResponse   *message,
                      uint8_t             *out);
size_t binary_io_type_c__configuration_get_response__pack_to_buffer
                     (const BinaryIoTypeC__ConfigurationGetResponse   *message,
                      ProtobufCBuffer     *buffer);
BinaryIoTypeC__ConfigurationGetResponse *
       binary_io_type_c__configuration_get_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   binary_io_type_c__configuration_get_response__free_unpacked
                     (BinaryIoTypeC__ConfigurationGetResponse *message,
                      ProtobufCAllocator *allocator);
/* BinaryIoTypeC__ConfigurationDescribe methods */
void   binary_io_type_c__configuration_describe__init
                     (BinaryIoTypeC__ConfigurationDescribe         *message);
size_t binary_io_type_c__configuration_describe__get_packed_size
                     (const BinaryIoTypeC__ConfigurationDescribe   *message);
size_t binary_io_type_c__configuration_describe__pack
                     (const BinaryIoTypeC__ConfigurationDescribe   *message,
                      uint8_t             *out);
size_t binary_io_type_c__configuration_describe__pack_to_buffer
                     (const BinaryIoTypeC__ConfigurationDescribe   *message,
                      ProtobufCBuffer     *buffer);
BinaryIoTypeC__ConfigurationDescribe *
       binary_io_type_c__configuration_describe__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   binary_io_type_c__configuration_describe__free_unpacked
                     (BinaryIoTypeC__ConfigurationDescribe *message,
                      ProtobufCAllocator *allocator);
/* BinaryIoTypeC__ConfigurationDescribeResponse methods */
void   binary_io_type_c__configuration_describe_response__init
                     (BinaryIoTypeC__ConfigurationDescribeResponse         *message);
size_t binary_io_type_c__configuration_describe_response__get_packed_size
                     (const BinaryIoTypeC__ConfigurationDescribeResponse   *message);
size_t binary_io_type_c__configuration_describe_response__pack
                     (const BinaryIoTypeC__ConfigurationDescribeResponse   *message,
                      uint8_t             *out);
size_t binary_io_type_c__configuration_describe_response__pack_to_buffer
                     (const BinaryIoTypeC__ConfigurationDescribeResponse   *message,
                      ProtobufCBuffer     *buffer);
BinaryIoTypeC__ConfigurationDescribeResponse *
       binary_io_type_c__configuration_describe_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   binary_io_type_c__configuration_describe_response__free_unpacked
                     (BinaryIoTypeC__ConfigurationDescribeResponse *message,
                      ProtobufCAllocator *allocator);
/* BinaryIoTypeC__ConfigurationResponse methods */
void   binary_io_type_c__configuration_response__init
                     (BinaryIoTypeC__ConfigurationResponse         *message);
size_t binary_io_type_c__configuration_response__get_packed_size
                     (const BinaryIoTypeC__ConfigurationResponse   *message);
size_t binary_io_type_c__configuration_response__pack
                     (const BinaryIoTypeC__ConfigurationResponse   *message,
                      uint8_t             *out);
size_t binary_io_type_c__configuration_response__pack_to_buffer
                     (const BinaryIoTypeC__ConfigurationResponse   *message,
                      ProtobufCBuffer     *buffer);
BinaryIoTypeC__ConfigurationResponse *
       binary_io_type_c__configuration_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   binary_io_type_c__configuration_response__free_unpacked
                     (BinaryIoTypeC__ConfigurationResponse *message,
                      ProtobufCAllocator *allocator);
/* BinaryIoTypeC__GetSingle methods */
void   binary_io_type_c__get_single__init
                     (BinaryIoTypeC__GetSingle         *message);
size_t binary_io_type_c__get_single__get_packed_size
                     (const BinaryIoTypeC__GetSingle   *message);
size_t binary_io_type_c__get_single__pack
                     (const BinaryIoTypeC__GetSingle   *message,
                      uint8_t             *out);
size_t binary_io_type_c__get_single__pack_to_buffer
                     (const BinaryIoTypeC__GetSingle   *message,
                      ProtobufCBuffer     *buffer);
BinaryIoTypeC__GetSingle *
       binary_io_type_c__get_single__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   binary_io_type_c__get_single__free_unpacked
                     (BinaryIoTypeC__GetSingle *message,
                      ProtobufCAllocator *allocator);
/* BinaryIoTypeC__GetAll methods */
void   binary_io_type_c__get_all__init
                     (BinaryIoTypeC__GetAll         *message);
size_t binary_io_type_c__get_all__get_packed_size
                     (const BinaryIoTypeC__GetAll   *message);
size_t binary_io_type_c__get_all__pack
                     (const BinaryIoTypeC__GetAll   *message,
                      uint8_t             *out);
size_t binary_io_type_c__get_all__pack_to_buffer
                     (const BinaryIoTypeC__GetAll   *message,
                      ProtobufCBuffer     *buffer);
BinaryIoTypeC__GetAll *
       binary_io_type_c__get_all__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   binary_io_type_c__get_all__free_unpacked
                     (BinaryIoTypeC__GetAll *message,
                      ProtobufCAllocator *allocator);
/* BinaryIoTypeC__FunctionControlGet methods */
void   binary_io_type_c__function_control_get__init
                     (BinaryIoTypeC__FunctionControlGet         *message);
size_t binary_io_type_c__function_control_get__get_packed_size
                     (const BinaryIoTypeC__FunctionControlGet   *message);
size_t binary_io_type_c__function_control_get__pack
                     (const BinaryIoTypeC__FunctionControlGet   *message,
                      uint8_t             *out);
size_t binary_io_type_c__function_control_get__pack_to_buffer
                     (const BinaryIoTypeC__FunctionControlGet   *message,
                      ProtobufCBuffer     *buffer);
BinaryIoTypeC__FunctionControlGet *
       binary_io_type_c__function_control_get__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   binary_io_type_c__function_control_get__free_unpacked
                     (BinaryIoTypeC__FunctionControlGet *message,
                      ProtobufCAllocator *allocator);
/* BinaryIoTypeC__SetSingle methods */
void   binary_io_type_c__set_single__init
                     (BinaryIoTypeC__SetSingle         *message);
size_t binary_io_type_c__set_single__get_packed_size
                     (const BinaryIoTypeC__SetSingle   *message);
size_t binary_io_type_c__set_single__pack
                     (const BinaryIoTypeC__SetSingle   *message,
                      uint8_t             *out);
size_t binary_io_type_c__set_single__pack_to_buffer
                     (const BinaryIoTypeC__SetSingle   *message,
                      ProtobufCBuffer     *buffer);
BinaryIoTypeC__SetSingle *
       binary_io_type_c__set_single__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   binary_io_type_c__set_single__free_unpacked
                     (BinaryIoTypeC__SetSingle *message,
                      ProtobufCAllocator *allocator);
/* BinaryIoTypeC__SetAll methods */
void   binary_io_type_c__set_all__init
                     (BinaryIoTypeC__SetAll         *message);
size_t binary_io_type_c__set_all__get_packed_size
                     (const BinaryIoTypeC__SetAll   *message);
size_t binary_io_type_c__set_all__pack
                     (const BinaryIoTypeC__SetAll   *message,
                      uint8_t             *out);
size_t binary_io_type_c__set_all__pack_to_buffer
                     (const BinaryIoTypeC__SetAll   *message,
                      ProtobufCBuffer     *buffer);
BinaryIoTypeC__SetAll *
       binary_io_type_c__set_all__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   binary_io_type_c__set_all__free_unpacked
                     (BinaryIoTypeC__SetAll *message,
                      ProtobufCAllocator *allocator);
/* BinaryIoTypeC__FunctionControlSet methods */
void   binary_io_type_c__function_control_set__init
                     (BinaryIoTypeC__FunctionControlSet         *message);
size_t binary_io_type_c__function_control_set__get_packed_size
                     (const BinaryIoTypeC__FunctionControlSet   *message);
size_t binary_io_type_c__function_control_set__pack
                     (const BinaryIoTypeC__FunctionControlSet   *message,
                      uint8_t             *out);
size_t binary_io_type_c__function_control_set__pack_to_buffer
                     (const BinaryIoTypeC__FunctionControlSet   *message,
                      ProtobufCBuffer     *buffer);
BinaryIoTypeC__FunctionControlSet *
       binary_io_type_c__function_control_set__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   binary_io_type_c__function_control_set__free_unpacked
                     (BinaryIoTypeC__FunctionControlSet *message,
                      ProtobufCAllocator *allocator);
/* BinaryIoTypeC__GetSingleResponse methods */
void   binary_io_type_c__get_single_response__init
                     (BinaryIoTypeC__GetSingleResponse         *message);
size_t binary_io_type_c__get_single_response__get_packed_size
                     (const BinaryIoTypeC__GetSingleResponse   *message);
size_t binary_io_type_c__get_single_response__pack
                     (const BinaryIoTypeC__GetSingleResponse   *message,
                      uint8_t             *out);
size_t binary_io_type_c__get_single_response__pack_to_buffer
                     (const BinaryIoTypeC__GetSingleResponse   *message,
                      ProtobufCBuffer     *buffer);
BinaryIoTypeC__GetSingleResponse *
       binary_io_type_c__get_single_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   binary_io_type_c__get_single_response__free_unpacked
                     (BinaryIoTypeC__GetSingleResponse *message,
                      ProtobufCAllocator *allocator);
/* BinaryIoTypeC__GetAllResponse methods */
void   binary_io_type_c__get_all_response__init
                     (BinaryIoTypeC__GetAllResponse         *message);
size_t binary_io_type_c__get_all_response__get_packed_size
                     (const BinaryIoTypeC__GetAllResponse   *message);
size_t binary_io_type_c__get_all_response__pack
                     (const BinaryIoTypeC__GetAllResponse   *message,
                      uint8_t             *out);
size_t binary_io_type_c__get_all_response__pack_to_buffer
                     (const BinaryIoTypeC__GetAllResponse   *message,
                      ProtobufCBuffer     *buffer);
BinaryIoTypeC__GetAllResponse *
       binary_io_type_c__get_all_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   binary_io_type_c__get_all_response__free_unpacked
                     (BinaryIoTypeC__GetAllResponse *message,
                      ProtobufCAllocator *allocator);
/* BinaryIoTypeC__FunctionControlGetResponse methods */
void   binary_io_type_c__function_control_get_response__init
                     (BinaryIoTypeC__FunctionControlGetResponse         *message);
size_t binary_io_type_c__function_control_get_response__get_packed_size
                     (const BinaryIoTypeC__FunctionControlGetResponse   *message);
size_t binary_io_type_c__function_control_get_response__pack
                     (const BinaryIoTypeC__FunctionControlGetResponse   *message,
                      uint8_t             *out);
size_t binary_io_type_c__function_control_get_response__pack_to_buffer
                     (const BinaryIoTypeC__FunctionControlGetResponse   *message,
                      ProtobufCBuffer     *buffer);
BinaryIoTypeC__FunctionControlGetResponse *
       binary_io_type_c__function_control_get_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   binary_io_type_c__function_control_get_response__free_unpacked
                     (BinaryIoTypeC__FunctionControlGetResponse *message,
                      ProtobufCAllocator *allocator);
/* BinaryIoTypeC__SetSingleResponse methods */
void   binary_io_type_c__set_single_response__init
                     (BinaryIoTypeC__SetSingleResponse         *message);
size_t binary_io_type_c__set_single_response__get_packed_size
                     (const BinaryIoTypeC__SetSingleResponse   *message);
size_t binary_io_type_c__set_single_response__pack
                     (const BinaryIoTypeC__SetSingleResponse   *message,
                      uint8_t             *out);
size_t binary_io_type_c__set_single_response__pack_to_buffer
                     (const BinaryIoTypeC__SetSingleResponse   *message,
                      ProtobufCBuffer     *buffer);
BinaryIoTypeC__SetSingleResponse *
       binary_io_type_c__set_single_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   binary_io_type_c__set_single_response__free_unpacked
                     (BinaryIoTypeC__SetSingleResponse *message,
                      ProtobufCAllocator *allocator);
/* BinaryIoTypeC__SetAllResponse methods */
void   binary_io_type_c__set_all_response__init
                     (BinaryIoTypeC__SetAllResponse         *message);
size_t binary_io_type_c__set_all_response__get_packed_size
                     (const BinaryIoTypeC__SetAllResponse   *message);
size_t binary_io_type_c__set_all_response__pack
                     (const BinaryIoTypeC__SetAllResponse   *message,
                      uint8_t             *out);
size_t binary_io_type_c__set_all_response__pack_to_buffer
                     (const BinaryIoTypeC__SetAllResponse   *message,
                      ProtobufCBuffer     *buffer);
BinaryIoTypeC__SetAllResponse *
       binary_io_type_c__set_all_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   binary_io_type_c__set_all_response__free_unpacked
                     (BinaryIoTypeC__SetAllResponse *message,
                      ProtobufCAllocator *allocator);
/* BinaryIoTypeC__FunctionControlSetResponse methods */
void   binary_io_type_c__function_control_set_response__init
                     (BinaryIoTypeC__FunctionControlSetResponse         *message);
size_t binary_io_type_c__function_control_set_response__get_packed_size
                     (const BinaryIoTypeC__FunctionControlSetResponse   *message);
size_t binary_io_type_c__function_control_set_response__pack
                     (const BinaryIoTypeC__FunctionControlSetResponse   *message,
                      uint8_t             *out);
size_t binary_io_type_c__function_control_set_response__pack_to_buffer
                     (const BinaryIoTypeC__FunctionControlSetResponse   *message,
                      ProtobufCBuffer     *buffer);
BinaryIoTypeC__FunctionControlSetResponse *
       binary_io_type_c__function_control_set_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   binary_io_type_c__function_control_set_response__free_unpacked
                     (BinaryIoTypeC__FunctionControlSetResponse *message,
                      ProtobufCAllocator *allocator);
/* BinaryIoTypeC__StreamControlStart methods */
void   binary_io_type_c__stream_control_start__init
                     (BinaryIoTypeC__StreamControlStart         *message);
size_t binary_io_type_c__stream_control_start__get_packed_size
                     (const BinaryIoTypeC__StreamControlStart   *message);
size_t binary_io_type_c__stream_control_start__pack
                     (const BinaryIoTypeC__StreamControlStart   *message,
                      uint8_t             *out);
size_t binary_io_type_c__stream_control_start__pack_to_buffer
                     (const BinaryIoTypeC__StreamControlStart   *message,
                      ProtobufCBuffer     *buffer);
BinaryIoTypeC__StreamControlStart *
       binary_io_type_c__stream_control_start__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   binary_io_type_c__stream_control_start__free_unpacked
                     (BinaryIoTypeC__StreamControlStart *message,
                      ProtobufCAllocator *allocator);
/* BinaryIoTypeC__Sample methods */
void   binary_io_type_c__sample__init
                     (BinaryIoTypeC__Sample         *message);
size_t binary_io_type_c__sample__get_packed_size
                     (const BinaryIoTypeC__Sample   *message);
size_t binary_io_type_c__sample__pack
                     (const BinaryIoTypeC__Sample   *message,
                      uint8_t             *out);
size_t binary_io_type_c__sample__pack_to_buffer
                     (const BinaryIoTypeC__Sample   *message,
                      ProtobufCBuffer     *buffer);
BinaryIoTypeC__Sample *
       binary_io_type_c__sample__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   binary_io_type_c__sample__free_unpacked
                     (BinaryIoTypeC__Sample *message,
                      ProtobufCAllocator *allocator);
/* BinaryIoTypeC__StreamData methods */
void   binary_io_type_c__stream_data__init
                     (BinaryIoTypeC__StreamData         *message);
size_t binary_io_type_c__stream_data__get_packed_size
                     (const BinaryIoTypeC__StreamData   *message);
size_t binary_io_type_c__stream_data__pack
                     (const BinaryIoTypeC__StreamData   *message,
                      uint8_t             *out);
size_t binary_io_type_c__stream_data__pack_to_buffer
                     (const BinaryIoTypeC__StreamData   *message,
                      ProtobufCBuffer     *buffer);
BinaryIoTypeC__StreamData *
       binary_io_type_c__stream_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   binary_io_type_c__stream_data__free_unpacked
                     (BinaryIoTypeC__StreamData *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*BinaryIoTypeC__ChannelConfig_Closure)
                 (const BinaryIoTypeC__ChannelConfig *message,
                  void *closure_data);
typedef void (*BinaryIoTypeC__ConfigurationSet_Closure)
                 (const BinaryIoTypeC__ConfigurationSet *message,
                  void *closure_data);
typedef void (*BinaryIoTypeC__ConfigurationSetResponse_Closure)
                 (const BinaryIoTypeC__ConfigurationSetResponse *message,
                  void *closure_data);
typedef void (*BinaryIoTypeC__ConfigurationGet_Closure)
                 (const BinaryIoTypeC__ConfigurationGet *message,
                  void *closure_data);
typedef void (*BinaryIoTypeC__ConfigurationGetResponse_Closure)
                 (const BinaryIoTypeC__ConfigurationGetResponse *message,
                  void *closure_data);
typedef void (*BinaryIoTypeC__ConfigurationDescribe_Closure)
                 (const BinaryIoTypeC__ConfigurationDescribe *message,
                  void *closure_data);
typedef void (*BinaryIoTypeC__ConfigurationDescribeResponse_Closure)
                 (const BinaryIoTypeC__ConfigurationDescribeResponse *message,
                  void *closure_data);
typedef void (*BinaryIoTypeC__ConfigurationResponse_Closure)
                 (const BinaryIoTypeC__ConfigurationResponse *message,
                  void *closure_data);
typedef void (*BinaryIoTypeC__GetSingle_Closure)
                 (const BinaryIoTypeC__GetSingle *message,
                  void *closure_data);
typedef void (*BinaryIoTypeC__GetAll_Closure)
                 (const BinaryIoTypeC__GetAll *message,
                  void *closure_data);
typedef void (*BinaryIoTypeC__FunctionControlGet_Closure)
                 (const BinaryIoTypeC__FunctionControlGet *message,
                  void *closure_data);
typedef void (*BinaryIoTypeC__SetSingle_Closure)
                 (const BinaryIoTypeC__SetSingle *message,
                  void *closure_data);
typedef void (*BinaryIoTypeC__SetAll_Closure)
                 (const BinaryIoTypeC__SetAll *message,
                  void *closure_data);
typedef void (*BinaryIoTypeC__FunctionControlSet_Closure)
                 (const BinaryIoTypeC__FunctionControlSet *message,
                  void *closure_data);
typedef void (*BinaryIoTypeC__GetSingleResponse_Closure)
                 (const BinaryIoTypeC__GetSingleResponse *message,
                  void *closure_data);
typedef void (*BinaryIoTypeC__GetAllResponse_Closure)
                 (const BinaryIoTypeC__GetAllResponse *message,
                  void *closure_data);
typedef void (*BinaryIoTypeC__FunctionControlGetResponse_Closure)
                 (const BinaryIoTypeC__FunctionControlGetResponse *message,
                  void *closure_data);
typedef void (*BinaryIoTypeC__SetSingleResponse_Closure)
                 (const BinaryIoTypeC__SetSingleResponse *message,
                  void *closure_data);
typedef void (*BinaryIoTypeC__SetAllResponse_Closure)
                 (const BinaryIoTypeC__SetAllResponse *message,
                  void *closure_data);
typedef void (*BinaryIoTypeC__FunctionControlSetResponse_Closure)
                 (const BinaryIoTypeC__FunctionControlSetResponse *message,
                  void *closure_data);
typedef void (*BinaryIoTypeC__StreamControlStart_Closure)
                 (const BinaryIoTypeC__StreamControlStart *message,
                  void *closure_data);
typedef void (*BinaryIoTypeC__Sample_Closure)
                 (const BinaryIoTypeC__Sample *message,
                  void *closure_data);
typedef void (*BinaryIoTypeC__StreamData_Closure)
                 (const BinaryIoTypeC__StreamData *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    binary_io_type_c__channel_mode__descriptor;
extern const ProtobufCEnumDescriptor    binary_io_type_c__channel_diag__descriptor;
extern const ProtobufCMessageDescriptor binary_io_type_c__channel_config__descriptor;
extern const ProtobufCMessageDescriptor binary_io_type_c__configuration_set__descriptor;
extern const ProtobufCMessageDescriptor binary_io_type_c__configuration_set_response__descriptor;
extern const ProtobufCMessageDescriptor binary_io_type_c__configuration_get__descriptor;
extern const ProtobufCMessageDescriptor binary_io_type_c__configuration_get_response__descriptor;
extern const ProtobufCMessageDescriptor binary_io_type_c__configuration_describe__descriptor;
extern const ProtobufCMessageDescriptor binary_io_type_c__configuration_describe_response__descriptor;
extern const ProtobufCMessageDescriptor binary_io_type_c__configuration_response__descriptor;
extern const ProtobufCMessageDescriptor binary_io_type_c__get_single__descriptor;
extern const ProtobufCMessageDescriptor binary_io_type_c__get_all__descriptor;
extern const ProtobufCMessageDescriptor binary_io_type_c__function_control_get__descriptor;
extern const ProtobufCMessageDescriptor binary_io_type_c__set_single__descriptor;
extern const ProtobufCMessageDescriptor binary_io_type_c__set_all__descriptor;
extern const ProtobufCMessageDescriptor binary_io_type_c__function_control_set__descriptor;
extern const ProtobufCMessageDescriptor binary_io_type_c__get_single_response__descriptor;
extern const ProtobufCMessageDescriptor binary_io_type_c__get_all_response__descriptor;
extern const ProtobufCMessageDescriptor binary_io_type_c__function_control_get_response__descriptor;
extern const ProtobufCMessageDescriptor binary_io_type_c__set_single_response__descriptor;
extern const ProtobufCMessageDescriptor binary_io_type_c__set_all_response__descriptor;
extern const ProtobufCMessageDescriptor binary_io_type_c__function_control_set_response__descriptor;
extern const ProtobufCMessageDescriptor binary_io_type_c__stream_control_start__descriptor;
extern const ProtobufCMessageDescriptor binary_io_type_c__sample__descriptor;
extern const ProtobufCMessageDescriptor binary_io_type_c__stream_data__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_binaryIoTypeC_2eproto__INCLUDED */
