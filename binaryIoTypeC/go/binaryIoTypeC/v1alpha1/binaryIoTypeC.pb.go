//
//Copyright Â© 2022 Ci4Rail GmbH <engineering@ci4rail.com>
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// IEC IEC61131-2 compliant binary IO

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.6.1
// source: binaryIoTypeC.proto

package v1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ============= Configuration =================
type ChannelMode int32

const (
	// input channel
	ChannelMode_BINARYIOTYPEC_INPUT_TYPE_1_3 ChannelMode = 0
	// output channel, simple push pull
	ChannelMode_BINARYIOTYPEC_OUTPUT_PUSH_PULL ChannelMode = 1 // further modes may be added later
)

// Enum value maps for ChannelMode.
var (
	ChannelMode_name = map[int32]string{
		0: "BINARYIOTYPEC_INPUT_TYPE_1_3",
		1: "BINARYIOTYPEC_OUTPUT_PUSH_PULL",
	}
	ChannelMode_value = map[string]int32{
		"BINARYIOTYPEC_INPUT_TYPE_1_3":   0,
		"BINARYIOTYPEC_OUTPUT_PUSH_PULL": 1,
	}
)

func (x ChannelMode) Enum() *ChannelMode {
	p := new(ChannelMode)
	*p = x
	return p
}

func (x ChannelMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChannelMode) Descriptor() protoreflect.EnumDescriptor {
	return file_binaryIoTypeC_proto_enumTypes[0].Descriptor()
}

func (ChannelMode) Type() protoreflect.EnumType {
	return &file_binaryIoTypeC_proto_enumTypes[0]
}

func (x ChannelMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChannelMode.Descriptor instead.
func (ChannelMode) EnumDescriptor() ([]byte, []int) {
	return file_binaryIoTypeC_proto_rawDescGZIP(), []int{0}
}

// Channel diagnostic bits. Multiple bits may be set at the same time.
type ChannelDiag int32

const (
	ChannelDiag_NoDiag ChannelDiag = 0
	// group supply voltage missing (input values can't be determined, output values can't be set)
	ChannelDiag_NoSupplyVoltage ChannelDiag = 1
	// channel current limiter is limiting current
	ChannelDiag_CurrentLimit ChannelDiag = 2
	// channel or group overload (output is disabled, output can't be set)
	ChannelDiag_Overload ChannelDiag = 4
	// group supply undervoltage
	ChannelDiag_SupplyUndervoltage ChannelDiag = 8
	// group supply overvoltage
	ChannelDiag_SupplyOvervoltage ChannelDiag = 16
)

// Enum value maps for ChannelDiag.
var (
	ChannelDiag_name = map[int32]string{
		0:  "NoDiag",
		1:  "NoSupplyVoltage",
		2:  "CurrentLimit",
		4:  "Overload",
		8:  "SupplyUndervoltage",
		16: "SupplyOvervoltage",
	}
	ChannelDiag_value = map[string]int32{
		"NoDiag":             0,
		"NoSupplyVoltage":    1,
		"CurrentLimit":       2,
		"Overload":           4,
		"SupplyUndervoltage": 8,
		"SupplyOvervoltage":  16,
	}
)

func (x ChannelDiag) Enum() *ChannelDiag {
	p := new(ChannelDiag)
	*p = x
	return p
}

func (x ChannelDiag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChannelDiag) Descriptor() protoreflect.EnumDescriptor {
	return file_binaryIoTypeC_proto_enumTypes[1].Descriptor()
}

func (ChannelDiag) Type() protoreflect.EnumType {
	return &file_binaryIoTypeC_proto_enumTypes[1]
}

func (x ChannelDiag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChannelDiag.Descriptor instead.
func (ChannelDiag) EnumDescriptor() ([]byte, []int) {
	return file_binaryIoTypeC_proto_rawDescGZIP(), []int{1}
}

type ChannelConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode ChannelMode `protobuf:"varint,1,opt,name=mode,proto3,enum=binaryIoTypeC.ChannelMode" json:"mode,omitempty"`
	// If channel is configured for output, initialValue defines the value after initialization
	// and after the watchdog has fired
	InitialValue bool `protobuf:"varint,2,opt,name=initialValue,proto3" json:"initialValue,omitempty"`
}

func (x *ChannelConfig) Reset() {
	*x = ChannelConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binaryIoTypeC_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelConfig) ProtoMessage() {}

func (x *ChannelConfig) ProtoReflect() protoreflect.Message {
	mi := &file_binaryIoTypeC_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelConfig.ProtoReflect.Descriptor instead.
func (*ChannelConfig) Descriptor() ([]byte, []int) {
	return file_binaryIoTypeC_proto_rawDescGZIP(), []int{0}
}

func (x *ChannelConfig) GetMode() ChannelMode {
	if x != nil {
		return x.Mode
	}
	return ChannelMode_BINARYIOTYPEC_INPUT_TYPE_1_3
}

func (x *ChannelConfig) GetInitialValue() bool {
	if x != nil {
		return x.InitialValue
	}
	return false
}

// ConfigurationSet to pass to Functionblock.Configuration.functionSpecificConfigurationSet hook
type ConfigurationSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// per channel configuration (one per channel/pin)
	// the number of channelConfigs must correspond to the actual channels of the device
	// The first channel is for channel0, the second for channel1, etc.
	ChannelConfig []*ChannelConfig `protobuf:"bytes,1,rep,name=channelConfig,proto3" json:"channelConfig,omitempty"`
	// Map to enable the output watchdog for binary output channels. The output watchdog fires if the output is not updated for a certain time.
	// LSB is Channel0, 1: output watchdog enabled, 0: disabled
	OutputWatchdogMask uint32 `protobuf:"fixed32,2,opt,name=outputWatchdogMask,proto3" json:"outputWatchdogMask,omitempty"`
	// The output watchdog timeout in ms.
	OutputWatchdogTimeout uint32 `protobuf:"fixed32,3,opt,name=outputWatchdogTimeout,proto3" json:"outputWatchdogTimeout,omitempty"`
}

func (x *ConfigurationSet) Reset() {
	*x = ConfigurationSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binaryIoTypeC_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationSet) ProtoMessage() {}

func (x *ConfigurationSet) ProtoReflect() protoreflect.Message {
	mi := &file_binaryIoTypeC_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationSet.ProtoReflect.Descriptor instead.
func (*ConfigurationSet) Descriptor() ([]byte, []int) {
	return file_binaryIoTypeC_proto_rawDescGZIP(), []int{1}
}

func (x *ConfigurationSet) GetChannelConfig() []*ChannelConfig {
	if x != nil {
		return x.ChannelConfig
	}
	return nil
}

func (x *ConfigurationSet) GetOutputWatchdogMask() uint32 {
	if x != nil {
		return x.OutputWatchdogMask
	}
	return 0
}

func (x *ConfigurationSet) GetOutputWatchdogTimeout() uint32 {
	if x != nil {
		return x.OutputWatchdogTimeout
	}
	return 0
}

// ConfigurationSetResponse to pass to Functionblock.Configuration.functionSpecificConfigurationSetResponse hook
type ConfigurationSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfigurationSetResponse) Reset() {
	*x = ConfigurationSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binaryIoTypeC_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationSetResponse) ProtoMessage() {}

func (x *ConfigurationSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_binaryIoTypeC_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationSetResponse.ProtoReflect.Descriptor instead.
func (*ConfigurationSetResponse) Descriptor() ([]byte, []int) {
	return file_binaryIoTypeC_proto_rawDescGZIP(), []int{2}
}

// ConfigurationGet to pass to Functionblock.Configuration.functionSpecificConfigurationGet hook
type ConfigurationGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfigurationGet) Reset() {
	*x = ConfigurationGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binaryIoTypeC_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationGet) ProtoMessage() {}

func (x *ConfigurationGet) ProtoReflect() protoreflect.Message {
	mi := &file_binaryIoTypeC_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationGet.ProtoReflect.Descriptor instead.
func (*ConfigurationGet) Descriptor() ([]byte, []int) {
	return file_binaryIoTypeC_proto_rawDescGZIP(), []int{3}
}

// ConfigurationGetResponse to pass to Functionblock.ConfigurationGetResponse.functionSpecificConfigurationGetResponse hook
// Returns the current hardware configuration
type ConfigurationGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// per channel configuration (one per channel/pin)
	ChannelConfig []*ChannelConfig `protobuf:"bytes,1,rep,name=channelConfig,proto3" json:"channelConfig,omitempty"`
	// Map to enable the output watchdog for binary output channels. The output watchdog fires if the output is not updated for a certain time.
	// LSB is Channel0, 1: output watchdog enabled, 0: disabled
	OutputWatchdogMask uint32 `protobuf:"fixed32,2,opt,name=outputWatchdogMask,proto3" json:"outputWatchdogMask,omitempty"`
	// The output watchdog timeout in ms.
	OutputWatchdogTimeout uint32 `protobuf:"fixed32,3,opt,name=outputWatchdogTimeout,proto3" json:"outputWatchdogTimeout,omitempty"`
}

func (x *ConfigurationGetResponse) Reset() {
	*x = ConfigurationGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binaryIoTypeC_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationGetResponse) ProtoMessage() {}

func (x *ConfigurationGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_binaryIoTypeC_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationGetResponse.ProtoReflect.Descriptor instead.
func (*ConfigurationGetResponse) Descriptor() ([]byte, []int) {
	return file_binaryIoTypeC_proto_rawDescGZIP(), []int{4}
}

func (x *ConfigurationGetResponse) GetChannelConfig() []*ChannelConfig {
	if x != nil {
		return x.ChannelConfig
	}
	return nil
}

func (x *ConfigurationGetResponse) GetOutputWatchdogMask() uint32 {
	if x != nil {
		return x.OutputWatchdogMask
	}
	return 0
}

func (x *ConfigurationGetResponse) GetOutputWatchdogTimeout() uint32 {
	if x != nil {
		return x.OutputWatchdogTimeout
	}
	return 0
}

// ConfigurationDescribe to pass to Functionblock.Configuration.functionSpecificConfigurationDescribe hook
type ConfigurationDescribe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfigurationDescribe) Reset() {
	*x = ConfigurationDescribe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binaryIoTypeC_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationDescribe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationDescribe) ProtoMessage() {}

func (x *ConfigurationDescribe) ProtoReflect() protoreflect.Message {
	mi := &file_binaryIoTypeC_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationDescribe.ProtoReflect.Descriptor instead.
func (*ConfigurationDescribe) Descriptor() ([]byte, []int) {
	return file_binaryIoTypeC_proto_rawDescGZIP(), []int{5}
}

type ConfigurationDescribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumberOfChannels uint32 `protobuf:"fixed32,1,opt,name=numberOfChannels,proto3" json:"numberOfChannels,omitempty"`
}

func (x *ConfigurationDescribeResponse) Reset() {
	*x = ConfigurationDescribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binaryIoTypeC_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationDescribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationDescribeResponse) ProtoMessage() {}

func (x *ConfigurationDescribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_binaryIoTypeC_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationDescribeResponse.ProtoReflect.Descriptor instead.
func (*ConfigurationDescribeResponse) Descriptor() ([]byte, []int) {
	return file_binaryIoTypeC_proto_rawDescGZIP(), []int{6}
}

func (x *ConfigurationDescribeResponse) GetNumberOfChannels() uint32 {
	if x != nil {
		return x.NumberOfChannels
	}
	return 0
}

// ConfigurationResponse to pass to Functionblock.ConfigurationResponse.functionSpecificConfigurationResponse hook
type ConfigurationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*ConfigurationResponse_Get
	//	*ConfigurationResponse_Set
	//	*ConfigurationResponse_Describe
	Type isConfigurationResponse_Type `protobuf_oneof:"type"`
}

func (x *ConfigurationResponse) Reset() {
	*x = ConfigurationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binaryIoTypeC_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationResponse) ProtoMessage() {}

func (x *ConfigurationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_binaryIoTypeC_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationResponse.ProtoReflect.Descriptor instead.
func (*ConfigurationResponse) Descriptor() ([]byte, []int) {
	return file_binaryIoTypeC_proto_rawDescGZIP(), []int{7}
}

func (m *ConfigurationResponse) GetType() isConfigurationResponse_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *ConfigurationResponse) GetGet() *ConfigurationGetResponse {
	if x, ok := x.GetType().(*ConfigurationResponse_Get); ok {
		return x.Get
	}
	return nil
}

func (x *ConfigurationResponse) GetSet() *ConfigurationSetResponse {
	if x, ok := x.GetType().(*ConfigurationResponse_Set); ok {
		return x.Set
	}
	return nil
}

func (x *ConfigurationResponse) GetDescribe() *ConfigurationDescribeResponse {
	if x, ok := x.GetType().(*ConfigurationResponse_Describe); ok {
		return x.Describe
	}
	return nil
}

type isConfigurationResponse_Type interface {
	isConfigurationResponse_Type()
}

type ConfigurationResponse_Get struct {
	Get *ConfigurationGetResponse `protobuf:"bytes,1,opt,name=get,proto3,oneof"`
}

type ConfigurationResponse_Set struct {
	Set *ConfigurationSetResponse `protobuf:"bytes,2,opt,name=set,proto3,oneof"`
}

type ConfigurationResponse_Describe struct {
	Describe *ConfigurationDescribeResponse `protobuf:"bytes,3,opt,name=describe,proto3,oneof"`
}

func (*ConfigurationResponse_Get) isConfigurationResponse_Type() {}

func (*ConfigurationResponse_Set) isConfigurationResponse_Type() {}

func (*ConfigurationResponse_Describe) isConfigurationResponse_Type() {}

// ============= FunctionControl =================
// Gets the current value of a single binary channel
type GetSingle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the binary input channel (0 - (number of channels - 1))
	Channel uint32 `protobuf:"fixed32,1,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *GetSingle) Reset() {
	*x = GetSingle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binaryIoTypeC_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSingle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSingle) ProtoMessage() {}

func (x *GetSingle) ProtoReflect() protoreflect.Message {
	mi := &file_binaryIoTypeC_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSingle.ProtoReflect.Descriptor instead.
func (*GetSingle) Descriptor() ([]byte, []int) {
	return file_binaryIoTypeC_proto_rawDescGZIP(), []int{8}
}

func (x *GetSingle) GetChannel() uint32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

// Gets the values of all binary channels
type GetAll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// mask to define which channels are affected by the get all command. 0 means not set, 1 means set, LSB is channel 0
	Mask uint32 `protobuf:"fixed32,1,opt,name=mask,proto3" json:"mask,omitempty"`
}

func (x *GetAll) Reset() {
	*x = GetAll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binaryIoTypeC_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAll) ProtoMessage() {}

func (x *GetAll) ProtoReflect() protoreflect.Message {
	mi := &file_binaryIoTypeC_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAll.ProtoReflect.Descriptor instead.
func (*GetAll) Descriptor() ([]byte, []int) {
	return file_binaryIoTypeC_proto_rawDescGZIP(), []int{9}
}

func (x *GetAll) GetMask() uint32 {
	if x != nil {
		return x.Mask
	}
	return 0
}

// FunctionControlGet to pass to Functionblock.FunctionControl.functionSpecificFunctionControlGet hook
type FunctionControlGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*FunctionControlGet_Single
	//	*FunctionControlGet_All
	Type isFunctionControlGet_Type `protobuf_oneof:"type"`
}

func (x *FunctionControlGet) Reset() {
	*x = FunctionControlGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binaryIoTypeC_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionControlGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionControlGet) ProtoMessage() {}

func (x *FunctionControlGet) ProtoReflect() protoreflect.Message {
	mi := &file_binaryIoTypeC_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionControlGet.ProtoReflect.Descriptor instead.
func (*FunctionControlGet) Descriptor() ([]byte, []int) {
	return file_binaryIoTypeC_proto_rawDescGZIP(), []int{10}
}

func (m *FunctionControlGet) GetType() isFunctionControlGet_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *FunctionControlGet) GetSingle() *GetSingle {
	if x, ok := x.GetType().(*FunctionControlGet_Single); ok {
		return x.Single
	}
	return nil
}

func (x *FunctionControlGet) GetAll() *GetAll {
	if x, ok := x.GetType().(*FunctionControlGet_All); ok {
		return x.All
	}
	return nil
}

type isFunctionControlGet_Type interface {
	isFunctionControlGet_Type()
}

type FunctionControlGet_Single struct {
	Single *GetSingle `protobuf:"bytes,1,opt,name=single,proto3,oneof"`
}

type FunctionControlGet_All struct {
	All *GetAll `protobuf:"bytes,2,opt,name=all,proto3,oneof"`
}

func (*FunctionControlGet_Single) isFunctionControlGet_Type() {}

func (*FunctionControlGet_All) isFunctionControlGet_Type() {}

// Sets the value of a single binary channel
type SetSingle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of the binary output channel (0 - (number of channels - 1))
	Channel uint32 `protobuf:"fixed32,1,opt,name=channel,proto3" json:"channel,omitempty"`
	// State of the binary output channel. false means low, true means high.
	State bool `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *SetSingle) Reset() {
	*x = SetSingle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binaryIoTypeC_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSingle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSingle) ProtoMessage() {}

func (x *SetSingle) ProtoReflect() protoreflect.Message {
	mi := &file_binaryIoTypeC_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSingle.ProtoReflect.Descriptor instead.
func (*SetSingle) Descriptor() ([]byte, []int) {
	return file_binaryIoTypeC_proto_rawDescGZIP(), []int{11}
}

func (x *SetSingle) GetChannel() uint32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *SetSingle) GetState() bool {
	if x != nil {
		return x.State
	}
	return false
}

// Sets all binary channels
type SetAll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// binary coded map of input values. 0 means low, 1 means high, LSB is Output0
	Values uint32 `protobuf:"fixed32,1,opt,name=values,proto3" json:"values,omitempty"`
	// mask to define which channels are affected by the set all command. 0 means not set, 1 means set, LSB is channel 0
	Mask uint32 `protobuf:"fixed32,2,opt,name=mask,proto3" json:"mask,omitempty"`
}

func (x *SetAll) Reset() {
	*x = SetAll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binaryIoTypeC_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAll) ProtoMessage() {}

func (x *SetAll) ProtoReflect() protoreflect.Message {
	mi := &file_binaryIoTypeC_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAll.ProtoReflect.Descriptor instead.
func (*SetAll) Descriptor() ([]byte, []int) {
	return file_binaryIoTypeC_proto_rawDescGZIP(), []int{12}
}

func (x *SetAll) GetValues() uint32 {
	if x != nil {
		return x.Values
	}
	return 0
}

func (x *SetAll) GetMask() uint32 {
	if x != nil {
		return x.Mask
	}
	return 0
}

// FunctionControlSet to pass to Functionblock.FunctionControl.functionSpecificFunctionControlSet hook
type FunctionControlSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*FunctionControlSet_Single
	//	*FunctionControlSet_All
	Type isFunctionControlSet_Type `protobuf_oneof:"type"`
}

func (x *FunctionControlSet) Reset() {
	*x = FunctionControlSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binaryIoTypeC_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionControlSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionControlSet) ProtoMessage() {}

func (x *FunctionControlSet) ProtoReflect() protoreflect.Message {
	mi := &file_binaryIoTypeC_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionControlSet.ProtoReflect.Descriptor instead.
func (*FunctionControlSet) Descriptor() ([]byte, []int) {
	return file_binaryIoTypeC_proto_rawDescGZIP(), []int{13}
}

func (m *FunctionControlSet) GetType() isFunctionControlSet_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *FunctionControlSet) GetSingle() *SetSingle {
	if x, ok := x.GetType().(*FunctionControlSet_Single); ok {
		return x.Single
	}
	return nil
}

func (x *FunctionControlSet) GetAll() *SetAll {
	if x, ok := x.GetType().(*FunctionControlSet_All); ok {
		return x.All
	}
	return nil
}

type isFunctionControlSet_Type interface {
	isFunctionControlSet_Type()
}

type FunctionControlSet_Single struct {
	Single *SetSingle `protobuf:"bytes,1,opt,name=single,proto3,oneof"`
}

type FunctionControlSet_All struct {
	All *SetAll `protobuf:"bytes,2,opt,name=all,proto3,oneof"`
}

func (*FunctionControlSet_Single) isFunctionControlSet_Type() {}

func (*FunctionControlSet_All) isFunctionControlSet_Type() {}

type GetSingleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of the binary input channel
	Channel uint32 `protobuf:"fixed32,1,opt,name=channel,proto3" json:"channel,omitempty"`
	// State for the bianry input channel
	State bool `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	// channel diagnostic bits
	Diag uint32 `protobuf:"fixed32,3,opt,name=diag,proto3" json:"diag,omitempty"`
}

func (x *GetSingleResponse) Reset() {
	*x = GetSingleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binaryIoTypeC_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSingleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSingleResponse) ProtoMessage() {}

func (x *GetSingleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_binaryIoTypeC_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSingleResponse.ProtoReflect.Descriptor instead.
func (*GetSingleResponse) Descriptor() ([]byte, []int) {
	return file_binaryIoTypeC_proto_rawDescGZIP(), []int{14}
}

func (x *GetSingleResponse) GetChannel() uint32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *GetSingleResponse) GetState() bool {
	if x != nil {
		return x.State
	}
	return false
}

func (x *GetSingleResponse) GetDiag() uint32 {
	if x != nil {
		return x.Diag
	}
	return 0
}

type GetAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// binary coded map of input values. 0 means low, 1 means high, LSB is channel 0.
	// In case the input value is unknown, its value is reported as 0. The input value is invalid if
	// the diag NoSupplyVoltage bit is set.
	Inputs uint32 `protobuf:"fixed32,1,opt,name=inputs,proto3" json:"inputs,omitempty"`
	// diagnostic information for each channel, containing the ChannelDiag bits.
	// first diag corresponds to channel 0, second to channel 1, etc.
	Diag []uint32 `protobuf:"varint,2,rep,packed,name=diag,proto3" json:"diag,omitempty"`
}

func (x *GetAllResponse) Reset() {
	*x = GetAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binaryIoTypeC_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllResponse) ProtoMessage() {}

func (x *GetAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_binaryIoTypeC_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllResponse.ProtoReflect.Descriptor instead.
func (*GetAllResponse) Descriptor() ([]byte, []int) {
	return file_binaryIoTypeC_proto_rawDescGZIP(), []int{15}
}

func (x *GetAllResponse) GetInputs() uint32 {
	if x != nil {
		return x.Inputs
	}
	return 0
}

func (x *GetAllResponse) GetDiag() []uint32 {
	if x != nil {
		return x.Diag
	}
	return nil
}

// FunctionControlGetResponse to pass to Functionblock.FunctionControlResponse.functionSpecificControlGet hook
type FunctionControlGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*FunctionControlGetResponse_Single
	//	*FunctionControlGetResponse_All
	Type isFunctionControlGetResponse_Type `protobuf_oneof:"type"`
}

func (x *FunctionControlGetResponse) Reset() {
	*x = FunctionControlGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binaryIoTypeC_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionControlGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionControlGetResponse) ProtoMessage() {}

func (x *FunctionControlGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_binaryIoTypeC_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionControlGetResponse.ProtoReflect.Descriptor instead.
func (*FunctionControlGetResponse) Descriptor() ([]byte, []int) {
	return file_binaryIoTypeC_proto_rawDescGZIP(), []int{16}
}

func (m *FunctionControlGetResponse) GetType() isFunctionControlGetResponse_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *FunctionControlGetResponse) GetSingle() *GetSingleResponse {
	if x, ok := x.GetType().(*FunctionControlGetResponse_Single); ok {
		return x.Single
	}
	return nil
}

func (x *FunctionControlGetResponse) GetAll() *GetAllResponse {
	if x, ok := x.GetType().(*FunctionControlGetResponse_All); ok {
		return x.All
	}
	return nil
}

type isFunctionControlGetResponse_Type interface {
	isFunctionControlGetResponse_Type()
}

type FunctionControlGetResponse_Single struct {
	Single *GetSingleResponse `protobuf:"bytes,1,opt,name=single,proto3,oneof"`
}

type FunctionControlGetResponse_All struct {
	All *GetAllResponse `protobuf:"bytes,2,opt,name=all,proto3,oneof"`
}

func (*FunctionControlGetResponse_Single) isFunctionControlGetResponse_Type() {}

func (*FunctionControlGetResponse_All) isFunctionControlGetResponse_Type() {}

type SetSingleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetSingleResponse) Reset() {
	*x = SetSingleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binaryIoTypeC_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSingleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSingleResponse) ProtoMessage() {}

func (x *SetSingleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_binaryIoTypeC_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSingleResponse.ProtoReflect.Descriptor instead.
func (*SetSingleResponse) Descriptor() ([]byte, []int) {
	return file_binaryIoTypeC_proto_rawDescGZIP(), []int{17}
}

type SetAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetAllResponse) Reset() {
	*x = SetAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binaryIoTypeC_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAllResponse) ProtoMessage() {}

func (x *SetAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_binaryIoTypeC_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAllResponse.ProtoReflect.Descriptor instead.
func (*SetAllResponse) Descriptor() ([]byte, []int) {
	return file_binaryIoTypeC_proto_rawDescGZIP(), []int{18}
}

// FunctionControlSetResponse to pass to Functionblock.FunctionControlResponse.functionSpecificControlSet hook
type FunctionControlSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*FunctionControlSetResponse_Single
	//	*FunctionControlSetResponse_All
	Type isFunctionControlSetResponse_Type `protobuf_oneof:"type"`
}

func (x *FunctionControlSetResponse) Reset() {
	*x = FunctionControlSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binaryIoTypeC_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionControlSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionControlSetResponse) ProtoMessage() {}

func (x *FunctionControlSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_binaryIoTypeC_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionControlSetResponse.ProtoReflect.Descriptor instead.
func (*FunctionControlSetResponse) Descriptor() ([]byte, []int) {
	return file_binaryIoTypeC_proto_rawDescGZIP(), []int{19}
}

func (m *FunctionControlSetResponse) GetType() isFunctionControlSetResponse_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *FunctionControlSetResponse) GetSingle() *SetSingleResponse {
	if x, ok := x.GetType().(*FunctionControlSetResponse_Single); ok {
		return x.Single
	}
	return nil
}

func (x *FunctionControlSetResponse) GetAll() *SetAllResponse {
	if x, ok := x.GetType().(*FunctionControlSetResponse_All); ok {
		return x.All
	}
	return nil
}

type isFunctionControlSetResponse_Type interface {
	isFunctionControlSetResponse_Type()
}

type FunctionControlSetResponse_Single struct {
	Single *SetSingleResponse `protobuf:"bytes,1,opt,name=single,proto3,oneof"`
}

type FunctionControlSetResponse_All struct {
	All *SetAllResponse `protobuf:"bytes,2,opt,name=all,proto3,oneof"`
}

func (*FunctionControlSetResponse_Single) isFunctionControlSetResponse_Type() {}

func (*FunctionControlSetResponse_All) isFunctionControlSetResponse_Type() {}

// ============= StreamControl ==================
// StreamControlStart to pass to Functionblock.StreamControlStart.functionSpecificStreamControlStart hook
type StreamControlStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// mask to define which channels are considered in the stream. 0 means don't send channels value, 1 means sent it
	// LSB is channel 0
	ChannelFilterMask uint32 `protobuf:"fixed32,1,opt,name=channelFilterMask,proto3" json:"channelFilterMask,omitempty"`
}

func (x *StreamControlStart) Reset() {
	*x = StreamControlStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binaryIoTypeC_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamControlStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamControlStart) ProtoMessage() {}

func (x *StreamControlStart) ProtoReflect() protoreflect.Message {
	mi := &file_binaryIoTypeC_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamControlStart.ProtoReflect.Descriptor instead.
func (*StreamControlStart) Descriptor() ([]byte, []int) {
	return file_binaryIoTypeC_proto_rawDescGZIP(), []int{20}
}

func (x *StreamControlStart) GetChannelFilterMask() uint32 {
	if x != nil {
		return x.ChannelFilterMask
	}
	return 0
}

// Sample is taken whenever the values change with respect to the last reported sample on that stream.
// An initial sample is sent immediately after stream start.
type Sample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp for that specific channels sample. This is the time the sample was taken.
	// This timestamp is in microseconds since the start of the device and does not get synchronized with the clients time.
	Timestamp uint64 `protobuf:"fixed64,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// binary coded map of input values. 0 means low, 1 means high, LSB is channel 0.
	// In case the input value is unknown, its value is reported as 0.
	Values uint32 `protobuf:"fixed32,2,opt,name=values,proto3" json:"values,omitempty"`
	// binary coded map of flags reflecting whether the corresponding bit in "values" is valid
	ValueValid uint32 `protobuf:"fixed32,3,opt,name=value_valid,json=valueValid,proto3" json:"value_valid,omitempty"`
}

func (x *Sample) Reset() {
	*x = Sample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binaryIoTypeC_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sample) ProtoMessage() {}

func (x *Sample) ProtoReflect() protoreflect.Message {
	mi := &file_binaryIoTypeC_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sample.ProtoReflect.Descriptor instead.
func (*Sample) Descriptor() ([]byte, []int) {
	return file_binaryIoTypeC_proto_rawDescGZIP(), []int{21}
}

func (x *Sample) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Sample) GetValues() uint32 {
	if x != nil {
		return x.Values
	}
	return 0
}

func (x *Sample) GetValueValid() uint32 {
	if x != nil {
		return x.ValueValid
	}
	return 0
}

// StreamData to pass to Functionblock.StreamData.functionSpecificStreamData hook
type StreamData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Samples []*Sample `protobuf:"bytes,1,rep,name=samples,proto3" json:"samples,omitempty"`
}

func (x *StreamData) Reset() {
	*x = StreamData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binaryIoTypeC_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamData) ProtoMessage() {}

func (x *StreamData) ProtoReflect() protoreflect.Message {
	mi := &file_binaryIoTypeC_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamData.ProtoReflect.Descriptor instead.
func (*StreamData) Descriptor() ([]byte, []int) {
	return file_binaryIoTypeC_proto_rawDescGZIP(), []int{22}
}

func (x *StreamData) GetSamples() []*Sample {
	if x != nil {
		return x.Samples
	}
	return nil
}

var File_binaryIoTypeC_proto protoreflect.FileDescriptor

var file_binaryIoTypeC_proto_rawDesc = []byte{
	0x0a, 0x13, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x43, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x6f, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x22, 0x63, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x6f, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x10, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x42,
	0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x6f,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x64, 0x6f, 0x67, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x12,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x4d, 0x61,
	0x73, 0x6b, 0x12, 0x34, 0x0a, 0x15, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x64, 0x6f, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x15, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f,
	0x67, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x1a, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x22, 0xc4, 0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x43, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x4d, 0x61, 0x73, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x12, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x64, 0x6f, 0x67, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x34, 0x0a, 0x15, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x15, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22,
	0x17, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x22, 0x4b, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0xe5, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3b, 0x0a, 0x03, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x43, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x03, 0x67, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x03,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x49, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x43, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x03, 0x73, 0x65, 0x74, 0x12, 0x4a, 0x0a, 0x08, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x49, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x43, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x25, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x1c, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x6d, 0x61,
	0x73, 0x6b, 0x22, 0x7b, 0x0a, 0x12, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x47, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x49, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x43, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x03,
	0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x49, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x43, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x48, 0x00, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x3b, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x34, 0x0a, 0x06,
	0x53, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x6d, 0x61,
	0x73, 0x6b, 0x22, 0x7b, 0x0a, 0x12, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x49, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x43, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x03,
	0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x49, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x43, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x48, 0x00, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x57, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x04, 0x64, 0x69, 0x61, 0x67, 0x22, 0x3c, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x61, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x04, 0x64, 0x69, 0x61, 0x67, 0x22, 0x93, 0x01, 0x0a, 0x1a, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x6f,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x12, 0x31, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x43, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x03, 0x61, 0x6c, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x13, 0x0a, 0x11,
	0x53, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x10, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x1a, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x6f, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x31,
	0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x49, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x43, 0x2e, 0x53, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6c,
	0x6c, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x42, 0x0a, 0x12, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x2c, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x4d, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x5f, 0x0a,
	0x06, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x3d,
	0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x07,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x43, 0x2e, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2a, 0x53, 0x0a,
	0x0b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x1c,
	0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x49, 0x4f, 0x54, 0x59, 0x50, 0x45, 0x43, 0x5f, 0x49, 0x4e,
	0x50, 0x55, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x31, 0x5f, 0x33, 0x10, 0x00, 0x12, 0x22,
	0x0a, 0x1e, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x49, 0x4f, 0x54, 0x59, 0x50, 0x45, 0x43, 0x5f,
	0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x50, 0x55, 0x4c, 0x4c,
	0x10, 0x01, 0x2a, 0x7d, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x61,
	0x67, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x44, 0x69, 0x61, 0x67, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x4e, 0x6f, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64,
	0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x55, 0x6e, 0x64, 0x65,
	0x72, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x10,
	0x10, 0x42, 0x18, 0x5a, 0x16, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x6f, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_binaryIoTypeC_proto_rawDescOnce sync.Once
	file_binaryIoTypeC_proto_rawDescData = file_binaryIoTypeC_proto_rawDesc
)

func file_binaryIoTypeC_proto_rawDescGZIP() []byte {
	file_binaryIoTypeC_proto_rawDescOnce.Do(func() {
		file_binaryIoTypeC_proto_rawDescData = protoimpl.X.CompressGZIP(file_binaryIoTypeC_proto_rawDescData)
	})
	return file_binaryIoTypeC_proto_rawDescData
}

var file_binaryIoTypeC_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_binaryIoTypeC_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_binaryIoTypeC_proto_goTypes = []interface{}{
	(ChannelMode)(0),                      // 0: binaryIoTypeC.ChannelMode
	(ChannelDiag)(0),                      // 1: binaryIoTypeC.ChannelDiag
	(*ChannelConfig)(nil),                 // 2: binaryIoTypeC.ChannelConfig
	(*ConfigurationSet)(nil),              // 3: binaryIoTypeC.ConfigurationSet
	(*ConfigurationSetResponse)(nil),      // 4: binaryIoTypeC.ConfigurationSetResponse
	(*ConfigurationGet)(nil),              // 5: binaryIoTypeC.ConfigurationGet
	(*ConfigurationGetResponse)(nil),      // 6: binaryIoTypeC.ConfigurationGetResponse
	(*ConfigurationDescribe)(nil),         // 7: binaryIoTypeC.ConfigurationDescribe
	(*ConfigurationDescribeResponse)(nil), // 8: binaryIoTypeC.ConfigurationDescribeResponse
	(*ConfigurationResponse)(nil),         // 9: binaryIoTypeC.ConfigurationResponse
	(*GetSingle)(nil),                     // 10: binaryIoTypeC.GetSingle
	(*GetAll)(nil),                        // 11: binaryIoTypeC.GetAll
	(*FunctionControlGet)(nil),            // 12: binaryIoTypeC.FunctionControlGet
	(*SetSingle)(nil),                     // 13: binaryIoTypeC.SetSingle
	(*SetAll)(nil),                        // 14: binaryIoTypeC.SetAll
	(*FunctionControlSet)(nil),            // 15: binaryIoTypeC.FunctionControlSet
	(*GetSingleResponse)(nil),             // 16: binaryIoTypeC.GetSingleResponse
	(*GetAllResponse)(nil),                // 17: binaryIoTypeC.GetAllResponse
	(*FunctionControlGetResponse)(nil),    // 18: binaryIoTypeC.FunctionControlGetResponse
	(*SetSingleResponse)(nil),             // 19: binaryIoTypeC.SetSingleResponse
	(*SetAllResponse)(nil),                // 20: binaryIoTypeC.SetAllResponse
	(*FunctionControlSetResponse)(nil),    // 21: binaryIoTypeC.FunctionControlSetResponse
	(*StreamControlStart)(nil),            // 22: binaryIoTypeC.StreamControlStart
	(*Sample)(nil),                        // 23: binaryIoTypeC.Sample
	(*StreamData)(nil),                    // 24: binaryIoTypeC.StreamData
}
var file_binaryIoTypeC_proto_depIdxs = []int32{
	0,  // 0: binaryIoTypeC.ChannelConfig.mode:type_name -> binaryIoTypeC.ChannelMode
	2,  // 1: binaryIoTypeC.ConfigurationSet.channelConfig:type_name -> binaryIoTypeC.ChannelConfig
	2,  // 2: binaryIoTypeC.ConfigurationGetResponse.channelConfig:type_name -> binaryIoTypeC.ChannelConfig
	6,  // 3: binaryIoTypeC.ConfigurationResponse.get:type_name -> binaryIoTypeC.ConfigurationGetResponse
	4,  // 4: binaryIoTypeC.ConfigurationResponse.set:type_name -> binaryIoTypeC.ConfigurationSetResponse
	8,  // 5: binaryIoTypeC.ConfigurationResponse.describe:type_name -> binaryIoTypeC.ConfigurationDescribeResponse
	10, // 6: binaryIoTypeC.FunctionControlGet.single:type_name -> binaryIoTypeC.GetSingle
	11, // 7: binaryIoTypeC.FunctionControlGet.all:type_name -> binaryIoTypeC.GetAll
	13, // 8: binaryIoTypeC.FunctionControlSet.single:type_name -> binaryIoTypeC.SetSingle
	14, // 9: binaryIoTypeC.FunctionControlSet.all:type_name -> binaryIoTypeC.SetAll
	16, // 10: binaryIoTypeC.FunctionControlGetResponse.single:type_name -> binaryIoTypeC.GetSingleResponse
	17, // 11: binaryIoTypeC.FunctionControlGetResponse.all:type_name -> binaryIoTypeC.GetAllResponse
	19, // 12: binaryIoTypeC.FunctionControlSetResponse.single:type_name -> binaryIoTypeC.SetSingleResponse
	20, // 13: binaryIoTypeC.FunctionControlSetResponse.all:type_name -> binaryIoTypeC.SetAllResponse
	23, // 14: binaryIoTypeC.StreamData.samples:type_name -> binaryIoTypeC.Sample
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_binaryIoTypeC_proto_init() }
func file_binaryIoTypeC_proto_init() {
	if File_binaryIoTypeC_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_binaryIoTypeC_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_binaryIoTypeC_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_binaryIoTypeC_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_binaryIoTypeC_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_binaryIoTypeC_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_binaryIoTypeC_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationDescribe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_binaryIoTypeC_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationDescribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_binaryIoTypeC_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_binaryIoTypeC_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSingle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_binaryIoTypeC_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_binaryIoTypeC_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionControlGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_binaryIoTypeC_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSingle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_binaryIoTypeC_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_binaryIoTypeC_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionControlSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_binaryIoTypeC_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSingleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_binaryIoTypeC_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_binaryIoTypeC_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionControlGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_binaryIoTypeC_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSingleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_binaryIoTypeC_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_binaryIoTypeC_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionControlSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_binaryIoTypeC_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamControlStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_binaryIoTypeC_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_binaryIoTypeC_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_binaryIoTypeC_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*ConfigurationResponse_Get)(nil),
		(*ConfigurationResponse_Set)(nil),
		(*ConfigurationResponse_Describe)(nil),
	}
	file_binaryIoTypeC_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*FunctionControlGet_Single)(nil),
		(*FunctionControlGet_All)(nil),
	}
	file_binaryIoTypeC_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*FunctionControlSet_Single)(nil),
		(*FunctionControlSet_All)(nil),
	}
	file_binaryIoTypeC_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*FunctionControlGetResponse_Single)(nil),
		(*FunctionControlGetResponse_All)(nil),
	}
	file_binaryIoTypeC_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*FunctionControlSetResponse_Single)(nil),
		(*FunctionControlSetResponse_All)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_binaryIoTypeC_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_binaryIoTypeC_proto_goTypes,
		DependencyIndexes: file_binaryIoTypeC_proto_depIdxs,
		EnumInfos:         file_binaryIoTypeC_proto_enumTypes,
		MessageInfos:      file_binaryIoTypeC_proto_msgTypes,
	}.Build()
	File_binaryIoTypeC_proto = out.File
	file_binaryIoTypeC_proto_rawDesc = nil
	file_binaryIoTypeC_proto_goTypes = nil
	file_binaryIoTypeC_proto_depIdxs = nil
}
