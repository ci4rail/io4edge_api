/*
Copyright Â© 2025 Ci4Rail GmbH <engineering@ci4rail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
syntax = "proto3";

package watchdog;
option go_package = "watchdog/v1";

// ============= Configuration =================

enum WatchdogStrategy {
    POWERCUT = 0; // power cut strategy
    SHUTDOWN = 1; // shut down the system
    REBOOT = 2; // reboot the system
}

// ConfigurationSet to pass to Functionblock.Configuration.functionSpecificConfigurationSet hook
message ConfigurationSet {
    bool enable = 1; // enable or disable the watchdog
    fixed32 timeout_ms = 2; // timeout in milliseconds
    fixed32 wd_reboot_threshold = 3; // threshold in number of reboots to trigger a reboot
    fixed32 wd_reboot_window = 4; // time window in seconds to count reboots
    fixed32 wd_boot_delay = 5; // delay in seconds after booting before the watchdog is enabled
    WatchdogStrategy strategy = 6; // strategy to apply on watchdog timeout
}

// ConfigurationSetResponse to pass to Functionblock.Configuration.functionSpecificConfigurationSetResponse hook
message ConfigurationSetResponse {
    // not implemented
}

// ConfigurationGet to pass to Functionblock.Configuration.functionSpecificConfigurationGet hook
message ConfigurationGet {
    // not implemented
}

// ConfigurationGetResponse to pass to Functionblock.ConfigurationGetResponse.functionSpecificConfigurationGetResponse hook
// Returns the current hardware configuration
message ConfigurationGetResponse {
    // not implemented
}

// ConfigurationDescribe to pass to Functionblock.Configuration.functionSpecificConfigurationDescribe hook
message ConfigurationDescribe {
    // no parameters
}

message ConfigurationDescribeResponse {
    // todo
}

// ConfigurationResponse to pass to Functionblock.ConfigurationResponse.functionSpecificConfigurationResponse hook
message ConfigurationResponse {
    oneof type {
        ConfigurationGetResponse get = 1;
        ConfigurationSetResponse set = 2;
        ConfigurationDescribeResponse describe = 3;
    }
}


// ============= FunctionControl =================

// FunctionControlGet to pass to Functionblock.FunctionControl.functionSpecificFunctionControlGet hook
message FunctionControlGet {
    // not implemented
}

// FunctionControlSet to pass to Functionblock.FunctionControl.functionSpecificFunctionControlSet hook
message FunctionControlSet {
    bool kick = 1; // kick the watchdog
}


// FunctionControlGetResponse to pass to Functionblock.FunctionControlResponse.functionSpecificControlGet hook
message FunctionControlGetResponse {
    // not implemented
}

message SetPixelAreaResponse {
    // no parameters
}

message SetDisplayOnResponse {
    // no parameters
}

// FunctionControlSetResponse to pass to Functionblock.FunctionControlResponse.functionSpecificControlSet hook
message FunctionControlSetResponse {
    // not implemented
}


// ============= StreamControl ==================
// StreamControlStart to pass to Functionblock.StreamControlStart.functionSpecificStreamControlStart hook
message StreamControlStart {
    // not implemented
}

// StreamData to pass to Functionblock.StreamData.functionSpecificStreamData hook
message StreamData {
    // not implemented
}
