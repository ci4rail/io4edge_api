/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: digiwave.proto */

#ifndef PROTOBUF_C_digiwave_2eproto__INCLUDED
#define PROTOBUF_C_digiwave_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Bitbus__ConfigurationSet Bitbus__ConfigurationSet;
typedef struct _Bitbus__ConfigurationSetResponse Bitbus__ConfigurationSetResponse;
typedef struct _Bitbus__ConfigurationGet Bitbus__ConfigurationGet;
typedef struct _Bitbus__ConfigurationGetResponse Bitbus__ConfigurationGetResponse;
typedef struct _Bitbus__ConfigurationDescribe Bitbus__ConfigurationDescribe;
typedef struct _Bitbus__ConfigurationDescribeResponse Bitbus__ConfigurationDescribeResponse;
typedef struct _Bitbus__FunctionControlGet Bitbus__FunctionControlGet;
typedef struct _Bitbus__Frame Bitbus__Frame;
typedef struct _Bitbus__FunctionControlSet Bitbus__FunctionControlSet;
typedef struct _Bitbus__FunctionControlGetResponse Bitbus__FunctionControlGetResponse;
typedef struct _Bitbus__FunctionControlSetResponse Bitbus__FunctionControlSetResponse;
typedef struct _Bitbus__StreamControlStart Bitbus__StreamControlStart;
typedef struct _Bitbus__Sample Bitbus__Sample;
typedef struct _Bitbus__StreamData Bitbus__StreamData;


/* --- enums --- */

typedef enum _Bitbus__Sample__Flags {
  /*
   * no flags set
   */
  BITBUS__SAMPLE__FLAGS__none = 0,
  /*
   * frame has a bad CRC
   */
  BITBUS__SAMPLE__FLAGS__bad_crc = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(BITBUS__SAMPLE__FLAGS)
} Bitbus__Sample__Flags;

/* --- messages --- */

/*
 * ConfigurationSet to pass to
 * Functionblock.Configuration.functionSpecificConfigurationSet hook
 */
struct  _Bitbus__ConfigurationSet
{
  ProtobufCMessage base;
  /*
   * if true, frames with wrong CRC are not discarded
   */
  protobuf_c_boolean ignore_crc;
  /*
   * if true, the baudrate shall be set to 62500 (otherwise 375000)
   */
  protobuf_c_boolean baud_62500;
  /*
   * if true, recveive frames that are sent by myself
   */
  protobuf_c_boolean full_duplex;
  /*
   * bit field mask for address filter (32 bytes with 8 bits each. TODO: Bit order?. 
   */
  ProtobufCBinaryData address_filter;
};
#define BITBUS__CONFIGURATION_SET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bitbus__configuration_set__descriptor) \
    , 0, 0, 0, {0,NULL} }


/*
 * ConfigurationSetResponse to pass to
 * Functionblock.Configuration.functionSpecificConfigurationSetResponse hook
 */
struct  _Bitbus__ConfigurationSetResponse
{
  ProtobufCMessage base;
};
#define BITBUS__CONFIGURATION_SET_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bitbus__configuration_set_response__descriptor) \
     }


/*
 * ConfigurationGet to pass to
 * Functionblock.Configuration.functionSpecificConfigurationGet hook
 */
struct  _Bitbus__ConfigurationGet
{
  ProtobufCMessage base;
};
#define BITBUS__CONFIGURATION_GET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bitbus__configuration_get__descriptor) \
     }


/*
 * ConfigurationGetResponse to pass to
 * Functionblock.ConfigurationGetResponse.functionSpecificConfigurationGetResponse
 * hook Returns the current hardware configuration
 */
struct  _Bitbus__ConfigurationGetResponse
{
  ProtobufCMessage base;
};
#define BITBUS__CONFIGURATION_GET_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bitbus__configuration_get_response__descriptor) \
     }


/*
 * ConfigurationDescribe to pass to
 * Functionblock.Configuration.functionSpecificConfigurationDescribe hook
 */
struct  _Bitbus__ConfigurationDescribe
{
  ProtobufCMessage base;
};
#define BITBUS__CONFIGURATION_DESCRIBE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bitbus__configuration_describe__descriptor) \
     }


struct  _Bitbus__ConfigurationDescribeResponse
{
  ProtobufCMessage base;
};
#define BITBUS__CONFIGURATION_DESCRIBE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bitbus__configuration_describe_response__descriptor) \
     }


/*
 * FunctionControlGet to pass to
 * Functionblock.FunctionControl.functionSpecificFunctionControlGet hook
 */
struct  _Bitbus__FunctionControlGet
{
  ProtobufCMessage base;
};
#define BITBUS__FUNCTION_CONTROL_GET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bitbus__function_control_get__descriptor) \
     }


struct  _Bitbus__Frame
{
  ProtobufCMessage base;
  /*
   * byte 0: address
   * byte 1: control
   * byte 2..n: information
   */
  ProtobufCBinaryData bitbus_frame;
};
#define BITBUS__FRAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bitbus__frame__descriptor) \
    , {0,NULL} }


/*
 * FunctionControlSet to pass to
 * Functionblock.FunctionControl.functionSpecificFunctionControlSet hook
 */
struct  _Bitbus__FunctionControlSet
{
  ProtobufCMessage base;
  /*
   * frames to send to the bus
   */
  size_t n_frames;
  Bitbus__Frame **frames;
};
#define BITBUS__FUNCTION_CONTROL_SET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bitbus__function_control_set__descriptor) \
    , 0,NULL }


/*
 * FunctionControlGetResponse to pass to
 * Functionblock.FunctionControlResponse.functionSpecificControlGet hook
 */
struct  _Bitbus__FunctionControlGetResponse
{
  ProtobufCMessage base;
};
#define BITBUS__FUNCTION_CONTROL_GET_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bitbus__function_control_get_response__descriptor) \
     }


/*
 * FunctionControlSetResponse to pass to
 * Functionblock.FunctionControlResponse.functionSpecificControlSet hook
 */
struct  _Bitbus__FunctionControlSetResponse
{
  ProtobufCMessage base;
};
#define BITBUS__FUNCTION_CONTROL_SET_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bitbus__function_control_set_response__descriptor) \
     }


/*
 * StreamControlStart to pass to
 * Functionblock.StreamControlStart.functionSpecificStreamControlStart hook
 */
struct  _Bitbus__StreamControlStart
{
  ProtobufCMessage base;
};
#define BITBUS__STREAM_CONTROL_START__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bitbus__stream_control_start__descriptor) \
     }


struct  _Bitbus__Sample
{
  ProtobufCMessage base;
  /*
   * This timestamp is in microseconds since the start of the device and does not get synchronized with the clients time.
   */
  uint64_t timestamp;
  /*
   * flags for the sample (bitmask with values from Flags enum)
   */
  uint32_t flags;
  /*
   * Frame received from the bus
   * byte 0: address
   * byte 1: control
   * byte 2..n: information
   */
  ProtobufCBinaryData bitbus_frame;
};
#define BITBUS__SAMPLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bitbus__sample__descriptor) \
    , 0, 0, {0,NULL} }


/*
 * StreamData to pass to Functionblock.StreamData.functionSpecificStreamData hook
 */
struct  _Bitbus__StreamData
{
  ProtobufCMessage base;
  /*
   * frames received from the bus with timestamp
   */
  size_t n_samples;
  Bitbus__Sample **samples;
};
#define BITBUS__STREAM_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bitbus__stream_data__descriptor) \
    , 0,NULL }


/* Bitbus__ConfigurationSet methods */
void   bitbus__configuration_set__init
                     (Bitbus__ConfigurationSet         *message);
size_t bitbus__configuration_set__get_packed_size
                     (const Bitbus__ConfigurationSet   *message);
size_t bitbus__configuration_set__pack
                     (const Bitbus__ConfigurationSet   *message,
                      uint8_t             *out);
size_t bitbus__configuration_set__pack_to_buffer
                     (const Bitbus__ConfigurationSet   *message,
                      ProtobufCBuffer     *buffer);
Bitbus__ConfigurationSet *
       bitbus__configuration_set__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bitbus__configuration_set__free_unpacked
                     (Bitbus__ConfigurationSet *message,
                      ProtobufCAllocator *allocator);
/* Bitbus__ConfigurationSetResponse methods */
void   bitbus__configuration_set_response__init
                     (Bitbus__ConfigurationSetResponse         *message);
size_t bitbus__configuration_set_response__get_packed_size
                     (const Bitbus__ConfigurationSetResponse   *message);
size_t bitbus__configuration_set_response__pack
                     (const Bitbus__ConfigurationSetResponse   *message,
                      uint8_t             *out);
size_t bitbus__configuration_set_response__pack_to_buffer
                     (const Bitbus__ConfigurationSetResponse   *message,
                      ProtobufCBuffer     *buffer);
Bitbus__ConfigurationSetResponse *
       bitbus__configuration_set_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bitbus__configuration_set_response__free_unpacked
                     (Bitbus__ConfigurationSetResponse *message,
                      ProtobufCAllocator *allocator);
/* Bitbus__ConfigurationGet methods */
void   bitbus__configuration_get__init
                     (Bitbus__ConfigurationGet         *message);
size_t bitbus__configuration_get__get_packed_size
                     (const Bitbus__ConfigurationGet   *message);
size_t bitbus__configuration_get__pack
                     (const Bitbus__ConfigurationGet   *message,
                      uint8_t             *out);
size_t bitbus__configuration_get__pack_to_buffer
                     (const Bitbus__ConfigurationGet   *message,
                      ProtobufCBuffer     *buffer);
Bitbus__ConfigurationGet *
       bitbus__configuration_get__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bitbus__configuration_get__free_unpacked
                     (Bitbus__ConfigurationGet *message,
                      ProtobufCAllocator *allocator);
/* Bitbus__ConfigurationGetResponse methods */
void   bitbus__configuration_get_response__init
                     (Bitbus__ConfigurationGetResponse         *message);
size_t bitbus__configuration_get_response__get_packed_size
                     (const Bitbus__ConfigurationGetResponse   *message);
size_t bitbus__configuration_get_response__pack
                     (const Bitbus__ConfigurationGetResponse   *message,
                      uint8_t             *out);
size_t bitbus__configuration_get_response__pack_to_buffer
                     (const Bitbus__ConfigurationGetResponse   *message,
                      ProtobufCBuffer     *buffer);
Bitbus__ConfigurationGetResponse *
       bitbus__configuration_get_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bitbus__configuration_get_response__free_unpacked
                     (Bitbus__ConfigurationGetResponse *message,
                      ProtobufCAllocator *allocator);
/* Bitbus__ConfigurationDescribe methods */
void   bitbus__configuration_describe__init
                     (Bitbus__ConfigurationDescribe         *message);
size_t bitbus__configuration_describe__get_packed_size
                     (const Bitbus__ConfigurationDescribe   *message);
size_t bitbus__configuration_describe__pack
                     (const Bitbus__ConfigurationDescribe   *message,
                      uint8_t             *out);
size_t bitbus__configuration_describe__pack_to_buffer
                     (const Bitbus__ConfigurationDescribe   *message,
                      ProtobufCBuffer     *buffer);
Bitbus__ConfigurationDescribe *
       bitbus__configuration_describe__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bitbus__configuration_describe__free_unpacked
                     (Bitbus__ConfigurationDescribe *message,
                      ProtobufCAllocator *allocator);
/* Bitbus__ConfigurationDescribeResponse methods */
void   bitbus__configuration_describe_response__init
                     (Bitbus__ConfigurationDescribeResponse         *message);
size_t bitbus__configuration_describe_response__get_packed_size
                     (const Bitbus__ConfigurationDescribeResponse   *message);
size_t bitbus__configuration_describe_response__pack
                     (const Bitbus__ConfigurationDescribeResponse   *message,
                      uint8_t             *out);
size_t bitbus__configuration_describe_response__pack_to_buffer
                     (const Bitbus__ConfigurationDescribeResponse   *message,
                      ProtobufCBuffer     *buffer);
Bitbus__ConfigurationDescribeResponse *
       bitbus__configuration_describe_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bitbus__configuration_describe_response__free_unpacked
                     (Bitbus__ConfigurationDescribeResponse *message,
                      ProtobufCAllocator *allocator);
/* Bitbus__FunctionControlGet methods */
void   bitbus__function_control_get__init
                     (Bitbus__FunctionControlGet         *message);
size_t bitbus__function_control_get__get_packed_size
                     (const Bitbus__FunctionControlGet   *message);
size_t bitbus__function_control_get__pack
                     (const Bitbus__FunctionControlGet   *message,
                      uint8_t             *out);
size_t bitbus__function_control_get__pack_to_buffer
                     (const Bitbus__FunctionControlGet   *message,
                      ProtobufCBuffer     *buffer);
Bitbus__FunctionControlGet *
       bitbus__function_control_get__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bitbus__function_control_get__free_unpacked
                     (Bitbus__FunctionControlGet *message,
                      ProtobufCAllocator *allocator);
/* Bitbus__Frame methods */
void   bitbus__frame__init
                     (Bitbus__Frame         *message);
size_t bitbus__frame__get_packed_size
                     (const Bitbus__Frame   *message);
size_t bitbus__frame__pack
                     (const Bitbus__Frame   *message,
                      uint8_t             *out);
size_t bitbus__frame__pack_to_buffer
                     (const Bitbus__Frame   *message,
                      ProtobufCBuffer     *buffer);
Bitbus__Frame *
       bitbus__frame__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bitbus__frame__free_unpacked
                     (Bitbus__Frame *message,
                      ProtobufCAllocator *allocator);
/* Bitbus__FunctionControlSet methods */
void   bitbus__function_control_set__init
                     (Bitbus__FunctionControlSet         *message);
size_t bitbus__function_control_set__get_packed_size
                     (const Bitbus__FunctionControlSet   *message);
size_t bitbus__function_control_set__pack
                     (const Bitbus__FunctionControlSet   *message,
                      uint8_t             *out);
size_t bitbus__function_control_set__pack_to_buffer
                     (const Bitbus__FunctionControlSet   *message,
                      ProtobufCBuffer     *buffer);
Bitbus__FunctionControlSet *
       bitbus__function_control_set__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bitbus__function_control_set__free_unpacked
                     (Bitbus__FunctionControlSet *message,
                      ProtobufCAllocator *allocator);
/* Bitbus__FunctionControlGetResponse methods */
void   bitbus__function_control_get_response__init
                     (Bitbus__FunctionControlGetResponse         *message);
size_t bitbus__function_control_get_response__get_packed_size
                     (const Bitbus__FunctionControlGetResponse   *message);
size_t bitbus__function_control_get_response__pack
                     (const Bitbus__FunctionControlGetResponse   *message,
                      uint8_t             *out);
size_t bitbus__function_control_get_response__pack_to_buffer
                     (const Bitbus__FunctionControlGetResponse   *message,
                      ProtobufCBuffer     *buffer);
Bitbus__FunctionControlGetResponse *
       bitbus__function_control_get_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bitbus__function_control_get_response__free_unpacked
                     (Bitbus__FunctionControlGetResponse *message,
                      ProtobufCAllocator *allocator);
/* Bitbus__FunctionControlSetResponse methods */
void   bitbus__function_control_set_response__init
                     (Bitbus__FunctionControlSetResponse         *message);
size_t bitbus__function_control_set_response__get_packed_size
                     (const Bitbus__FunctionControlSetResponse   *message);
size_t bitbus__function_control_set_response__pack
                     (const Bitbus__FunctionControlSetResponse   *message,
                      uint8_t             *out);
size_t bitbus__function_control_set_response__pack_to_buffer
                     (const Bitbus__FunctionControlSetResponse   *message,
                      ProtobufCBuffer     *buffer);
Bitbus__FunctionControlSetResponse *
       bitbus__function_control_set_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bitbus__function_control_set_response__free_unpacked
                     (Bitbus__FunctionControlSetResponse *message,
                      ProtobufCAllocator *allocator);
/* Bitbus__StreamControlStart methods */
void   bitbus__stream_control_start__init
                     (Bitbus__StreamControlStart         *message);
size_t bitbus__stream_control_start__get_packed_size
                     (const Bitbus__StreamControlStart   *message);
size_t bitbus__stream_control_start__pack
                     (const Bitbus__StreamControlStart   *message,
                      uint8_t             *out);
size_t bitbus__stream_control_start__pack_to_buffer
                     (const Bitbus__StreamControlStart   *message,
                      ProtobufCBuffer     *buffer);
Bitbus__StreamControlStart *
       bitbus__stream_control_start__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bitbus__stream_control_start__free_unpacked
                     (Bitbus__StreamControlStart *message,
                      ProtobufCAllocator *allocator);
/* Bitbus__Sample methods */
void   bitbus__sample__init
                     (Bitbus__Sample         *message);
size_t bitbus__sample__get_packed_size
                     (const Bitbus__Sample   *message);
size_t bitbus__sample__pack
                     (const Bitbus__Sample   *message,
                      uint8_t             *out);
size_t bitbus__sample__pack_to_buffer
                     (const Bitbus__Sample   *message,
                      ProtobufCBuffer     *buffer);
Bitbus__Sample *
       bitbus__sample__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bitbus__sample__free_unpacked
                     (Bitbus__Sample *message,
                      ProtobufCAllocator *allocator);
/* Bitbus__StreamData methods */
void   bitbus__stream_data__init
                     (Bitbus__StreamData         *message);
size_t bitbus__stream_data__get_packed_size
                     (const Bitbus__StreamData   *message);
size_t bitbus__stream_data__pack
                     (const Bitbus__StreamData   *message,
                      uint8_t             *out);
size_t bitbus__stream_data__pack_to_buffer
                     (const Bitbus__StreamData   *message,
                      ProtobufCBuffer     *buffer);
Bitbus__StreamData *
       bitbus__stream_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bitbus__stream_data__free_unpacked
                     (Bitbus__StreamData *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Bitbus__ConfigurationSet_Closure)
                 (const Bitbus__ConfigurationSet *message,
                  void *closure_data);
typedef void (*Bitbus__ConfigurationSetResponse_Closure)
                 (const Bitbus__ConfigurationSetResponse *message,
                  void *closure_data);
typedef void (*Bitbus__ConfigurationGet_Closure)
                 (const Bitbus__ConfigurationGet *message,
                  void *closure_data);
typedef void (*Bitbus__ConfigurationGetResponse_Closure)
                 (const Bitbus__ConfigurationGetResponse *message,
                  void *closure_data);
typedef void (*Bitbus__ConfigurationDescribe_Closure)
                 (const Bitbus__ConfigurationDescribe *message,
                  void *closure_data);
typedef void (*Bitbus__ConfigurationDescribeResponse_Closure)
                 (const Bitbus__ConfigurationDescribeResponse *message,
                  void *closure_data);
typedef void (*Bitbus__FunctionControlGet_Closure)
                 (const Bitbus__FunctionControlGet *message,
                  void *closure_data);
typedef void (*Bitbus__Frame_Closure)
                 (const Bitbus__Frame *message,
                  void *closure_data);
typedef void (*Bitbus__FunctionControlSet_Closure)
                 (const Bitbus__FunctionControlSet *message,
                  void *closure_data);
typedef void (*Bitbus__FunctionControlGetResponse_Closure)
                 (const Bitbus__FunctionControlGetResponse *message,
                  void *closure_data);
typedef void (*Bitbus__FunctionControlSetResponse_Closure)
                 (const Bitbus__FunctionControlSetResponse *message,
                  void *closure_data);
typedef void (*Bitbus__StreamControlStart_Closure)
                 (const Bitbus__StreamControlStart *message,
                  void *closure_data);
typedef void (*Bitbus__Sample_Closure)
                 (const Bitbus__Sample *message,
                  void *closure_data);
typedef void (*Bitbus__StreamData_Closure)
                 (const Bitbus__StreamData *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor bitbus__configuration_set__descriptor;
extern const ProtobufCMessageDescriptor bitbus__configuration_set_response__descriptor;
extern const ProtobufCMessageDescriptor bitbus__configuration_get__descriptor;
extern const ProtobufCMessageDescriptor bitbus__configuration_get_response__descriptor;
extern const ProtobufCMessageDescriptor bitbus__configuration_describe__descriptor;
extern const ProtobufCMessageDescriptor bitbus__configuration_describe_response__descriptor;
extern const ProtobufCMessageDescriptor bitbus__function_control_get__descriptor;
extern const ProtobufCMessageDescriptor bitbus__frame__descriptor;
extern const ProtobufCMessageDescriptor bitbus__function_control_set__descriptor;
extern const ProtobufCMessageDescriptor bitbus__function_control_get_response__descriptor;
extern const ProtobufCMessageDescriptor bitbus__function_control_set_response__descriptor;
extern const ProtobufCMessageDescriptor bitbus__stream_control_start__descriptor;
extern const ProtobufCMessageDescriptor bitbus__sample__descriptor;
extern const ProtobufCEnumDescriptor    bitbus__sample__flags__descriptor;
extern const ProtobufCMessageDescriptor bitbus__stream_data__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_digiwave_2eproto__INCLUDED */
